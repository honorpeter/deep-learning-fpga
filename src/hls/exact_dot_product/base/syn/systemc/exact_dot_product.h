// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _exact_dot_product_HH_
#define _exact_dot_product_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "get_result.h"

namespace ap_rtl {

struct exact_dot_product : public sc_module {
    // Port declarations 8
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_lv<16> > data_in_V_V_TDATA;
    sc_in< sc_logic > data_in_V_V_TVALID;
    sc_out< sc_logic > data_in_V_V_TREADY;
    sc_out< sc_lv<16> > data_out_V_V_TDATA;
    sc_out< sc_logic > data_out_V_V_TVALID;
    sc_in< sc_logic > data_out_V_V_TREADY;


    // Module declarations
    exact_dot_product(sc_module_name name);
    SC_HAS_PROCESS(exact_dot_product);

    ~exact_dot_product();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    get_result* grp_get_result_fu_110;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<16> > data_in_V_V_0_data_out;
    sc_signal< sc_logic > data_in_V_V_0_vld_in;
    sc_signal< sc_logic > data_in_V_V_0_vld_out;
    sc_signal< sc_logic > data_in_V_V_0_ack_in;
    sc_signal< sc_logic > data_in_V_V_0_ack_out;
    sc_signal< sc_lv<16> > data_in_V_V_0_payload_A;
    sc_signal< sc_lv<16> > data_in_V_V_0_payload_B;
    sc_signal< sc_logic > data_in_V_V_0_sel_rd;
    sc_signal< sc_logic > data_in_V_V_0_sel_wr;
    sc_signal< sc_logic > data_in_V_V_0_sel;
    sc_signal< sc_logic > data_in_V_V_0_load_A;
    sc_signal< sc_logic > data_in_V_V_0_load_B;
    sc_signal< sc_lv<2> > data_in_V_V_0_state;
    sc_signal< sc_logic > data_in_V_V_0_state_cmp_full;
    sc_signal< sc_lv<16> > data_out_V_V_1_data_out;
    sc_signal< sc_logic > data_out_V_V_1_vld_in;
    sc_signal< sc_logic > data_out_V_V_1_vld_out;
    sc_signal< sc_logic > data_out_V_V_1_ack_in;
    sc_signal< sc_logic > data_out_V_V_1_ack_out;
    sc_signal< sc_lv<16> > data_out_V_V_1_payload_A;
    sc_signal< sc_lv<16> > data_out_V_V_1_payload_B;
    sc_signal< sc_logic > data_out_V_V_1_sel_rd;
    sc_signal< sc_logic > data_out_V_V_1_sel_wr;
    sc_signal< sc_logic > data_out_V_V_1_sel;
    sc_signal< sc_logic > data_out_V_V_1_load_A;
    sc_signal< sc_logic > data_out_V_V_1_load_B;
    sc_signal< sc_lv<2> > data_out_V_V_1_state;
    sc_signal< sc_logic > data_out_V_V_1_state_cmp_full;
    sc_signal< sc_logic > data_in_V_V_TDATA_blk_n;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond_reg_209;
    sc_signal< sc_logic > data_out_V_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<72> > CompleteRegister_m_c_reg_87;
    sc_signal< sc_lv<7> > i_reg_99;
    sc_signal< sc_lv<1> > exitcond_fu_117_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter1_exitcond_reg_209;
    sc_signal< sc_lv<7> > i_1_fu_123_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<16> > tmp_V_2_reg_218;
    sc_signal< sc_lv<22> > r_V_cast_fu_153_p1;
    sc_signal< sc_lv<22> > r_V_cast_reg_223;
    sc_signal< sc_lv<22> > agg_result_V_assign_s_fu_157_p2;
    sc_signal< sc_lv<22> > agg_result_V_assign_s_reg_228;
    sc_signal< sc_lv<6> > op2_assign_fu_167_p2;
    sc_signal< sc_lv<6> > op2_assign_reg_233;
    sc_signal< sc_lv<72> > cr_m_cr_V_fu_203_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<16> > grp_get_result_fu_110_ap_return;
    sc_signal< sc_logic > grp_get_result_fu_110_ap_done;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > grp_get_result_fu_110_ap_start;
    sc_signal< sc_logic > grp_get_result_fu_110_ap_idle;
    sc_signal< sc_logic > grp_get_result_fu_110_ap_ready;
    sc_signal< sc_logic > ap_reg_grp_get_result_fu_110_ap_start;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<10> > tmp_24_fu_129_p1;
    sc_signal< sc_lv<21> > r_V_fu_143_p4;
    sc_signal< sc_lv<5> > e2_V_fu_133_p4;
    sc_signal< sc_lv<6> > tmp_i_cast_fu_163_p1;
    sc_signal< sc_lv<1> > sign_fu_173_p3;
    sc_signal< sc_lv<22> > result_V_fu_180_p3;
    sc_signal< sc_lv<65> > shifted_V_cast_fu_186_p1;
    sc_signal< sc_lv<65> > tmp_i_cast_9_fu_190_p1;
    sc_signal< sc_lv<65> > r_V_1_fu_193_p2;
    sc_signal< sc_lv<72> > r_V_2_cast_fu_199_p1;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_pp0_stage0;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<5> ap_ST_fsm_state6;
    static const sc_lv<5> ap_ST_fsm_state7;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<72> ap_const_lv72_0;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<7> ap_const_lv7_64;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<22> ap_const_lv22_0;
    static const sc_lv<6> ap_const_lv6_C;
    static const sc_lv<32> ap_const_lv32_F;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_agg_result_V_assign_s_fu_157_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_enable_pp0();
    void thread_ap_idle_pp0();
    void thread_ap_rst_n_inv();
    void thread_cr_m_cr_V_fu_203_p2();
    void thread_data_in_V_V_0_ack_in();
    void thread_data_in_V_V_0_ack_out();
    void thread_data_in_V_V_0_data_out();
    void thread_data_in_V_V_0_load_A();
    void thread_data_in_V_V_0_load_B();
    void thread_data_in_V_V_0_sel();
    void thread_data_in_V_V_0_state_cmp_full();
    void thread_data_in_V_V_0_vld_in();
    void thread_data_in_V_V_0_vld_out();
    void thread_data_in_V_V_TDATA_blk_n();
    void thread_data_in_V_V_TREADY();
    void thread_data_out_V_V_1_ack_in();
    void thread_data_out_V_V_1_ack_out();
    void thread_data_out_V_V_1_data_out();
    void thread_data_out_V_V_1_load_A();
    void thread_data_out_V_V_1_load_B();
    void thread_data_out_V_V_1_sel();
    void thread_data_out_V_V_1_state_cmp_full();
    void thread_data_out_V_V_1_vld_in();
    void thread_data_out_V_V_1_vld_out();
    void thread_data_out_V_V_TDATA();
    void thread_data_out_V_V_TDATA_blk_n();
    void thread_data_out_V_V_TVALID();
    void thread_e2_V_fu_133_p4();
    void thread_exitcond_fu_117_p2();
    void thread_grp_get_result_fu_110_ap_start();
    void thread_i_1_fu_123_p2();
    void thread_op2_assign_fu_167_p2();
    void thread_r_V_1_fu_193_p2();
    void thread_r_V_2_cast_fu_199_p1();
    void thread_r_V_cast_fu_153_p1();
    void thread_r_V_fu_143_p4();
    void thread_result_V_fu_180_p3();
    void thread_shifted_V_cast_fu_186_p1();
    void thread_sign_fu_173_p3();
    void thread_tmp_24_fu_129_p1();
    void thread_tmp_i_cast_9_fu_190_p1();
    void thread_tmp_i_cast_fu_163_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
