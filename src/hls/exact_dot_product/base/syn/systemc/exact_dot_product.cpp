// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "exact_dot_product.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic exact_dot_product::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic exact_dot_product::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> exact_dot_product::ap_ST_fsm_state1 = "1";
const sc_lv<5> exact_dot_product::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<5> exact_dot_product::ap_ST_fsm_state5 = "100";
const sc_lv<5> exact_dot_product::ap_ST_fsm_state6 = "1000";
const sc_lv<5> exact_dot_product::ap_ST_fsm_state7 = "10000";
const bool exact_dot_product::ap_const_boolean_1 = true;
const sc_lv<1> exact_dot_product::ap_const_lv1_0 = "0";
const sc_lv<1> exact_dot_product::ap_const_lv1_1 = "1";
const sc_lv<2> exact_dot_product::ap_const_lv2_0 = "00";
const sc_lv<2> exact_dot_product::ap_const_lv2_2 = "10";
const sc_lv<2> exact_dot_product::ap_const_lv2_3 = "11";
const sc_lv<2> exact_dot_product::ap_const_lv2_1 = "1";
const sc_lv<32> exact_dot_product::ap_const_lv32_1 = "1";
const bool exact_dot_product::ap_const_boolean_0 = false;
const sc_lv<32> exact_dot_product::ap_const_lv32_3 = "11";
const sc_lv<32> exact_dot_product::ap_const_lv32_4 = "100";
const sc_lv<32> exact_dot_product::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<72> exact_dot_product::ap_const_lv72_0 = "000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<7> exact_dot_product::ap_const_lv7_0 = "0000000";
const sc_lv<32> exact_dot_product::ap_const_lv32_2 = "10";
const sc_lv<7> exact_dot_product::ap_const_lv7_64 = "1100100";
const sc_lv<7> exact_dot_product::ap_const_lv7_1 = "1";
const sc_lv<32> exact_dot_product::ap_const_lv32_A = "1010";
const sc_lv<32> exact_dot_product::ap_const_lv32_E = "1110";
const sc_lv<10> exact_dot_product::ap_const_lv10_0 = "0000000000";
const sc_lv<22> exact_dot_product::ap_const_lv22_0 = "0000000000000000000000";
const sc_lv<6> exact_dot_product::ap_const_lv6_C = "1100";
const sc_lv<32> exact_dot_product::ap_const_lv32_F = "1111";

exact_dot_product::exact_dot_product(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_get_result_fu_110 = new get_result("grp_get_result_fu_110");
    grp_get_result_fu_110->ap_clk(ap_clk);
    grp_get_result_fu_110->ap_rst(ap_rst_n_inv);
    grp_get_result_fu_110->ap_start(grp_get_result_fu_110_ap_start);
    grp_get_result_fu_110->ap_done(grp_get_result_fu_110_ap_done);
    grp_get_result_fu_110->ap_idle(grp_get_result_fu_110_ap_idle);
    grp_get_result_fu_110->ap_ready(grp_get_result_fu_110_ap_ready);
    grp_get_result_fu_110->CompleteRegister_m_cr_V_read(CompleteRegister_m_c_reg_87);
    grp_get_result_fu_110->ap_return(grp_get_result_fu_110_ap_return);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_agg_result_V_assign_s_fu_157_p2);
    sensitive << ( r_V_cast_fu_153_p1 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( data_in_V_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_209 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( data_in_V_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_209 );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);
    sensitive << ( data_in_V_V_0_vld_out );
    sensitive << ( exitcond_reg_209 );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( exitcond_fu_117_p2 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_cr_m_cr_V_fu_203_p2);
    sensitive << ( CompleteRegister_m_c_reg_87 );
    sensitive << ( r_V_2_cast_fu_199_p1 );

    SC_METHOD(thread_data_in_V_V_0_ack_in);
    sensitive << ( data_in_V_V_0_state );

    SC_METHOD(thread_data_in_V_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_209 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_data_in_V_V_0_data_out);
    sensitive << ( data_in_V_V_0_payload_A );
    sensitive << ( data_in_V_V_0_payload_B );
    sensitive << ( data_in_V_V_0_sel );

    SC_METHOD(thread_data_in_V_V_0_load_A);
    sensitive << ( data_in_V_V_0_sel_wr );
    sensitive << ( data_in_V_V_0_state_cmp_full );

    SC_METHOD(thread_data_in_V_V_0_load_B);
    sensitive << ( data_in_V_V_0_sel_wr );
    sensitive << ( data_in_V_V_0_state_cmp_full );

    SC_METHOD(thread_data_in_V_V_0_sel);
    sensitive << ( data_in_V_V_0_sel_rd );

    SC_METHOD(thread_data_in_V_V_0_state_cmp_full);
    sensitive << ( data_in_V_V_0_state );

    SC_METHOD(thread_data_in_V_V_0_vld_in);
    sensitive << ( data_in_V_V_TVALID );

    SC_METHOD(thread_data_in_V_V_0_vld_out);
    sensitive << ( data_in_V_V_0_state );

    SC_METHOD(thread_data_in_V_V_TDATA_blk_n);
    sensitive << ( data_in_V_V_0_state );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_reg_209 );

    SC_METHOD(thread_data_in_V_V_TREADY);
    sensitive << ( data_in_V_V_0_state );

    SC_METHOD(thread_data_out_V_V_1_ack_in);
    sensitive << ( data_out_V_V_1_state );

    SC_METHOD(thread_data_out_V_V_1_ack_out);
    sensitive << ( data_out_V_V_TREADY );

    SC_METHOD(thread_data_out_V_V_1_data_out);
    sensitive << ( data_out_V_V_1_payload_A );
    sensitive << ( data_out_V_V_1_payload_B );
    sensitive << ( data_out_V_V_1_sel );

    SC_METHOD(thread_data_out_V_V_1_load_A);
    sensitive << ( data_out_V_V_1_sel_wr );
    sensitive << ( data_out_V_V_1_state_cmp_full );

    SC_METHOD(thread_data_out_V_V_1_load_B);
    sensitive << ( data_out_V_V_1_sel_wr );
    sensitive << ( data_out_V_V_1_state_cmp_full );

    SC_METHOD(thread_data_out_V_V_1_sel);
    sensitive << ( data_out_V_V_1_sel_rd );

    SC_METHOD(thread_data_out_V_V_1_state_cmp_full);
    sensitive << ( data_out_V_V_1_state );

    SC_METHOD(thread_data_out_V_V_1_vld_in);
    sensitive << ( data_out_V_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_get_result_fu_110_ap_done );

    SC_METHOD(thread_data_out_V_V_1_vld_out);
    sensitive << ( data_out_V_V_1_state );

    SC_METHOD(thread_data_out_V_V_TDATA);
    sensitive << ( data_out_V_V_1_data_out );

    SC_METHOD(thread_data_out_V_V_TDATA_blk_n);
    sensitive << ( data_out_V_V_1_state );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_data_out_V_V_TVALID);
    sensitive << ( data_out_V_V_1_state );

    SC_METHOD(thread_e2_V_fu_133_p4);
    sensitive << ( data_in_V_V_0_data_out );

    SC_METHOD(thread_exitcond_fu_117_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( i_reg_99 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_grp_get_result_fu_110_ap_start);
    sensitive << ( ap_reg_grp_get_result_fu_110_ap_start );

    SC_METHOD(thread_i_1_fu_123_p2);
    sensitive << ( i_reg_99 );

    SC_METHOD(thread_op2_assign_fu_167_p2);
    sensitive << ( tmp_i_cast_fu_163_p1 );

    SC_METHOD(thread_r_V_1_fu_193_p2);
    sensitive << ( shifted_V_cast_fu_186_p1 );
    sensitive << ( tmp_i_cast_9_fu_190_p1 );

    SC_METHOD(thread_r_V_2_cast_fu_199_p1);
    sensitive << ( r_V_1_fu_193_p2 );

    SC_METHOD(thread_r_V_cast_fu_153_p1);
    sensitive << ( r_V_fu_143_p4 );

    SC_METHOD(thread_r_V_fu_143_p4);
    sensitive << ( tmp_24_fu_129_p1 );

    SC_METHOD(thread_result_V_fu_180_p3);
    sensitive << ( r_V_cast_reg_223 );
    sensitive << ( agg_result_V_assign_s_reg_228 );
    sensitive << ( sign_fu_173_p3 );

    SC_METHOD(thread_shifted_V_cast_fu_186_p1);
    sensitive << ( result_V_fu_180_p3 );

    SC_METHOD(thread_sign_fu_173_p3);
    sensitive << ( tmp_V_2_reg_218 );

    SC_METHOD(thread_tmp_24_fu_129_p1);
    sensitive << ( data_in_V_V_0_data_out );

    SC_METHOD(thread_tmp_i_cast_9_fu_190_p1);
    sensitive << ( op2_assign_reg_233 );

    SC_METHOD(thread_tmp_i_cast_fu_163_p1);
    sensitive << ( e2_V_fu_133_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( data_out_V_V_1_ack_in );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( exitcond_fu_117_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( grp_get_result_fu_110_ap_done );
    sensitive << ( ap_block_pp0_stage0_subdone );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    data_in_V_V_0_sel_rd = SC_LOGIC_0;
    data_in_V_V_0_sel_wr = SC_LOGIC_0;
    data_in_V_V_0_state = "00";
    data_out_V_V_1_sel_rd = SC_LOGIC_0;
    data_out_V_V_1_sel_wr = SC_LOGIC_0;
    data_out_V_V_1_state = "00";
    ap_CS_fsm = "00001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_reg_grp_get_result_fu_110_ap_start = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "exact_dot_product_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, data_in_V_V_TDATA, "(port)data_in_V_V_TDATA");
    sc_trace(mVcdFile, data_in_V_V_TVALID, "(port)data_in_V_V_TVALID");
    sc_trace(mVcdFile, data_in_V_V_TREADY, "(port)data_in_V_V_TREADY");
    sc_trace(mVcdFile, data_out_V_V_TDATA, "(port)data_out_V_V_TDATA");
    sc_trace(mVcdFile, data_out_V_V_TVALID, "(port)data_out_V_V_TVALID");
    sc_trace(mVcdFile, data_out_V_V_TREADY, "(port)data_out_V_V_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, data_in_V_V_0_data_out, "data_in_V_V_0_data_out");
    sc_trace(mVcdFile, data_in_V_V_0_vld_in, "data_in_V_V_0_vld_in");
    sc_trace(mVcdFile, data_in_V_V_0_vld_out, "data_in_V_V_0_vld_out");
    sc_trace(mVcdFile, data_in_V_V_0_ack_in, "data_in_V_V_0_ack_in");
    sc_trace(mVcdFile, data_in_V_V_0_ack_out, "data_in_V_V_0_ack_out");
    sc_trace(mVcdFile, data_in_V_V_0_payload_A, "data_in_V_V_0_payload_A");
    sc_trace(mVcdFile, data_in_V_V_0_payload_B, "data_in_V_V_0_payload_B");
    sc_trace(mVcdFile, data_in_V_V_0_sel_rd, "data_in_V_V_0_sel_rd");
    sc_trace(mVcdFile, data_in_V_V_0_sel_wr, "data_in_V_V_0_sel_wr");
    sc_trace(mVcdFile, data_in_V_V_0_sel, "data_in_V_V_0_sel");
    sc_trace(mVcdFile, data_in_V_V_0_load_A, "data_in_V_V_0_load_A");
    sc_trace(mVcdFile, data_in_V_V_0_load_B, "data_in_V_V_0_load_B");
    sc_trace(mVcdFile, data_in_V_V_0_state, "data_in_V_V_0_state");
    sc_trace(mVcdFile, data_in_V_V_0_state_cmp_full, "data_in_V_V_0_state_cmp_full");
    sc_trace(mVcdFile, data_out_V_V_1_data_out, "data_out_V_V_1_data_out");
    sc_trace(mVcdFile, data_out_V_V_1_vld_in, "data_out_V_V_1_vld_in");
    sc_trace(mVcdFile, data_out_V_V_1_vld_out, "data_out_V_V_1_vld_out");
    sc_trace(mVcdFile, data_out_V_V_1_ack_in, "data_out_V_V_1_ack_in");
    sc_trace(mVcdFile, data_out_V_V_1_ack_out, "data_out_V_V_1_ack_out");
    sc_trace(mVcdFile, data_out_V_V_1_payload_A, "data_out_V_V_1_payload_A");
    sc_trace(mVcdFile, data_out_V_V_1_payload_B, "data_out_V_V_1_payload_B");
    sc_trace(mVcdFile, data_out_V_V_1_sel_rd, "data_out_V_V_1_sel_rd");
    sc_trace(mVcdFile, data_out_V_V_1_sel_wr, "data_out_V_V_1_sel_wr");
    sc_trace(mVcdFile, data_out_V_V_1_sel, "data_out_V_V_1_sel");
    sc_trace(mVcdFile, data_out_V_V_1_load_A, "data_out_V_V_1_load_A");
    sc_trace(mVcdFile, data_out_V_V_1_load_B, "data_out_V_V_1_load_B");
    sc_trace(mVcdFile, data_out_V_V_1_state, "data_out_V_V_1_state");
    sc_trace(mVcdFile, data_out_V_V_1_state_cmp_full, "data_out_V_V_1_state_cmp_full");
    sc_trace(mVcdFile, data_in_V_V_TDATA_blk_n, "data_in_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, exitcond_reg_209, "exitcond_reg_209");
    sc_trace(mVcdFile, data_out_V_V_TDATA_blk_n, "data_out_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, CompleteRegister_m_c_reg_87, "CompleteRegister_m_c_reg_87");
    sc_trace(mVcdFile, i_reg_99, "i_reg_99");
    sc_trace(mVcdFile, exitcond_fu_117_p2, "exitcond_fu_117_p2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, ap_reg_pp0_iter1_exitcond_reg_209, "ap_reg_pp0_iter1_exitcond_reg_209");
    sc_trace(mVcdFile, i_1_fu_123_p2, "i_1_fu_123_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_V_2_reg_218, "tmp_V_2_reg_218");
    sc_trace(mVcdFile, r_V_cast_fu_153_p1, "r_V_cast_fu_153_p1");
    sc_trace(mVcdFile, r_V_cast_reg_223, "r_V_cast_reg_223");
    sc_trace(mVcdFile, agg_result_V_assign_s_fu_157_p2, "agg_result_V_assign_s_fu_157_p2");
    sc_trace(mVcdFile, agg_result_V_assign_s_reg_228, "agg_result_V_assign_s_reg_228");
    sc_trace(mVcdFile, op2_assign_fu_167_p2, "op2_assign_fu_167_p2");
    sc_trace(mVcdFile, op2_assign_reg_233, "op2_assign_reg_233");
    sc_trace(mVcdFile, cr_m_cr_V_fu_203_p2, "cr_m_cr_V_fu_203_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, grp_get_result_fu_110_ap_return, "grp_get_result_fu_110_ap_return");
    sc_trace(mVcdFile, grp_get_result_fu_110_ap_done, "grp_get_result_fu_110_ap_done");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, grp_get_result_fu_110_ap_start, "grp_get_result_fu_110_ap_start");
    sc_trace(mVcdFile, grp_get_result_fu_110_ap_idle, "grp_get_result_fu_110_ap_idle");
    sc_trace(mVcdFile, grp_get_result_fu_110_ap_ready, "grp_get_result_fu_110_ap_ready");
    sc_trace(mVcdFile, ap_reg_grp_get_result_fu_110_ap_start, "ap_reg_grp_get_result_fu_110_ap_start");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_24_fu_129_p1, "tmp_24_fu_129_p1");
    sc_trace(mVcdFile, r_V_fu_143_p4, "r_V_fu_143_p4");
    sc_trace(mVcdFile, e2_V_fu_133_p4, "e2_V_fu_133_p4");
    sc_trace(mVcdFile, tmp_i_cast_fu_163_p1, "tmp_i_cast_fu_163_p1");
    sc_trace(mVcdFile, sign_fu_173_p3, "sign_fu_173_p3");
    sc_trace(mVcdFile, result_V_fu_180_p3, "result_V_fu_180_p3");
    sc_trace(mVcdFile, shifted_V_cast_fu_186_p1, "shifted_V_cast_fu_186_p1");
    sc_trace(mVcdFile, tmp_i_cast_9_fu_190_p1, "tmp_i_cast_9_fu_190_p1");
    sc_trace(mVcdFile, r_V_1_fu_193_p2, "r_V_1_fu_193_p2");
    sc_trace(mVcdFile, r_V_2_cast_fu_199_p1, "r_V_2_cast_fu_199_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
    mHdltvinHandle.open("exact_dot_product.hdltvin.dat");
    mHdltvoutHandle.open("exact_dot_product.hdltvout.dat");
}

exact_dot_product::~exact_dot_product() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_get_result_fu_110;
}

void exact_dot_product::thread_ap_clk_no_reset_() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_exitcond_reg_209.read()))) {
        CompleteRegister_m_c_reg_87 = cr_m_cr_V_fu_203_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        CompleteRegister_m_c_reg_87 = ap_const_lv72_0;
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_grp_get_result_fu_110_ap_start = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            ap_reg_grp_get_result_fu_110_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_get_result_fu_110_ap_ready.read())) {
            ap_reg_grp_get_result_fu_110_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_in_V_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, data_in_V_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, data_in_V_V_0_vld_out.read()))) {
            data_in_V_V_0_sel_rd =  (sc_logic) (~data_in_V_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_in_V_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, data_in_V_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, data_in_V_V_0_ack_in.read()))) {
            data_in_V_V_0_sel_wr =  (sc_logic) (~data_in_V_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_in_V_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, data_in_V_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, data_in_V_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(data_in_V_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, data_in_V_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(data_in_V_V_0_state.read(), ap_const_lv2_2)))) {
            data_in_V_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, data_in_V_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, data_in_V_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(data_in_V_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, data_in_V_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(data_in_V_V_0_state.read(), ap_const_lv2_1)))) {
            data_in_V_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, data_in_V_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(data_in_V_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, data_in_V_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(data_in_V_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(data_in_V_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, data_in_V_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, data_in_V_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, data_in_V_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, data_in_V_V_0_ack_out.read()))))) {
            data_in_V_V_0_state = ap_const_lv2_3;
        } else {
            data_in_V_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_out_V_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_V_1_vld_out.read()))) {
            data_out_V_V_1_sel_rd =  (sc_logic) (~data_out_V_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_out_V_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_V_1_ack_in.read()))) {
            data_out_V_V_1_sel_wr =  (sc_logic) (~data_out_V_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_out_V_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, data_out_V_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, data_out_V_V_1_state.read())))) {
            data_out_V_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, data_out_V_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, data_out_V_V_1_state.read())))) {
            data_out_V_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, data_out_V_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, data_out_V_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, data_out_V_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_V_1_ack_out.read()))))) {
            data_out_V_V_1_state = ap_const_lv2_3;
        } else {
            data_out_V_V_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_117_p2.read()))) {
        i_reg_99 = i_1_fu_123_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        i_reg_99 = ap_const_lv7_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_209.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        agg_result_V_assign_s_reg_228 = agg_result_V_assign_s_fu_157_p2.read();
        op2_assign_reg_233 = op2_assign_fu_167_p2.read();
        r_V_cast_reg_223 = r_V_cast_fu_153_p1.read();
        tmp_V_2_reg_218 = data_in_V_V_0_data_out.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_reg_pp0_iter1_exitcond_reg_209 = exitcond_reg_209.read();
        exitcond_reg_209 = exitcond_fu_117_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, data_in_V_V_0_load_A.read())) {
        data_in_V_V_0_payload_A = data_in_V_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, data_in_V_V_0_load_B.read())) {
        data_in_V_V_0_payload_B = data_in_V_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_V_1_load_A.read())) {
        data_out_V_V_1_payload_A = grp_get_result_fu_110_ap_return.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_V_1_load_B.read())) {
        data_out_V_V_1_payload_B = grp_get_result_fu_110_ap_return.read();
    }
}

void exact_dot_product::thread_agg_result_V_assign_s_fu_157_p2() {
    agg_result_V_assign_s_fu_157_p2 = (!ap_const_lv22_0.is_01() || !r_V_cast_fu_153_p1.read().is_01())? sc_lv<22>(): (sc_biguint<22>(ap_const_lv22_0) - sc_biguint<22>(r_V_cast_fu_153_p1.read()));
}

void exact_dot_product::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void exact_dot_product::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void exact_dot_product::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[2];
}

void exact_dot_product::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[3];
}

void exact_dot_product::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[4];
}

void exact_dot_product::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void exact_dot_product::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_209.read()) && esl_seteq<1,1,1>(ap_const_logic_0, data_in_V_V_0_vld_out.read()));
}

void exact_dot_product::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_209.read()) && esl_seteq<1,1,1>(ap_const_logic_0, data_in_V_V_0_vld_out.read()));
}

void exact_dot_product::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void exact_dot_product::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_209.read()) && esl_seteq<1,1,1>(ap_const_logic_0, data_in_V_V_0_vld_out.read()));
}

void exact_dot_product::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void exact_dot_product::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_117_p2.read())) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void exact_dot_product::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void exact_dot_product::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void exact_dot_product::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void exact_dot_product::thread_cr_m_cr_V_fu_203_p2() {
    cr_m_cr_V_fu_203_p2 = (!CompleteRegister_m_c_reg_87.read().is_01() || !r_V_2_cast_fu_199_p1.read().is_01())? sc_lv<72>(): (sc_biguint<72>(CompleteRegister_m_c_reg_87.read()) + sc_bigint<72>(r_V_2_cast_fu_199_p1.read()));
}

void exact_dot_product::thread_data_in_V_V_0_ack_in() {
    data_in_V_V_0_ack_in = data_in_V_V_0_state.read()[1];
}

void exact_dot_product::thread_data_in_V_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_209.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        data_in_V_V_0_ack_out = ap_const_logic_1;
    } else {
        data_in_V_V_0_ack_out = ap_const_logic_0;
    }
}

void exact_dot_product::thread_data_in_V_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, data_in_V_V_0_sel.read())) {
        data_in_V_V_0_data_out = data_in_V_V_0_payload_B.read();
    } else {
        data_in_V_V_0_data_out = data_in_V_V_0_payload_A.read();
    }
}

void exact_dot_product::thread_data_in_V_V_0_load_A() {
    data_in_V_V_0_load_A = (data_in_V_V_0_state_cmp_full.read() & ~data_in_V_V_0_sel_wr.read());
}

void exact_dot_product::thread_data_in_V_V_0_load_B() {
    data_in_V_V_0_load_B = (data_in_V_V_0_sel_wr.read() & data_in_V_V_0_state_cmp_full.read());
}

void exact_dot_product::thread_data_in_V_V_0_sel() {
    data_in_V_V_0_sel = data_in_V_V_0_sel_rd.read();
}

void exact_dot_product::thread_data_in_V_V_0_state_cmp_full() {
    data_in_V_V_0_state_cmp_full =  (sc_logic) ((!data_in_V_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(data_in_V_V_0_state.read() != ap_const_lv2_1))[0];
}

void exact_dot_product::thread_data_in_V_V_0_vld_in() {
    data_in_V_V_0_vld_in = data_in_V_V_TVALID.read();
}

void exact_dot_product::thread_data_in_V_V_0_vld_out() {
    data_in_V_V_0_vld_out = data_in_V_V_0_state.read()[0];
}

void exact_dot_product::thread_data_in_V_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_209.read()))) {
        data_in_V_V_TDATA_blk_n = data_in_V_V_0_state.read()[0];
    } else {
        data_in_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void exact_dot_product::thread_data_in_V_V_TREADY() {
    data_in_V_V_TREADY = data_in_V_V_0_state.read()[1];
}

void exact_dot_product::thread_data_out_V_V_1_ack_in() {
    data_out_V_V_1_ack_in = data_out_V_V_1_state.read()[1];
}

void exact_dot_product::thread_data_out_V_V_1_ack_out() {
    data_out_V_V_1_ack_out = data_out_V_V_TREADY.read();
}

void exact_dot_product::thread_data_out_V_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, data_out_V_V_1_sel.read())) {
        data_out_V_V_1_data_out = data_out_V_V_1_payload_B.read();
    } else {
        data_out_V_V_1_data_out = data_out_V_V_1_payload_A.read();
    }
}

void exact_dot_product::thread_data_out_V_V_1_load_A() {
    data_out_V_V_1_load_A = (data_out_V_V_1_state_cmp_full.read() & ~data_out_V_V_1_sel_wr.read());
}

void exact_dot_product::thread_data_out_V_V_1_load_B() {
    data_out_V_V_1_load_B = (data_out_V_V_1_sel_wr.read() & data_out_V_V_1_state_cmp_full.read());
}

void exact_dot_product::thread_data_out_V_V_1_sel() {
    data_out_V_V_1_sel = data_out_V_V_1_sel_rd.read();
}

void exact_dot_product::thread_data_out_V_V_1_state_cmp_full() {
    data_out_V_V_1_state_cmp_full =  (sc_logic) ((!data_out_V_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(data_out_V_V_1_state.read() != ap_const_lv2_1))[0];
}

void exact_dot_product::thread_data_out_V_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_get_result_fu_110_ap_done.read())))) {
        data_out_V_V_1_vld_in = ap_const_logic_1;
    } else {
        data_out_V_V_1_vld_in = ap_const_logic_0;
    }
}

void exact_dot_product::thread_data_out_V_V_1_vld_out() {
    data_out_V_V_1_vld_out = data_out_V_V_1_state.read()[0];
}

void exact_dot_product::thread_data_out_V_V_TDATA() {
    data_out_V_V_TDATA = data_out_V_V_1_data_out.read();
}

void exact_dot_product::thread_data_out_V_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        data_out_V_V_TDATA_blk_n = data_out_V_V_1_state.read()[1];
    } else {
        data_out_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void exact_dot_product::thread_data_out_V_V_TVALID() {
    data_out_V_V_TVALID = data_out_V_V_1_state.read()[0];
}

void exact_dot_product::thread_e2_V_fu_133_p4() {
    e2_V_fu_133_p4 = data_in_V_V_0_data_out.read().range(14, 10);
}

void exact_dot_product::thread_exitcond_fu_117_p2() {
    exitcond_fu_117_p2 = (!i_reg_99.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_99.read() == ap_const_lv7_64);
}

void exact_dot_product::thread_grp_get_result_fu_110_ap_start() {
    grp_get_result_fu_110_ap_start = ap_reg_grp_get_result_fu_110_ap_start.read();
}

void exact_dot_product::thread_i_1_fu_123_p2() {
    i_1_fu_123_p2 = (!i_reg_99.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i_reg_99.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void exact_dot_product::thread_op2_assign_fu_167_p2() {
    op2_assign_fu_167_p2 = (!ap_const_lv6_C.is_01() || !tmp_i_cast_fu_163_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(ap_const_lv6_C) + sc_biguint<6>(tmp_i_cast_fu_163_p1.read()));
}

void exact_dot_product::thread_r_V_1_fu_193_p2() {
    r_V_1_fu_193_p2 = (!tmp_i_cast_9_fu_190_p1.read().is_01())? sc_lv<65>(): shifted_V_cast_fu_186_p1.read() << (unsigned short)tmp_i_cast_9_fu_190_p1.read().to_uint();
}

void exact_dot_product::thread_r_V_2_cast_fu_199_p1() {
    r_V_2_cast_fu_199_p1 = esl_sext<72,65>(r_V_1_fu_193_p2.read());
}

void exact_dot_product::thread_r_V_cast_fu_153_p1() {
    r_V_cast_fu_153_p1 = esl_zext<22,21>(r_V_fu_143_p4.read());
}

void exact_dot_product::thread_r_V_fu_143_p4() {
    r_V_fu_143_p4 = esl_concat<11,10>(esl_concat<1,10>(ap_const_lv1_1, tmp_24_fu_129_p1.read()), ap_const_lv10_0);
}

void exact_dot_product::thread_result_V_fu_180_p3() {
    result_V_fu_180_p3 = (!sign_fu_173_p3.read()[0].is_01())? sc_lv<22>(): ((sign_fu_173_p3.read()[0].to_bool())? agg_result_V_assign_s_reg_228.read(): r_V_cast_reg_223.read());
}

void exact_dot_product::thread_shifted_V_cast_fu_186_p1() {
    shifted_V_cast_fu_186_p1 = esl_sext<65,22>(result_V_fu_180_p3.read());
}

void exact_dot_product::thread_sign_fu_173_p3() {
    sign_fu_173_p3 = tmp_V_2_reg_218.read().range(15, 15);
}

void exact_dot_product::thread_tmp_24_fu_129_p1() {
    tmp_24_fu_129_p1 = data_in_V_V_0_data_out.read().range(10-1, 0);
}

void exact_dot_product::thread_tmp_i_cast_9_fu_190_p1() {
    tmp_i_cast_9_fu_190_p1 = esl_zext<65,6>(op2_assign_reg_233.read());
}

void exact_dot_product::thread_tmp_i_cast_fu_163_p1() {
    tmp_i_cast_fu_163_p1 = esl_zext<6,5>(e2_V_fu_133_p4.read());
}

void exact_dot_product::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_117_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_117_p2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_get_result_fu_110_ap_done.read())))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(data_out_V_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

void exact_dot_product::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_in_V_V_TDATA\" :  \"" << data_in_V_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_in_V_V_TVALID\" :  \"" << data_in_V_V_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"data_in_V_V_TREADY\" :  \"" << data_in_V_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_V_V_TDATA\" :  \"" << data_out_V_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_V_V_TVALID\" :  \"" << data_out_V_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_out_V_V_TREADY\" :  \"" << data_out_V_V_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

