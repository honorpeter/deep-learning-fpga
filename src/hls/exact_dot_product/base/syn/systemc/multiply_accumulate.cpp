// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "multiply_accumulate.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic multiply_accumulate::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic multiply_accumulate::ap_const_logic_0 = sc_dt::Log_0;
const bool multiply_accumulate::ap_const_boolean_1 = true;
const bool multiply_accumulate::ap_const_boolean_0 = false;
const sc_lv<1> multiply_accumulate::ap_const_lv1_1 = "1";
const sc_lv<32> multiply_accumulate::ap_const_lv32_A = "1010";
const sc_lv<32> multiply_accumulate::ap_const_lv32_E = "1110";
const sc_lv<23> multiply_accumulate::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<7> multiply_accumulate::ap_const_lv7_C = "1100";
const sc_lv<32> multiply_accumulate::ap_const_lv32_F = "1111";

multiply_accumulate::multiply_accumulate(sc_module_name name) : sc_module(name), mVcdFile(0) {
    neural_network_adbkb_U1 = new neural_network_adbkb<1,2,128,128,128>("neural_network_adbkb_U1");
    neural_network_adbkb_U1->clk(ap_clk);
    neural_network_adbkb_U1->reset(ap_rst);
    neural_network_adbkb_U1->din0(ap_reg_pp0_iter4_CompleteRegister_m_c_1_reg_193);
    neural_network_adbkb_U1->din1(grp_fu_172_p1);
    neural_network_adbkb_U1->ce(grp_fu_172_ce);
    neural_network_adbkb_U1->dout(grp_fu_172_p2);
    neural_network_mucud_U2 = new neural_network_mucud<1,3,11,11,22>("neural_network_mucud_U2");
    neural_network_mucud_U2->clk(ap_clk);
    neural_network_mucud_U2->reset(ap_rst);
    neural_network_mucud_U2->din0(grp_fu_177_p0);
    neural_network_mucud_U2->din1(grp_fu_177_p1);
    neural_network_mucud_U2->ce(grp_fu_177_ce);
    neural_network_mucud_U2->dout(grp_fu_177_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_agg_result_V_assign_s_fu_115_p2);
    sensitive << ( result_V_fu_112_p1 );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter4);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter5);

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter6);

    SC_METHOD(thread_ap_return);
    sensitive << ( grp_fu_172_p2 );
    sensitive << ( ap_ce_reg );
    sensitive << ( ap_return_int_reg );

    SC_METHOD(thread_e1_V_fu_58_p4);
    sensitive << ( in1_V_int_reg );

    SC_METHOD(thread_e2_V_fu_80_p4);
    sensitive << ( in2_V_int_reg );

    SC_METHOD(thread_exact_s_fu_144_p2);
    sensitive << ( sign_fu_130_p3 );
    sensitive << ( sign_1_fu_137_p3 );

    SC_METHOD(thread_grp_fu_172_ce);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce_reg );

    SC_METHOD(thread_grp_fu_172_p1);
    sensitive << ( r_V_2_reg_233 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_grp_fu_177_ce);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce_reg );

    SC_METHOD(thread_grp_fu_177_p0);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( grp_fu_177_p00 );

    SC_METHOD(thread_grp_fu_177_p00);
    sensitive << ( p_Result_s_fu_50_p3 );

    SC_METHOD(thread_grp_fu_177_p1);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( grp_fu_177_p10 );

    SC_METHOD(thread_grp_fu_177_p10);
    sensitive << ( p_Result_1_fu_72_p3 );

    SC_METHOD(thread_lhs_V_1_fu_98_p1);
    sensitive << ( e1_V_fu_58_p4 );

    SC_METHOD(thread_op2_assign_fu_124_p2);
    sensitive << ( tmp_cast_fu_121_p1 );

    SC_METHOD(thread_p_Result_1_fu_72_p3);
    sensitive << ( tmp_31_fu_68_p1 );

    SC_METHOD(thread_p_Result_s_fu_50_p3);
    sensitive << ( tmp_fu_46_p1 );

    SC_METHOD(thread_r_V_1_fu_106_p2);
    sensitive << ( lhs_V_1_fu_98_p1 );
    sensitive << ( rhs_V_1_fu_102_p1 );

    SC_METHOD(thread_r_V_2_fu_163_p2);
    sensitive << ( shifted_V_cast_fu_156_p1 );
    sensitive << ( tmp_cast_21_fu_160_p1 );

    SC_METHOD(thread_result_V_2_fu_150_p3);
    sensitive << ( result_V_reg_218 );
    sensitive << ( agg_result_V_assign_s_reg_223 );
    sensitive << ( exact_s_fu_144_p2 );

    SC_METHOD(thread_result_V_fu_112_p1);
    sensitive << ( r_V_reg_213 );

    SC_METHOD(thread_rhs_V_1_fu_102_p1);
    sensitive << ( e2_V_fu_80_p4 );

    SC_METHOD(thread_shifted_V_cast_fu_156_p1);
    sensitive << ( result_V_2_fu_150_p3 );

    SC_METHOD(thread_sign_1_fu_137_p3);
    sensitive << ( ap_reg_pp0_iter3_in2_V_read_reg_183 );

    SC_METHOD(thread_sign_fu_130_p3);
    sensitive << ( ap_reg_pp0_iter3_in1_V_read_reg_188 );

    SC_METHOD(thread_tmp_31_fu_68_p1);
    sensitive << ( in2_V_int_reg );

    SC_METHOD(thread_tmp_cast_21_fu_160_p1);
    sensitive << ( op2_assign_reg_228 );

    SC_METHOD(thread_tmp_cast_fu_121_p1);
    sensitive << ( ap_reg_pp0_iter2_r_V_1_reg_208 );

    SC_METHOD(thread_tmp_fu_46_p1);
    sensitive << ( in1_V_int_reg );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "multiply_accumulate_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, CompleteRegister_m_cr_V_read, "(port)CompleteRegister_m_cr_V_read");
    sc_trace(mVcdFile, in1_V, "(port)in1_V");
    sc_trace(mVcdFile, in2_V, "(port)in2_V");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, in2_V_read_reg_183, "in2_V_read_reg_183");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter3, "ap_block_state4_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter4, "ap_block_state5_pp0_stage0_iter4");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter5, "ap_block_state6_pp0_stage0_iter5");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter6, "ap_block_state7_pp0_stage0_iter6");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, ap_reg_pp0_iter1_in2_V_read_reg_183, "ap_reg_pp0_iter1_in2_V_read_reg_183");
    sc_trace(mVcdFile, ap_reg_pp0_iter2_in2_V_read_reg_183, "ap_reg_pp0_iter2_in2_V_read_reg_183");
    sc_trace(mVcdFile, ap_reg_pp0_iter3_in2_V_read_reg_183, "ap_reg_pp0_iter3_in2_V_read_reg_183");
    sc_trace(mVcdFile, in1_V_read_reg_188, "in1_V_read_reg_188");
    sc_trace(mVcdFile, ap_reg_pp0_iter1_in1_V_read_reg_188, "ap_reg_pp0_iter1_in1_V_read_reg_188");
    sc_trace(mVcdFile, ap_reg_pp0_iter2_in1_V_read_reg_188, "ap_reg_pp0_iter2_in1_V_read_reg_188");
    sc_trace(mVcdFile, ap_reg_pp0_iter3_in1_V_read_reg_188, "ap_reg_pp0_iter3_in1_V_read_reg_188");
    sc_trace(mVcdFile, CompleteRegister_m_c_1_reg_193, "CompleteRegister_m_c_1_reg_193");
    sc_trace(mVcdFile, ap_reg_pp0_iter1_CompleteRegister_m_c_1_reg_193, "ap_reg_pp0_iter1_CompleteRegister_m_c_1_reg_193");
    sc_trace(mVcdFile, ap_reg_pp0_iter2_CompleteRegister_m_c_1_reg_193, "ap_reg_pp0_iter2_CompleteRegister_m_c_1_reg_193");
    sc_trace(mVcdFile, ap_reg_pp0_iter3_CompleteRegister_m_c_1_reg_193, "ap_reg_pp0_iter3_CompleteRegister_m_c_1_reg_193");
    sc_trace(mVcdFile, ap_reg_pp0_iter4_CompleteRegister_m_c_1_reg_193, "ap_reg_pp0_iter4_CompleteRegister_m_c_1_reg_193");
    sc_trace(mVcdFile, r_V_1_fu_106_p2, "r_V_1_fu_106_p2");
    sc_trace(mVcdFile, r_V_1_reg_208, "r_V_1_reg_208");
    sc_trace(mVcdFile, ap_reg_pp0_iter1_r_V_1_reg_208, "ap_reg_pp0_iter1_r_V_1_reg_208");
    sc_trace(mVcdFile, ap_reg_pp0_iter2_r_V_1_reg_208, "ap_reg_pp0_iter2_r_V_1_reg_208");
    sc_trace(mVcdFile, grp_fu_177_p2, "grp_fu_177_p2");
    sc_trace(mVcdFile, r_V_reg_213, "r_V_reg_213");
    sc_trace(mVcdFile, result_V_fu_112_p1, "result_V_fu_112_p1");
    sc_trace(mVcdFile, result_V_reg_218, "result_V_reg_218");
    sc_trace(mVcdFile, agg_result_V_assign_s_fu_115_p2, "agg_result_V_assign_s_fu_115_p2");
    sc_trace(mVcdFile, agg_result_V_assign_s_reg_223, "agg_result_V_assign_s_reg_223");
    sc_trace(mVcdFile, op2_assign_fu_124_p2, "op2_assign_fu_124_p2");
    sc_trace(mVcdFile, op2_assign_reg_228, "op2_assign_reg_228");
    sc_trace(mVcdFile, r_V_2_fu_163_p2, "r_V_2_fu_163_p2");
    sc_trace(mVcdFile, r_V_2_reg_233, "r_V_2_reg_233");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, tmp_fu_46_p1, "tmp_fu_46_p1");
    sc_trace(mVcdFile, tmp_31_fu_68_p1, "tmp_31_fu_68_p1");
    sc_trace(mVcdFile, p_Result_s_fu_50_p3, "p_Result_s_fu_50_p3");
    sc_trace(mVcdFile, p_Result_1_fu_72_p3, "p_Result_1_fu_72_p3");
    sc_trace(mVcdFile, e1_V_fu_58_p4, "e1_V_fu_58_p4");
    sc_trace(mVcdFile, e2_V_fu_80_p4, "e2_V_fu_80_p4");
    sc_trace(mVcdFile, lhs_V_1_fu_98_p1, "lhs_V_1_fu_98_p1");
    sc_trace(mVcdFile, rhs_V_1_fu_102_p1, "rhs_V_1_fu_102_p1");
    sc_trace(mVcdFile, tmp_cast_fu_121_p1, "tmp_cast_fu_121_p1");
    sc_trace(mVcdFile, sign_fu_130_p3, "sign_fu_130_p3");
    sc_trace(mVcdFile, sign_1_fu_137_p3, "sign_1_fu_137_p3");
    sc_trace(mVcdFile, exact_s_fu_144_p2, "exact_s_fu_144_p2");
    sc_trace(mVcdFile, result_V_2_fu_150_p3, "result_V_2_fu_150_p3");
    sc_trace(mVcdFile, shifted_V_cast_fu_156_p1, "shifted_V_cast_fu_156_p1");
    sc_trace(mVcdFile, tmp_cast_21_fu_160_p1, "tmp_cast_21_fu_160_p1");
    sc_trace(mVcdFile, grp_fu_172_p1, "grp_fu_172_p1");
    sc_trace(mVcdFile, grp_fu_177_p0, "grp_fu_177_p0");
    sc_trace(mVcdFile, grp_fu_177_p1, "grp_fu_177_p1");
    sc_trace(mVcdFile, grp_fu_172_p2, "grp_fu_172_p2");
    sc_trace(mVcdFile, grp_fu_172_ce, "grp_fu_172_ce");
    sc_trace(mVcdFile, grp_fu_177_ce, "grp_fu_177_ce");
    sc_trace(mVcdFile, ap_ce_reg, "ap_ce_reg");
    sc_trace(mVcdFile, CompleteRegister_m_cr_V_read_int_reg, "CompleteRegister_m_cr_V_read_int_reg");
    sc_trace(mVcdFile, in1_V_int_reg, "in1_V_int_reg");
    sc_trace(mVcdFile, in2_V_int_reg, "in2_V_int_reg");
    sc_trace(mVcdFile, ap_return_int_reg, "ap_return_int_reg");
    sc_trace(mVcdFile, grp_fu_177_p00, "grp_fu_177_p00");
    sc_trace(mVcdFile, grp_fu_177_p10, "grp_fu_177_p10");
#endif

    }
}

multiply_accumulate::~multiply_accumulate() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete neural_network_adbkb_U1;
    delete neural_network_mucud_U2;
}

void multiply_accumulate::thread_ap_clk_no_reset_() {
    ap_ce_reg = ap_ce.read();
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_ce_reg.read(), ap_const_logic_1))) {
        CompleteRegister_m_c_1_reg_193 = CompleteRegister_m_cr_V_read_int_reg.read();
        agg_result_V_assign_s_reg_223 = agg_result_V_assign_s_fu_115_p2.read();
        ap_reg_pp0_iter1_CompleteRegister_m_c_1_reg_193 = CompleteRegister_m_c_1_reg_193.read();
        ap_reg_pp0_iter1_in1_V_read_reg_188 = in1_V_read_reg_188.read();
        ap_reg_pp0_iter1_in2_V_read_reg_183 = in2_V_read_reg_183.read();
        ap_reg_pp0_iter1_r_V_1_reg_208 = r_V_1_reg_208.read();
        ap_reg_pp0_iter2_CompleteRegister_m_c_1_reg_193 = ap_reg_pp0_iter1_CompleteRegister_m_c_1_reg_193.read();
        ap_reg_pp0_iter2_in1_V_read_reg_188 = ap_reg_pp0_iter1_in1_V_read_reg_188.read();
        ap_reg_pp0_iter2_in2_V_read_reg_183 = ap_reg_pp0_iter1_in2_V_read_reg_183.read();
        ap_reg_pp0_iter2_r_V_1_reg_208 = ap_reg_pp0_iter1_r_V_1_reg_208.read();
        ap_reg_pp0_iter3_CompleteRegister_m_c_1_reg_193 = ap_reg_pp0_iter2_CompleteRegister_m_c_1_reg_193.read();
        ap_reg_pp0_iter3_in1_V_read_reg_188 = ap_reg_pp0_iter2_in1_V_read_reg_188.read();
        ap_reg_pp0_iter3_in2_V_read_reg_183 = ap_reg_pp0_iter2_in2_V_read_reg_183.read();
        ap_reg_pp0_iter4_CompleteRegister_m_c_1_reg_193 = ap_reg_pp0_iter3_CompleteRegister_m_c_1_reg_193.read();
        in1_V_read_reg_188 = in1_V_int_reg.read();
        in2_V_read_reg_183 = in2_V_int_reg.read();
        op2_assign_reg_228 = op2_assign_fu_124_p2.read();
        r_V_1_reg_208 = r_V_1_fu_106_p2.read();
        r_V_2_reg_233 = r_V_2_fu_163_p2.read();
        r_V_reg_213 = grp_fu_177_p2.read();
        result_V_reg_218 = result_V_fu_112_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())) {
        CompleteRegister_m_cr_V_read_int_reg = CompleteRegister_m_cr_V_read.read();
        in1_V_int_reg = in1_V.read();
        in2_V_int_reg = in2_V.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce_reg.read())) {
        ap_return_int_reg = grp_fu_172_p2.read();
    }
}

void multiply_accumulate::thread_agg_result_V_assign_s_fu_115_p2() {
    agg_result_V_assign_s_fu_115_p2 = (!ap_const_lv23_0.is_01() || !result_V_fu_112_p1.read().is_01())? sc_lv<23>(): (sc_biguint<23>(ap_const_lv23_0) - sc_biguint<23>(result_V_fu_112_p1.read()));
}

void multiply_accumulate::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void multiply_accumulate::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void multiply_accumulate::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void multiply_accumulate::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void multiply_accumulate::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void multiply_accumulate::thread_ap_block_state4_pp0_stage0_iter3() {
    ap_block_state4_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void multiply_accumulate::thread_ap_block_state5_pp0_stage0_iter4() {
    ap_block_state5_pp0_stage0_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void multiply_accumulate::thread_ap_block_state6_pp0_stage0_iter5() {
    ap_block_state6_pp0_stage0_iter5 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void multiply_accumulate::thread_ap_block_state7_pp0_stage0_iter6() {
    ap_block_state7_pp0_stage0_iter6 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void multiply_accumulate::thread_ap_return() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_ce_reg.read())) {
        ap_return = ap_return_int_reg.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce_reg.read())) {
        ap_return = grp_fu_172_p2.read();
    }
}

void multiply_accumulate::thread_e1_V_fu_58_p4() {
    e1_V_fu_58_p4 = in1_V_int_reg.read().range(14, 10);
}

void multiply_accumulate::thread_e2_V_fu_80_p4() {
    e2_V_fu_80_p4 = in2_V_int_reg.read().range(14, 10);
}

void multiply_accumulate::thread_exact_s_fu_144_p2() {
    exact_s_fu_144_p2 = (sign_fu_130_p3.read() ^ sign_1_fu_137_p3.read());
}

void multiply_accumulate::thread_grp_fu_172_ce() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce_reg.read()))) {
        grp_fu_172_ce = ap_const_logic_1;
    } else {
        grp_fu_172_ce = ap_const_logic_0;
    }
}

void multiply_accumulate::thread_grp_fu_172_p1() {
    grp_fu_172_p1 = esl_sext<128,97>(r_V_2_reg_233.read());
}

void multiply_accumulate::thread_grp_fu_177_ce() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce_reg.read()))) {
        grp_fu_177_ce = ap_const_logic_1;
    } else {
        grp_fu_177_ce = ap_const_logic_0;
    }
}

void multiply_accumulate::thread_grp_fu_177_p0() {
    grp_fu_177_p0 =  (sc_lv<11>) (grp_fu_177_p00.read());
}

void multiply_accumulate::thread_grp_fu_177_p00() {
    grp_fu_177_p00 = esl_zext<22,11>(p_Result_s_fu_50_p3.read());
}

void multiply_accumulate::thread_grp_fu_177_p1() {
    grp_fu_177_p1 =  (sc_lv<11>) (grp_fu_177_p10.read());
}

void multiply_accumulate::thread_grp_fu_177_p10() {
    grp_fu_177_p10 = esl_zext<22,11>(p_Result_1_fu_72_p3.read());
}

void multiply_accumulate::thread_lhs_V_1_fu_98_p1() {
    lhs_V_1_fu_98_p1 = esl_zext<6,5>(e1_V_fu_58_p4.read());
}

void multiply_accumulate::thread_op2_assign_fu_124_p2() {
    op2_assign_fu_124_p2 = (!ap_const_lv7_C.is_01() || !tmp_cast_fu_121_p1.read().is_01())? sc_lv<7>(): (sc_biguint<7>(ap_const_lv7_C) + sc_biguint<7>(tmp_cast_fu_121_p1.read()));
}

void multiply_accumulate::thread_p_Result_1_fu_72_p3() {
    p_Result_1_fu_72_p3 = esl_concat<1,10>(ap_const_lv1_1, tmp_31_fu_68_p1.read());
}

void multiply_accumulate::thread_p_Result_s_fu_50_p3() {
    p_Result_s_fu_50_p3 = esl_concat<1,10>(ap_const_lv1_1, tmp_fu_46_p1.read());
}

void multiply_accumulate::thread_r_V_1_fu_106_p2() {
    r_V_1_fu_106_p2 = (!lhs_V_1_fu_98_p1.read().is_01() || !rhs_V_1_fu_102_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(lhs_V_1_fu_98_p1.read()) + sc_biguint<6>(rhs_V_1_fu_102_p1.read()));
}

void multiply_accumulate::thread_r_V_2_fu_163_p2() {
    r_V_2_fu_163_p2 = (!tmp_cast_21_fu_160_p1.read().is_01())? sc_lv<97>(): shifted_V_cast_fu_156_p1.read() << (unsigned short)tmp_cast_21_fu_160_p1.read().to_uint();
}

void multiply_accumulate::thread_result_V_2_fu_150_p3() {
    result_V_2_fu_150_p3 = (!exact_s_fu_144_p2.read()[0].is_01())? sc_lv<23>(): ((exact_s_fu_144_p2.read()[0].to_bool())? agg_result_V_assign_s_reg_223.read(): result_V_reg_218.read());
}

void multiply_accumulate::thread_result_V_fu_112_p1() {
    result_V_fu_112_p1 = esl_zext<23,22>(r_V_reg_213.read());
}

void multiply_accumulate::thread_rhs_V_1_fu_102_p1() {
    rhs_V_1_fu_102_p1 = esl_zext<6,5>(e2_V_fu_80_p4.read());
}

void multiply_accumulate::thread_shifted_V_cast_fu_156_p1() {
    shifted_V_cast_fu_156_p1 = esl_sext<97,23>(result_V_2_fu_150_p3.read());
}

void multiply_accumulate::thread_sign_1_fu_137_p3() {
    sign_1_fu_137_p3 = ap_reg_pp0_iter3_in2_V_read_reg_183.read().range(15, 15);
}

void multiply_accumulate::thread_sign_fu_130_p3() {
    sign_fu_130_p3 = ap_reg_pp0_iter3_in1_V_read_reg_188.read().range(15, 15);
}

void multiply_accumulate::thread_tmp_31_fu_68_p1() {
    tmp_31_fu_68_p1 = in2_V_int_reg.read().range(10-1, 0);
}

void multiply_accumulate::thread_tmp_cast_21_fu_160_p1() {
    tmp_cast_21_fu_160_p1 = esl_zext<97,7>(op2_assign_reg_228.read());
}

void multiply_accumulate::thread_tmp_cast_fu_121_p1() {
    tmp_cast_fu_121_p1 = esl_zext<7,6>(ap_reg_pp0_iter2_r_V_1_reg_208.read());
}

void multiply_accumulate::thread_tmp_fu_46_p1() {
    tmp_fu_46_p1 = in1_V_int_reg.read().range(10-1, 0);
}

}

