// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _multiply_accumulate_HH_
#define _multiply_accumulate_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "neural_network_adbkb.h"
#include "neural_network_mucud.h"

namespace ap_rtl {

struct multiply_accumulate : public sc_module {
    // Port declarations 7
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_lv<128> > CompleteRegister_m_cr_V_read;
    sc_in< sc_lv<16> > in1_V;
    sc_in< sc_lv<16> > in2_V;
    sc_out< sc_lv<128> > ap_return;
    sc_in< sc_logic > ap_ce;


    // Module declarations
    multiply_accumulate(sc_module_name name);
    SC_HAS_PROCESS(multiply_accumulate);

    ~multiply_accumulate();

    sc_trace_file* mVcdFile;

    neural_network_adbkb<1,2,128,128,128>* neural_network_adbkb_U1;
    neural_network_mucud<1,3,11,11,22>* neural_network_mucud_U2;
    sc_signal< sc_lv<16> > in2_V_read_reg_183;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter5;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter6;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<16> > ap_reg_pp0_iter1_in2_V_read_reg_183;
    sc_signal< sc_lv<16> > ap_reg_pp0_iter2_in2_V_read_reg_183;
    sc_signal< sc_lv<16> > ap_reg_pp0_iter3_in2_V_read_reg_183;
    sc_signal< sc_lv<16> > in1_V_read_reg_188;
    sc_signal< sc_lv<16> > ap_reg_pp0_iter1_in1_V_read_reg_188;
    sc_signal< sc_lv<16> > ap_reg_pp0_iter2_in1_V_read_reg_188;
    sc_signal< sc_lv<16> > ap_reg_pp0_iter3_in1_V_read_reg_188;
    sc_signal< sc_lv<128> > CompleteRegister_m_c_1_reg_193;
    sc_signal< sc_lv<128> > ap_reg_pp0_iter1_CompleteRegister_m_c_1_reg_193;
    sc_signal< sc_lv<128> > ap_reg_pp0_iter2_CompleteRegister_m_c_1_reg_193;
    sc_signal< sc_lv<128> > ap_reg_pp0_iter3_CompleteRegister_m_c_1_reg_193;
    sc_signal< sc_lv<128> > ap_reg_pp0_iter4_CompleteRegister_m_c_1_reg_193;
    sc_signal< sc_lv<6> > r_V_1_fu_106_p2;
    sc_signal< sc_lv<6> > r_V_1_reg_208;
    sc_signal< sc_lv<6> > ap_reg_pp0_iter1_r_V_1_reg_208;
    sc_signal< sc_lv<6> > ap_reg_pp0_iter2_r_V_1_reg_208;
    sc_signal< sc_lv<22> > grp_fu_177_p2;
    sc_signal< sc_lv<22> > r_V_reg_213;
    sc_signal< sc_lv<23> > result_V_fu_112_p1;
    sc_signal< sc_lv<23> > result_V_reg_218;
    sc_signal< sc_lv<23> > agg_result_V_assign_s_fu_115_p2;
    sc_signal< sc_lv<23> > agg_result_V_assign_s_reg_223;
    sc_signal< sc_lv<7> > op2_assign_fu_124_p2;
    sc_signal< sc_lv<7> > op2_assign_reg_228;
    sc_signal< sc_lv<97> > r_V_2_fu_163_p2;
    sc_signal< sc_lv<97> > r_V_2_reg_233;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<10> > tmp_fu_46_p1;
    sc_signal< sc_lv<10> > tmp_31_fu_68_p1;
    sc_signal< sc_lv<11> > p_Result_s_fu_50_p3;
    sc_signal< sc_lv<11> > p_Result_1_fu_72_p3;
    sc_signal< sc_lv<5> > e1_V_fu_58_p4;
    sc_signal< sc_lv<5> > e2_V_fu_80_p4;
    sc_signal< sc_lv<6> > lhs_V_1_fu_98_p1;
    sc_signal< sc_lv<6> > rhs_V_1_fu_102_p1;
    sc_signal< sc_lv<7> > tmp_cast_fu_121_p1;
    sc_signal< sc_lv<1> > sign_fu_130_p3;
    sc_signal< sc_lv<1> > sign_1_fu_137_p3;
    sc_signal< sc_lv<1> > exact_s_fu_144_p2;
    sc_signal< sc_lv<23> > result_V_2_fu_150_p3;
    sc_signal< sc_lv<97> > shifted_V_cast_fu_156_p1;
    sc_signal< sc_lv<97> > tmp_cast_21_fu_160_p1;
    sc_signal< sc_lv<128> > grp_fu_172_p1;
    sc_signal< sc_lv<11> > grp_fu_177_p0;
    sc_signal< sc_lv<11> > grp_fu_177_p1;
    sc_signal< sc_lv<128> > grp_fu_172_p2;
    sc_signal< sc_logic > grp_fu_172_ce;
    sc_signal< sc_logic > grp_fu_177_ce;
    sc_signal< sc_logic > ap_ce_reg;
    sc_signal< sc_lv<128> > CompleteRegister_m_cr_V_read_int_reg;
    sc_signal< sc_lv<16> > in1_V_int_reg;
    sc_signal< sc_lv<16> > in2_V_int_reg;
    sc_signal< sc_lv<128> > ap_return_int_reg;
    sc_signal< sc_lv<22> > grp_fu_177_p00;
    sc_signal< sc_lv<22> > grp_fu_177_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const bool ap_const_boolean_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<23> ap_const_lv23_0;
    static const sc_lv<7> ap_const_lv7_C;
    static const sc_lv<32> ap_const_lv32_F;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_agg_result_V_assign_s_fu_115_p2();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_block_state4_pp0_stage0_iter3();
    void thread_ap_block_state5_pp0_stage0_iter4();
    void thread_ap_block_state6_pp0_stage0_iter5();
    void thread_ap_block_state7_pp0_stage0_iter6();
    void thread_ap_return();
    void thread_e1_V_fu_58_p4();
    void thread_e2_V_fu_80_p4();
    void thread_exact_s_fu_144_p2();
    void thread_grp_fu_172_ce();
    void thread_grp_fu_172_p1();
    void thread_grp_fu_177_ce();
    void thread_grp_fu_177_p0();
    void thread_grp_fu_177_p00();
    void thread_grp_fu_177_p1();
    void thread_grp_fu_177_p10();
    void thread_lhs_V_1_fu_98_p1();
    void thread_op2_assign_fu_124_p2();
    void thread_p_Result_1_fu_72_p3();
    void thread_p_Result_s_fu_50_p3();
    void thread_r_V_1_fu_106_p2();
    void thread_r_V_2_fu_163_p2();
    void thread_result_V_2_fu_150_p3();
    void thread_result_V_fu_112_p1();
    void thread_rhs_V_1_fu_102_p1();
    void thread_shifted_V_cast_fu_156_p1();
    void thread_sign_1_fu_137_p3();
    void thread_sign_fu_130_p3();
    void thread_tmp_31_fu_68_p1();
    void thread_tmp_cast_21_fu_160_p1();
    void thread_tmp_cast_fu_121_p1();
    void thread_tmp_fu_46_p1();
};

}

using namespace ap_rtl;

#endif
