-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity multiply_accumulate is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cr_m_cr_V_i : IN STD_LOGIC_VECTOR (511 downto 0);
    cr_m_cr_V_o : OUT STD_LOGIC_VECTOR (511 downto 0);
    cr_m_cr_V_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of multiply_accumulate is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv7_71 : STD_LOGIC_VECTOR (6 downto 0) := "1110001";
    constant ap_const_lv7_F : STD_LOGIC_VECTOR (6 downto 0) := "0001111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_151_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_Result_s_fu_165_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_i_fu_145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_189_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_Result_1_fu_213_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_i2_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_233_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal p_Result_2_fu_247_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_i1_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_271_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal p_Result_3_fu_295_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_i3_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exact_e_V_fu_327_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal exact_e_V_reg_474 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_406_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_3_reg_479 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal r_V_4_fu_336_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_4_reg_485 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_342_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_reg_491 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_fu_379_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_reg_496 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal m1_V_reg_50 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_assign_reg_62 : STD_LOGIC_VECTOR (3 downto 0);
    signal e1_V_reg_73 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_assign_2_reg_85 : STD_LOGIC_VECTOR (2 downto 0);
    signal m2_V_reg_96 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_assign_3_reg_108 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Val2_4_reg_119 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_assign_5_reg_130 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_394_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_assign_cast5_fu_141_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_s_fu_157_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_assign_2_cast_fu_179_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_assign_1_fu_195_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_assign_1_cast_fu_201_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_assign_2_cast4_fu_175_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_1_fu_205_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_assign_3_cast3_fu_223_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_2_fu_239_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_assign_5_cast_fu_261_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_assign_4_fu_277_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_assign_4_cast_fu_283_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_assign_5_cast2_fu_257_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_3_fu_287_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_1_fu_317_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp1_fu_321_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal lhs_V_1_fu_313_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal lhs_V_cast_fu_333_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_cast_fu_358_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_5_fu_355_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_cast_fu_366_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_369_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_348_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_361_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_1_fu_375_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_394_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_fu_406_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_406_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_406_p00 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_406_p10 : STD_LOGIC_VECTOR (21 downto 0);

    component neural_network_adbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (511 downto 0);
        din1 : IN STD_LOGIC_VECTOR (511 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (511 downto 0) );
    end component;


    component neural_network_mucud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;



begin
    neural_network_adbkb_U1 : component neural_network_adbkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 512,
        din1_WIDTH => 512,
        dout_WIDTH => 512)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => cr_m_cr_V_i,
        din1 => grp_fu_394_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_394_p2);

    neural_network_mucud_U2 : component neural_network_mucud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_406_p0,
        din1 => grp_fu_406_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_406_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    e1_V_reg_73_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_145_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                e1_V_reg_73 <= ap_const_lv5_0;
            elsif (((exitcond_i2_fu_183_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                e1_V_reg_73 <= p_Result_1_fu_213_p4;
            end if; 
        end if;
    end process;

    i_assign_2_reg_85_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_145_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_assign_2_reg_85 <= ap_const_lv3_0;
            elsif (((exitcond_i2_fu_183_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_assign_2_reg_85 <= i_1_fu_189_p2;
            end if; 
        end if;
    end process;

    i_assign_3_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i2_fu_183_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_assign_3_reg_108 <= ap_const_lv4_0;
            elsif (((exitcond_i1_fu_227_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_assign_3_reg_108 <= i_2_fu_233_p2;
            end if; 
        end if;
    end process;

    i_assign_5_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i1_fu_227_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_assign_5_reg_130 <= ap_const_lv3_0;
            elsif (((exitcond_i3_fu_265_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_assign_5_reg_130 <= i_3_fu_271_p2;
            end if; 
        end if;
    end process;

    i_assign_reg_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_145_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_assign_reg_62 <= i_fu_151_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_assign_reg_62 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    m1_V_reg_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_145_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                m1_V_reg_50 <= p_Result_s_fu_165_p4;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                m1_V_reg_50 <= ap_const_lv11_400;
            end if; 
        end if;
    end process;

    m2_V_reg_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i2_fu_183_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                m2_V_reg_96 <= ap_const_lv11_400;
            elsif (((exitcond_i1_fu_227_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                m2_V_reg_96 <= p_Result_2_fu_247_p4;
            end if; 
        end if;
    end process;

    p_Val2_4_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i1_fu_227_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_Val2_4_reg_119 <= ap_const_lv5_0;
            elsif (((exitcond_i3_fu_265_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_Val2_4_reg_119 <= p_Result_3_fu_295_p4;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i3_fu_265_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                exact_e_V_reg_474 <= exact_e_V_fu_327_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                r_V_3_reg_479 <= grp_fu_406_p2;
                r_V_4_reg_485 <= r_V_4_fu_336_p2;
                tmp_6_reg_491 <= tmp_6_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                r_V_reg_496 <= r_V_fu_379_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_i_fu_145_p2, ap_CS_fsm_state3, exitcond_i2_fu_183_p2, ap_CS_fsm_state4, exitcond_i1_fu_227_p2, ap_CS_fsm_state5, exitcond_i3_fu_265_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_i_fu_145_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond_i2_fu_183_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond_i1_fu_227_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond_i3_fu_265_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    cr_m_cr_V_o_assign_proc : process(cr_m_cr_V_i, grp_fu_394_p2, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            cr_m_cr_V_o <= grp_fu_394_p2;
        else 
            cr_m_cr_V_o <= cr_m_cr_V_i;
        end if; 
    end process;


    cr_m_cr_V_o_ap_vld_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            cr_m_cr_V_o_ap_vld <= ap_const_logic_1;
        else 
            cr_m_cr_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    exact_e_V_fu_327_p2 <= std_logic_vector(unsigned(tmp1_fu_321_p2) + unsigned(lhs_V_1_fu_313_p1));
    exitcond_i1_fu_227_p2 <= "1" when (i_assign_3_reg_108 = ap_const_lv4_A) else "0";
    exitcond_i2_fu_183_p2 <= "1" when (i_assign_2_reg_85 = ap_const_lv3_5) else "0";
    exitcond_i3_fu_265_p2 <= "1" when (i_assign_5_reg_130 = ap_const_lv3_5) else "0";
    exitcond_i_fu_145_p2 <= "1" when (i_assign_reg_62 = ap_const_lv4_A) else "0";
    grp_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_reg_496),512));
    grp_fu_406_p0 <= grp_fu_406_p00(11 - 1 downto 0);
    grp_fu_406_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m2_V_reg_96),22));
    grp_fu_406_p1 <= grp_fu_406_p10(11 - 1 downto 0);
    grp_fu_406_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m1_V_reg_50),22));
    i_1_fu_189_p2 <= std_logic_vector(unsigned(i_assign_2_reg_85) + unsigned(ap_const_lv3_1));
    i_2_fu_233_p2 <= std_logic_vector(unsigned(i_assign_3_reg_108) + unsigned(ap_const_lv4_1));
    i_3_fu_271_p2 <= std_logic_vector(unsigned(i_assign_5_reg_130) + unsigned(ap_const_lv3_1));
    i_assign_1_cast_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_assign_1_fu_195_p2),32));
    i_assign_1_fu_195_p2 <= std_logic_vector(unsigned(i_assign_2_cast_fu_179_p1) + unsigned(ap_const_lv4_A));
    i_assign_2_cast4_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_assign_2_reg_85),32));
    i_assign_2_cast_fu_179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_assign_2_reg_85),4));
    i_assign_3_cast3_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_assign_3_reg_108),32));
    i_assign_4_cast_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_assign_4_fu_277_p2),32));
    i_assign_4_fu_277_p2 <= std_logic_vector(unsigned(i_assign_5_cast_fu_261_p1) + unsigned(ap_const_lv4_A));
    i_assign_5_cast2_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_assign_5_reg_130),32));
    i_assign_5_cast_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_assign_5_reg_130),4));
    i_assign_cast5_fu_141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_assign_reg_62),32));
    i_fu_151_p2 <= std_logic_vector(unsigned(i_assign_reg_62) + unsigned(ap_const_lv4_1));
    lhs_V_1_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(e1_V_reg_73),6));
    lhs_V_cast_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exact_e_V_reg_474),7));
    p_Repl2_1_fu_205_p3 <= ap_const_lv16_1(to_integer(unsigned(i_assign_1_cast_fu_201_p1)) downto to_integer(unsigned(i_assign_1_cast_fu_201_p1))) when (to_integer(unsigned(i_assign_1_cast_fu_201_p1))>= 0 and to_integer(unsigned(i_assign_1_cast_fu_201_p1))<=15) else "-";
    p_Repl2_2_fu_239_p3 <= ap_const_lv16_2(to_integer(unsigned(i_assign_3_cast3_fu_223_p1)) downto to_integer(unsigned(i_assign_3_cast3_fu_223_p1))) when (to_integer(unsigned(i_assign_3_cast3_fu_223_p1))>= 0 and to_integer(unsigned(i_assign_3_cast3_fu_223_p1))<=15) else "-";
    p_Repl2_3_fu_287_p3 <= ap_const_lv16_2(to_integer(unsigned(i_assign_4_cast_fu_283_p1)) downto to_integer(unsigned(i_assign_4_cast_fu_283_p1))) when (to_integer(unsigned(i_assign_4_cast_fu_283_p1))>= 0 and to_integer(unsigned(i_assign_4_cast_fu_283_p1))<=15) else "-";
    p_Repl2_s_fu_157_p3 <= ap_const_lv16_1(to_integer(unsigned(i_assign_cast5_fu_141_p1)) downto to_integer(unsigned(i_assign_cast5_fu_141_p1))) when (to_integer(unsigned(i_assign_cast5_fu_141_p1))>= 0 and to_integer(unsigned(i_assign_cast5_fu_141_p1))<=15) else "-";
    
    p_Result_1_fu_213_p4_proc : process(e1_V_reg_73, i_assign_2_cast4_fu_175_p1, p_Repl2_1_fu_205_p3)
    begin
        p_Result_1_fu_213_p4 <= e1_V_reg_73;
        if to_integer(unsigned(i_assign_2_cast4_fu_175_p1)) >= e1_V_reg_73'low and to_integer(unsigned(i_assign_2_cast4_fu_175_p1)) <= e1_V_reg_73'high then
            p_Result_1_fu_213_p4(to_integer(unsigned(i_assign_2_cast4_fu_175_p1))) <= p_Repl2_1_fu_205_p3(0);
        end if;
    end process;

    
    p_Result_2_fu_247_p4_proc : process(m2_V_reg_96, i_assign_3_cast3_fu_223_p1, p_Repl2_2_fu_239_p3)
    begin
        p_Result_2_fu_247_p4 <= m2_V_reg_96;
        if to_integer(unsigned(i_assign_3_cast3_fu_223_p1)) >= m2_V_reg_96'low and to_integer(unsigned(i_assign_3_cast3_fu_223_p1)) <= m2_V_reg_96'high then
            p_Result_2_fu_247_p4(to_integer(unsigned(i_assign_3_cast3_fu_223_p1))) <= p_Repl2_2_fu_239_p3(0);
        end if;
    end process;

    
    p_Result_3_fu_295_p4_proc : process(p_Val2_4_reg_119, i_assign_5_cast2_fu_257_p1, p_Repl2_3_fu_287_p3)
    begin
        p_Result_3_fu_295_p4 <= p_Val2_4_reg_119;
        if to_integer(unsigned(i_assign_5_cast2_fu_257_p1)) >= p_Val2_4_reg_119'low and to_integer(unsigned(i_assign_5_cast2_fu_257_p1)) <= p_Val2_4_reg_119'high then
            p_Result_3_fu_295_p4(to_integer(unsigned(i_assign_5_cast2_fu_257_p1))) <= p_Repl2_3_fu_287_p3(0);
        end if;
    end process;

    
    p_Result_s_fu_165_p4_proc : process(m1_V_reg_50, i_assign_cast5_fu_141_p1, p_Repl2_s_fu_157_p3)
    begin
        p_Result_s_fu_165_p4 <= m1_V_reg_50;
        if to_integer(unsigned(i_assign_cast5_fu_141_p1)) >= m1_V_reg_50'low and to_integer(unsigned(i_assign_cast5_fu_141_p1)) <= m1_V_reg_50'high then
            p_Result_s_fu_165_p4(to_integer(unsigned(i_assign_cast5_fu_141_p1))) <= p_Repl2_s_fu_157_p3(0);
        end if;
    end process;

    r_V_4_fu_336_p2 <= std_logic_vector(signed(ap_const_lv7_71) + signed(lhs_V_cast_fu_333_p1));
    r_V_fu_379_p3 <= 
        tmp_7_fu_361_p2 when (tmp_fu_348_p3(0) = '1') else 
        tmp_1_fu_375_p1;
    rhs_V_1_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_4_reg_119),6));
    tmp1_fu_321_p2 <= std_logic_vector(signed(ap_const_lv6_31) + signed(rhs_V_1_fu_317_p1));
    tmp_1_fu_375_p1 <= tmp_3_fu_369_p2(22 - 1 downto 0);
        tmp_2_cast_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_4_reg_485),32));

    tmp_3_fu_369_p2 <= std_logic_vector(shift_left(unsigned(tmp_5_fu_355_p1),to_integer(unsigned('0' & tmp_2_cast_fu_366_p1(31-1 downto 0)))));
    tmp_5_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_3_reg_479),32));
        tmp_6_cast_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_reg_491),22));

    tmp_6_fu_342_p2 <= std_logic_vector(unsigned(ap_const_lv7_F) - unsigned(lhs_V_cast_fu_333_p1));
    tmp_7_fu_361_p2 <= std_logic_vector(shift_right(unsigned(r_V_3_reg_479),to_integer(unsigned('0' & tmp_6_cast_fu_358_p1(22-1 downto 0)))));
    tmp_fu_348_p3 <= r_V_4_reg_485(6 downto 6);
end behav;
