-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity exact_dot_product is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    data_in_V_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    data_in_V_V_TVALID : IN STD_LOGIC;
    data_in_V_V_TREADY : OUT STD_LOGIC;
    data_out_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    data_out_V_V_TVALID : OUT STD_LOGIC;
    data_out_V_V_TREADY : IN STD_LOGIC );
end;


architecture behav of exact_dot_product is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "exact_dot_product,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.150000,HLS_SYN_LAT=117,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=851,HLS_SYN_LUT=1295}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv72_0 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv6_C : STD_LOGIC_VECTOR (5 downto 0) := "001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal data_in_V_V_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_V_V_0_vld_in : STD_LOGIC;
    signal data_in_V_V_0_vld_out : STD_LOGIC;
    signal data_in_V_V_0_ack_in : STD_LOGIC;
    signal data_in_V_V_0_ack_out : STD_LOGIC;
    signal data_in_V_V_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_V_V_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_V_V_0_sel_rd : STD_LOGIC := '0';
    signal data_in_V_V_0_sel_wr : STD_LOGIC := '0';
    signal data_in_V_V_0_sel : STD_LOGIC;
    signal data_in_V_V_0_load_A : STD_LOGIC;
    signal data_in_V_V_0_load_B : STD_LOGIC;
    signal data_in_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal data_in_V_V_0_state_cmp_full : STD_LOGIC;
    signal data_out_V_V_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal data_out_V_V_1_vld_in : STD_LOGIC;
    signal data_out_V_V_1_vld_out : STD_LOGIC;
    signal data_out_V_V_1_ack_in : STD_LOGIC;
    signal data_out_V_V_1_ack_out : STD_LOGIC;
    signal data_out_V_V_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal data_out_V_V_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal data_out_V_V_1_sel_rd : STD_LOGIC := '0';
    signal data_out_V_V_1_sel_wr : STD_LOGIC := '0';
    signal data_out_V_V_1_sel : STD_LOGIC;
    signal data_out_V_V_1_load_A : STD_LOGIC;
    signal data_out_V_V_1_load_B : STD_LOGIC;
    signal data_out_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal data_out_V_V_1_state_cmp_full : STD_LOGIC;
    signal data_in_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_reg_209 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_out_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal CompleteRegister_m_c_reg_87 : STD_LOGIC_VECTOR (71 downto 0);
    signal i_reg_99 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond_fu_117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_reg_209 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_123_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_V_2_reg_218 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_cast_fu_153_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_cast_reg_223 : STD_LOGIC_VECTOR (21 downto 0);
    signal agg_result_V_assign_s_fu_157_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal agg_result_V_assign_s_reg_228 : STD_LOGIC_VECTOR (21 downto 0);
    signal op2_assign_fu_167_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal op2_assign_reg_233 : STD_LOGIC_VECTOR (5 downto 0);
    signal cr_m_cr_V_fu_203_p2 : STD_LOGIC_VECTOR (71 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal grp_get_result_fu_110_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_get_result_fu_110_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal grp_get_result_fu_110_ap_start : STD_LOGIC;
    signal grp_get_result_fu_110_ap_idle : STD_LOGIC;
    signal grp_get_result_fu_110_ap_ready : STD_LOGIC;
    signal ap_reg_grp_get_result_fu_110_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_24_fu_129_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_fu_143_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal e2_V_fu_133_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_i_cast_fu_163_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sign_fu_173_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_fu_180_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shifted_V_cast_fu_186_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_i_cast_9_fu_190_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal r_V_1_fu_193_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal r_V_2_cast_fu_199_p1 : STD_LOGIC_VECTOR (71 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component get_result IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        CompleteRegister_m_cr_V_read : IN STD_LOGIC_VECTOR (71 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    grp_get_result_fu_110 : component get_result
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_get_result_fu_110_ap_start,
        ap_done => grp_get_result_fu_110_ap_done,
        ap_idle => grp_get_result_fu_110_ap_idle,
        ap_ready => grp_get_result_fu_110_ap_ready,
        CompleteRegister_m_cr_V_read => CompleteRegister_m_c_reg_87,
        ap_return => grp_get_result_fu_110_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_get_result_fu_110_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_get_result_fu_110_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_reg_grp_get_result_fu_110_ap_start <= ap_const_logic_1;
                elsif ((grp_get_result_fu_110_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_get_result_fu_110_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    data_in_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_in_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((data_in_V_V_0_ack_out = ap_const_logic_1) and (data_in_V_V_0_vld_out = ap_const_logic_1))) then 
                                        data_in_V_V_0_sel_rd <= not(data_in_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    data_in_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_in_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((data_in_V_V_0_ack_in = ap_const_logic_1) and (data_in_V_V_0_vld_in = ap_const_logic_1))) then 
                                        data_in_V_V_0_sel_wr <= not(data_in_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    data_in_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_in_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((data_in_V_V_0_state = ap_const_lv2_2) and (data_in_V_V_0_vld_in = ap_const_logic_0)) or ((data_in_V_V_0_state = ap_const_lv2_3) and (data_in_V_V_0_vld_in = ap_const_logic_0) and (data_in_V_V_0_ack_out = ap_const_logic_1)))) then 
                    data_in_V_V_0_state <= ap_const_lv2_2;
                elsif ((((data_in_V_V_0_state = ap_const_lv2_1) and (data_in_V_V_0_ack_out = ap_const_logic_0)) or ((data_in_V_V_0_state = ap_const_lv2_3) and (data_in_V_V_0_ack_out = ap_const_logic_0) and (data_in_V_V_0_vld_in = ap_const_logic_1)))) then 
                    data_in_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((data_in_V_V_0_vld_in = ap_const_logic_0) and (data_in_V_V_0_ack_out = ap_const_logic_1))) and not(((data_in_V_V_0_ack_out = ap_const_logic_0) and (data_in_V_V_0_vld_in = ap_const_logic_1))) and (data_in_V_V_0_state = ap_const_lv2_3)) or ((data_in_V_V_0_state = ap_const_lv2_1) and (data_in_V_V_0_ack_out = ap_const_logic_1)) or ((data_in_V_V_0_state = ap_const_lv2_2) and (data_in_V_V_0_vld_in = ap_const_logic_1)))) then 
                    data_in_V_V_0_state <= ap_const_lv2_3;
                else 
                    data_in_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    data_out_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_out_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((data_out_V_V_1_ack_out = ap_const_logic_1) and (data_out_V_V_1_vld_out = ap_const_logic_1))) then 
                                        data_out_V_V_1_sel_rd <= not(data_out_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    data_out_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_out_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((data_out_V_V_1_ack_in = ap_const_logic_1) and (data_out_V_V_1_vld_in = ap_const_logic_1))) then 
                                        data_out_V_V_1_sel_wr <= not(data_out_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    data_out_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_out_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((data_out_V_V_1_state = ap_const_lv2_2) and (data_out_V_V_1_vld_in = ap_const_logic_0)) or ((data_out_V_V_1_state = ap_const_lv2_3) and (data_out_V_V_1_vld_in = ap_const_logic_0) and (data_out_V_V_1_ack_out = ap_const_logic_1)))) then 
                    data_out_V_V_1_state <= ap_const_lv2_2;
                elsif ((((data_out_V_V_1_state = ap_const_lv2_1) and (data_out_V_V_1_ack_out = ap_const_logic_0)) or ((data_out_V_V_1_state = ap_const_lv2_3) and (data_out_V_V_1_ack_out = ap_const_logic_0) and (data_out_V_V_1_vld_in = ap_const_logic_1)))) then 
                    data_out_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((data_out_V_V_1_vld_in = ap_const_logic_0) and (data_out_V_V_1_ack_out = ap_const_logic_1))) and not(((data_out_V_V_1_ack_out = ap_const_logic_0) and (data_out_V_V_1_vld_in = ap_const_logic_1))) and (data_out_V_V_1_state = ap_const_lv2_3)) or ((data_out_V_V_1_state = ap_const_lv2_1) and (data_out_V_V_1_ack_out = ap_const_logic_1)) or ((data_out_V_V_1_state = ap_const_lv2_2) and (data_out_V_V_1_vld_in = ap_const_logic_1)))) then 
                    data_out_V_V_1_state <= ap_const_lv2_3;
                else 
                    data_out_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    CompleteRegister_m_c_reg_87_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter1_exitcond_reg_209 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                CompleteRegister_m_c_reg_87 <= cr_m_cr_V_fu_203_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                CompleteRegister_m_c_reg_87 <= ap_const_lv72_0;
            end if; 
        end if;
    end process;

    i_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_117_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_99 <= i_1_fu_123_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                i_reg_99 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_209 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    agg_result_V_assign_s_reg_228(21 downto 10) <= agg_result_V_assign_s_fu_157_p2(21 downto 10);
                op2_assign_reg_233 <= op2_assign_fu_167_p2;
                    r_V_cast_reg_223(19 downto 10) <= r_V_cast_fu_153_p1(19 downto 10);
                tmp_V_2_reg_218 <= data_in_V_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_reg_pp0_iter1_exitcond_reg_209 <= exitcond_reg_209;
                exitcond_reg_209 <= exitcond_fu_117_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((data_in_V_V_0_load_A = ap_const_logic_1)) then
                data_in_V_V_0_payload_A <= data_in_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((data_in_V_V_0_load_B = ap_const_logic_1)) then
                data_in_V_V_0_payload_B <= data_in_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((data_out_V_V_1_load_A = ap_const_logic_1)) then
                data_out_V_V_1_payload_A <= grp_get_result_fu_110_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((data_out_V_V_1_load_B = ap_const_logic_1)) then
                data_out_V_V_1_payload_B <= grp_get_result_fu_110_ap_return;
            end if;
        end if;
    end process;
    r_V_cast_reg_223(9 downto 0) <= "0000000000";
    r_V_cast_reg_223(21 downto 20) <= "01";
    agg_result_V_assign_s_reg_228(9 downto 0) <= "0000000000";

    ap_NS_fsm_assign_proc : process (data_out_V_V_1_ack_in, ap_CS_fsm, ap_enable_reg_pp0_iter1, ap_CS_fsm_state6, ap_CS_fsm_state7, exitcond_fu_117_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, grp_get_result_fu_110_ap_done, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_fu_117_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((exitcond_fu_117_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if ((not(((data_out_V_V_1_ack_in = ap_const_logic_0) or (grp_get_result_fu_110_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((data_out_V_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    agg_result_V_assign_s_fu_157_p2 <= std_logic_vector(unsigned(ap_const_lv22_0) - unsigned(r_V_cast_fu_153_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(data_in_V_V_0_vld_out, ap_enable_reg_pp0_iter1, exitcond_reg_209)
    begin
                ap_block_pp0_stage0_11001 <= ((exitcond_reg_209 = ap_const_lv1_0) and (data_in_V_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(data_in_V_V_0_vld_out, ap_enable_reg_pp0_iter1, exitcond_reg_209)
    begin
                ap_block_pp0_stage0_subdone <= ((exitcond_reg_209 = ap_const_lv1_0) and (data_in_V_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(data_in_V_V_0_vld_out, exitcond_reg_209)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((exitcond_reg_209 = ap_const_lv1_0) and (data_in_V_V_0_vld_out = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_fu_117_p2)
    begin
        if ((exitcond_fu_117_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    cr_m_cr_V_fu_203_p2 <= std_logic_vector(unsigned(CompleteRegister_m_c_reg_87) + unsigned(r_V_2_cast_fu_199_p1));
    data_in_V_V_0_ack_in <= data_in_V_V_0_state(1);

    data_in_V_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_209, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_reg_209 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_in_V_V_0_ack_out <= ap_const_logic_1;
        else 
            data_in_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    data_in_V_V_0_data_out_assign_proc : process(data_in_V_V_0_payload_A, data_in_V_V_0_payload_B, data_in_V_V_0_sel)
    begin
        if ((data_in_V_V_0_sel = ap_const_logic_1)) then 
            data_in_V_V_0_data_out <= data_in_V_V_0_payload_B;
        else 
            data_in_V_V_0_data_out <= data_in_V_V_0_payload_A;
        end if; 
    end process;

    data_in_V_V_0_load_A <= (not(data_in_V_V_0_sel_wr) and data_in_V_V_0_state_cmp_full);
    data_in_V_V_0_load_B <= (data_in_V_V_0_state_cmp_full and data_in_V_V_0_sel_wr);
    data_in_V_V_0_sel <= data_in_V_V_0_sel_rd;
    data_in_V_V_0_state_cmp_full <= '0' when (data_in_V_V_0_state = ap_const_lv2_1) else '1';
    data_in_V_V_0_vld_in <= data_in_V_V_TVALID;
    data_in_V_V_0_vld_out <= data_in_V_V_0_state(0);

    data_in_V_V_TDATA_blk_n_assign_proc : process(data_in_V_V_0_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_209)
    begin
        if (((exitcond_reg_209 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_in_V_V_TDATA_blk_n <= data_in_V_V_0_state(0);
        else 
            data_in_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_in_V_V_TREADY <= data_in_V_V_0_state(1);
    data_out_V_V_1_ack_in <= data_out_V_V_1_state(1);
    data_out_V_V_1_ack_out <= data_out_V_V_TREADY;

    data_out_V_V_1_data_out_assign_proc : process(data_out_V_V_1_payload_A, data_out_V_V_1_payload_B, data_out_V_V_1_sel)
    begin
        if ((data_out_V_V_1_sel = ap_const_logic_1)) then 
            data_out_V_V_1_data_out <= data_out_V_V_1_payload_B;
        else 
            data_out_V_V_1_data_out <= data_out_V_V_1_payload_A;
        end if; 
    end process;

    data_out_V_V_1_load_A <= (not(data_out_V_V_1_sel_wr) and data_out_V_V_1_state_cmp_full);
    data_out_V_V_1_load_B <= (data_out_V_V_1_state_cmp_full and data_out_V_V_1_sel_wr);
    data_out_V_V_1_sel <= data_out_V_V_1_sel_rd;
    data_out_V_V_1_state_cmp_full <= '0' when (data_out_V_V_1_state = ap_const_lv2_1) else '1';

    data_out_V_V_1_vld_in_assign_proc : process(data_out_V_V_1_ack_in, ap_CS_fsm_state6, grp_get_result_fu_110_ap_done)
    begin
        if ((not(((data_out_V_V_1_ack_in = ap_const_logic_0) or (grp_get_result_fu_110_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            data_out_V_V_1_vld_in <= ap_const_logic_1;
        else 
            data_out_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    data_out_V_V_1_vld_out <= data_out_V_V_1_state(0);
    data_out_V_V_TDATA <= data_out_V_V_1_data_out;

    data_out_V_V_TDATA_blk_n_assign_proc : process(data_out_V_V_1_state, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            data_out_V_V_TDATA_blk_n <= data_out_V_V_1_state(1);
        else 
            data_out_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_out_V_V_TVALID <= data_out_V_V_1_state(0);
    e2_V_fu_133_p4 <= data_in_V_V_0_data_out(14 downto 10);
    exitcond_fu_117_p2 <= "1" when (i_reg_99 = ap_const_lv7_64) else "0";
    grp_get_result_fu_110_ap_start <= ap_reg_grp_get_result_fu_110_ap_start;
    i_1_fu_123_p2 <= std_logic_vector(unsigned(i_reg_99) + unsigned(ap_const_lv7_1));
    op2_assign_fu_167_p2 <= std_logic_vector(unsigned(ap_const_lv6_C) + unsigned(tmp_i_cast_fu_163_p1));
    r_V_1_fu_193_p2 <= std_logic_vector(shift_left(unsigned(shifted_V_cast_fu_186_p1),to_integer(unsigned('0' & tmp_i_cast_9_fu_190_p1(31-1 downto 0)))));
        r_V_2_cast_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_1_fu_193_p2),72));

    r_V_cast_fu_153_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_143_p4),22));
    r_V_fu_143_p4 <= ((ap_const_lv1_1 & tmp_24_fu_129_p1) & ap_const_lv10_0);
    result_V_fu_180_p3 <= 
        agg_result_V_assign_s_reg_228 when (sign_fu_173_p3(0) = '1') else 
        r_V_cast_reg_223;
        shifted_V_cast_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(result_V_fu_180_p3),65));

    sign_fu_173_p3 <= tmp_V_2_reg_218(15 downto 15);
    tmp_24_fu_129_p1 <= data_in_V_V_0_data_out(10 - 1 downto 0);
    tmp_i_cast_9_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_reg_233),65));
    tmp_i_cast_fu_163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(e2_V_fu_133_p4),6));
end behav;
