-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity multiply_accumulate is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    CompleteRegister_m_cr_V_read : IN STD_LOGIC_VECTOR (127 downto 0);
    in1_V : IN STD_LOGIC_VECTOR (15 downto 0);
    in2_V : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (127 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of multiply_accumulate is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv7_C : STD_LOGIC_VECTOR (6 downto 0) := "0001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";

    signal in2_V_read_reg_183 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_reg_pp0_iter1_in2_V_read_reg_183 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter2_in2_V_read_reg_183 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter3_in2_V_read_reg_183 : STD_LOGIC_VECTOR (15 downto 0);
    signal in1_V_read_reg_188 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter1_in1_V_read_reg_188 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter2_in1_V_read_reg_188 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter3_in1_V_read_reg_188 : STD_LOGIC_VECTOR (15 downto 0);
    signal CompleteRegister_m_c_1_reg_193 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_reg_pp0_iter1_CompleteRegister_m_c_1_reg_193 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_reg_pp0_iter2_CompleteRegister_m_c_1_reg_193 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_reg_pp0_iter3_CompleteRegister_m_c_1_reg_193 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_reg_pp0_iter4_CompleteRegister_m_c_1_reg_193 : STD_LOGIC_VECTOR (127 downto 0);
    signal r_V_1_fu_106_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_1_reg_208 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_pp0_iter1_r_V_1_reg_208 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_pp0_iter2_r_V_1_reg_208 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_177_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_reg_213 : STD_LOGIC_VECTOR (21 downto 0);
    signal result_V_fu_112_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal result_V_reg_218 : STD_LOGIC_VECTOR (22 downto 0);
    signal agg_result_V_assign_s_fu_115_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal agg_result_V_assign_s_reg_223 : STD_LOGIC_VECTOR (22 downto 0);
    signal op2_assign_fu_124_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal op2_assign_reg_228 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_2_fu_163_p2 : STD_LOGIC_VECTOR (96 downto 0);
    signal r_V_2_reg_233 : STD_LOGIC_VECTOR (96 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_fu_46_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_31_fu_68_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Result_s_fu_50_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_1_fu_72_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal e1_V_fu_58_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal e2_V_fu_80_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal lhs_V_1_fu_98_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal rhs_V_1_fu_102_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_fu_121_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sign_fu_130_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sign_1_fu_137_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal exact_s_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_2_fu_150_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal shifted_V_cast_fu_156_p1 : STD_LOGIC_VECTOR (96 downto 0);
    signal tmp_cast_21_fu_160_p1 : STD_LOGIC_VECTOR (96 downto 0);
    signal grp_fu_172_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_177_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_177_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_172_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_172_ce : STD_LOGIC;
    signal grp_fu_177_ce : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;
    signal CompleteRegister_m_cr_V_read_int_reg : STD_LOGIC_VECTOR (127 downto 0);
    signal in1_V_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in2_V_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_int_reg : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_177_p00 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_177_p10 : STD_LOGIC_VECTOR (21 downto 0);

    component neural_network_adbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (127 downto 0);
        din1 : IN STD_LOGIC_VECTOR (127 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component neural_network_mucud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;



begin
    neural_network_adbkb_U1 : component neural_network_adbkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 128,
        din1_WIDTH => 128,
        dout_WIDTH => 128)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_reg_pp0_iter4_CompleteRegister_m_c_1_reg_193,
        din1 => grp_fu_172_p1,
        ce => grp_fu_172_ce,
        dout => grp_fu_172_p2);

    neural_network_mucud_U2 : component neural_network_mucud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_177_p0,
        din1 => grp_fu_177_p1,
        ce => grp_fu_177_ce,
        dout => grp_fu_177_p2);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                CompleteRegister_m_c_1_reg_193 <= CompleteRegister_m_cr_V_read_int_reg;
                agg_result_V_assign_s_reg_223 <= agg_result_V_assign_s_fu_115_p2;
                ap_reg_pp0_iter1_CompleteRegister_m_c_1_reg_193 <= CompleteRegister_m_c_1_reg_193;
                ap_reg_pp0_iter1_in1_V_read_reg_188 <= in1_V_read_reg_188;
                ap_reg_pp0_iter1_in2_V_read_reg_183 <= in2_V_read_reg_183;
                ap_reg_pp0_iter1_r_V_1_reg_208 <= r_V_1_reg_208;
                ap_reg_pp0_iter2_CompleteRegister_m_c_1_reg_193 <= ap_reg_pp0_iter1_CompleteRegister_m_c_1_reg_193;
                ap_reg_pp0_iter2_in1_V_read_reg_188 <= ap_reg_pp0_iter1_in1_V_read_reg_188;
                ap_reg_pp0_iter2_in2_V_read_reg_183 <= ap_reg_pp0_iter1_in2_V_read_reg_183;
                ap_reg_pp0_iter2_r_V_1_reg_208 <= ap_reg_pp0_iter1_r_V_1_reg_208;
                ap_reg_pp0_iter3_CompleteRegister_m_c_1_reg_193 <= ap_reg_pp0_iter2_CompleteRegister_m_c_1_reg_193;
                ap_reg_pp0_iter3_in1_V_read_reg_188 <= ap_reg_pp0_iter2_in1_V_read_reg_188;
                ap_reg_pp0_iter3_in2_V_read_reg_183 <= ap_reg_pp0_iter2_in2_V_read_reg_183;
                ap_reg_pp0_iter4_CompleteRegister_m_c_1_reg_193 <= ap_reg_pp0_iter3_CompleteRegister_m_c_1_reg_193;
                in1_V_read_reg_188 <= in1_V_int_reg;
                in2_V_read_reg_183 <= in2_V_int_reg;
                op2_assign_reg_228 <= op2_assign_fu_124_p2;
                r_V_1_reg_208 <= r_V_1_fu_106_p2;
                r_V_2_reg_233 <= r_V_2_fu_163_p2;
                r_V_reg_213 <= grp_fu_177_p2;
                    result_V_reg_218(21 downto 0) <= result_V_fu_112_p1(21 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                CompleteRegister_m_cr_V_read_int_reg <= CompleteRegister_m_cr_V_read;
                in1_V_int_reg <= in1_V;
                in2_V_int_reg <= in2_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= grp_fu_172_p2;
            end if;
        end if;
    end process;
    result_V_reg_218(22) <= '0';
    agg_result_V_assign_s_fu_115_p2 <= std_logic_vector(unsigned(ap_const_lv23_0) - unsigned(result_V_fu_112_p1));
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(grp_fu_172_p2, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= grp_fu_172_p2;
        end if; 
    end process;

    e1_V_fu_58_p4 <= in1_V_int_reg(14 downto 10);
    e2_V_fu_80_p4 <= in2_V_int_reg(14 downto 10);
    exact_s_fu_144_p2 <= (sign_fu_130_p3 xor sign_1_fu_137_p3);

    grp_fu_172_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_172_ce <= ap_const_logic_1;
        else 
            grp_fu_172_ce <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_172_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_2_reg_233),128));


    grp_fu_177_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_177_ce <= ap_const_logic_1;
        else 
            grp_fu_177_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_177_p0 <= grp_fu_177_p00(11 - 1 downto 0);
    grp_fu_177_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_50_p3),22));
    grp_fu_177_p1 <= grp_fu_177_p10(11 - 1 downto 0);
    grp_fu_177_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_1_fu_72_p3),22));
    lhs_V_1_fu_98_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(e1_V_fu_58_p4),6));
    op2_assign_fu_124_p2 <= std_logic_vector(unsigned(ap_const_lv7_C) + unsigned(tmp_cast_fu_121_p1));
    p_Result_1_fu_72_p3 <= (ap_const_lv1_1 & tmp_31_fu_68_p1);
    p_Result_s_fu_50_p3 <= (ap_const_lv1_1 & tmp_fu_46_p1);
    r_V_1_fu_106_p2 <= std_logic_vector(unsigned(lhs_V_1_fu_98_p1) + unsigned(rhs_V_1_fu_102_p1));
    r_V_2_fu_163_p2 <= std_logic_vector(shift_left(unsigned(shifted_V_cast_fu_156_p1),to_integer(unsigned('0' & tmp_cast_21_fu_160_p1(31-1 downto 0)))));
    result_V_2_fu_150_p3 <= 
        agg_result_V_assign_s_reg_223 when (exact_s_fu_144_p2(0) = '1') else 
        result_V_reg_218;
    result_V_fu_112_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_reg_213),23));
    rhs_V_1_fu_102_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(e2_V_fu_80_p4),6));
        shifted_V_cast_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(result_V_2_fu_150_p3),97));

    sign_1_fu_137_p3 <= ap_reg_pp0_iter3_in2_V_read_reg_183(15 downto 15);
    sign_fu_130_p3 <= ap_reg_pp0_iter3_in1_V_read_reg_188(15 downto 15);
    tmp_31_fu_68_p1 <= in2_V_int_reg(10 - 1 downto 0);
    tmp_cast_21_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_reg_228),97));
    tmp_cast_fu_121_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter2_r_V_1_reg_208),7));
    tmp_fu_46_p1 <= in1_V_int_reg(10 - 1 downto 0);
end behav;
