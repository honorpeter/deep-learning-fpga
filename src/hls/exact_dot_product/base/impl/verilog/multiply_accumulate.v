// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module multiply_accumulate (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cr_m_cr_V_i,
        cr_m_cr_V_o,
        cr_m_cr_V_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;
parameter    ap_const_lv16_1 = 16'd1;

parameter    ap_const_lv16_2 = 16'd2;


input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [511:0] cr_m_cr_V_i;
output  [511:0] cr_m_cr_V_o;
output   cr_m_cr_V_o_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[511:0] cr_m_cr_V_o;
reg cr_m_cr_V_o_ap_vld;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] i_fu_151_p2;
wire    ap_CS_fsm_state2;
reg   [10:0] p_Result_s_fu_165_p4;
wire   [0:0] exitcond_i_fu_145_p2;
wire   [2:0] i_1_fu_189_p2;
wire    ap_CS_fsm_state3;
reg   [4:0] p_Result_1_fu_213_p4;
wire   [0:0] exitcond_i2_fu_183_p2;
wire   [3:0] i_2_fu_233_p2;
wire    ap_CS_fsm_state4;
reg   [10:0] p_Result_2_fu_247_p4;
wire   [0:0] exitcond_i1_fu_227_p2;
wire   [2:0] i_3_fu_271_p2;
wire    ap_CS_fsm_state5;
reg   [4:0] p_Result_3_fu_295_p4;
wire   [0:0] exitcond_i3_fu_265_p2;
wire   [5:0] exact_e_V_fu_327_p2;
reg   [5:0] exact_e_V_reg_474;
wire   [21:0] grp_fu_406_p2;
reg   [21:0] r_V_3_reg_479;
wire    ap_CS_fsm_state7;
wire   [6:0] r_V_4_fu_336_p2;
reg   [6:0] r_V_4_reg_485;
wire   [6:0] tmp_6_fu_342_p2;
reg   [6:0] tmp_6_reg_491;
wire   [21:0] r_V_fu_379_p3;
reg   [21:0] r_V_reg_496;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
reg   [10:0] m1_V_reg_50;
reg   [3:0] i_assign_reg_62;
reg   [4:0] e1_V_reg_73;
reg   [2:0] i_assign_2_reg_85;
reg   [10:0] m2_V_reg_96;
reg   [3:0] i_assign_3_reg_108;
reg   [4:0] p_Val2_4_reg_119;
reg   [2:0] i_assign_5_reg_130;
wire   [511:0] grp_fu_394_p2;
wire    ap_CS_fsm_state10;
wire   [31:0] i_assign_cast5_fu_141_p1;
wire   [0:0] p_Repl2_s_fu_157_p3;
wire   [3:0] i_assign_2_cast_fu_179_p1;
wire   [3:0] i_assign_1_fu_195_p2;
wire   [31:0] i_assign_1_cast_fu_201_p1;
wire   [31:0] i_assign_2_cast4_fu_175_p1;
wire   [0:0] p_Repl2_1_fu_205_p3;
wire   [31:0] i_assign_3_cast3_fu_223_p1;
wire   [0:0] p_Repl2_2_fu_239_p3;
wire   [3:0] i_assign_5_cast_fu_261_p1;
wire   [3:0] i_assign_4_fu_277_p2;
wire   [31:0] i_assign_4_cast_fu_283_p1;
wire   [31:0] i_assign_5_cast2_fu_257_p1;
wire   [0:0] p_Repl2_3_fu_287_p3;
wire   [5:0] rhs_V_1_fu_317_p1;
wire   [5:0] tmp1_fu_321_p2;
wire   [5:0] lhs_V_1_fu_313_p1;
wire   [6:0] lhs_V_cast_fu_333_p1;
wire  signed [21:0] tmp_6_cast_fu_358_p1;
wire   [31:0] tmp_5_fu_355_p1;
wire  signed [31:0] tmp_2_cast_fu_366_p1;
wire   [31:0] tmp_3_fu_369_p2;
wire   [0:0] tmp_fu_348_p3;
wire   [21:0] tmp_7_fu_361_p2;
wire   [21:0] tmp_1_fu_375_p1;
wire   [511:0] grp_fu_394_p1;
wire   [10:0] grp_fu_406_p0;
wire   [10:0] grp_fu_406_p1;
reg   [9:0] ap_NS_fsm;
wire   [21:0] grp_fu_406_p00;
wire   [21:0] grp_fu_406_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

neural_network_adbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 512 ),
    .din1_WIDTH( 512 ),
    .dout_WIDTH( 512 ))
neural_network_adbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(cr_m_cr_V_i),
    .din1(grp_fu_394_p1),
    .ce(1'b1),
    .dout(grp_fu_394_p2)
);

neural_network_mucud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 22 ))
neural_network_mucud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_406_p0),
    .din1(grp_fu_406_p1),
    .ce(1'b1),
    .dout(grp_fu_406_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_145_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        e1_V_reg_73 <= 5'd0;
    end else if (((exitcond_i2_fu_183_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        e1_V_reg_73 <= p_Result_1_fu_213_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_145_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_assign_2_reg_85 <= 3'd0;
    end else if (((exitcond_i2_fu_183_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_assign_2_reg_85 <= i_1_fu_189_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i2_fu_183_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_assign_3_reg_108 <= 4'd0;
    end else if (((exitcond_i1_fu_227_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_assign_3_reg_108 <= i_2_fu_233_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i1_fu_227_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_assign_5_reg_130 <= 3'd0;
    end else if (((exitcond_i3_fu_265_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i_assign_5_reg_130 <= i_3_fu_271_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_145_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_assign_reg_62 <= i_fu_151_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_assign_reg_62 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_145_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        m1_V_reg_50 <= p_Result_s_fu_165_p4;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        m1_V_reg_50 <= 11'd1024;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i2_fu_183_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        m2_V_reg_96 <= 11'd1024;
    end else if (((exitcond_i1_fu_227_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        m2_V_reg_96 <= p_Result_2_fu_247_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i1_fu_227_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        p_Val2_4_reg_119 <= 5'd0;
    end else if (((exitcond_i3_fu_265_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        p_Val2_4_reg_119 <= p_Result_3_fu_295_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i3_fu_265_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        exact_e_V_reg_474 <= exact_e_V_fu_327_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        r_V_3_reg_479 <= grp_fu_406_p2;
        r_V_4_reg_485 <= r_V_4_fu_336_p2;
        tmp_6_reg_491 <= tmp_6_fu_342_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        r_V_reg_496 <= r_V_fu_379_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        cr_m_cr_V_o = grp_fu_394_p2;
    end else begin
        cr_m_cr_V_o = cr_m_cr_V_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        cr_m_cr_V_o_ap_vld = 1'b1;
    end else begin
        cr_m_cr_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_i_fu_145_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond_i2_fu_183_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond_i1_fu_227_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond_i3_fu_265_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exact_e_V_fu_327_p2 = (tmp1_fu_321_p2 + lhs_V_1_fu_313_p1);

assign exitcond_i1_fu_227_p2 = ((i_assign_3_reg_108 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond_i2_fu_183_p2 = ((i_assign_2_reg_85 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond_i3_fu_265_p2 = ((i_assign_5_reg_130 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond_i_fu_145_p2 = ((i_assign_reg_62 == 4'd10) ? 1'b1 : 1'b0);

assign grp_fu_394_p1 = r_V_reg_496;

assign grp_fu_406_p0 = grp_fu_406_p00;

assign grp_fu_406_p00 = m2_V_reg_96;

assign grp_fu_406_p1 = grp_fu_406_p10;

assign grp_fu_406_p10 = m1_V_reg_50;

assign i_1_fu_189_p2 = (i_assign_2_reg_85 + 3'd1);

assign i_2_fu_233_p2 = (i_assign_3_reg_108 + 4'd1);

assign i_3_fu_271_p2 = (i_assign_5_reg_130 + 3'd1);

assign i_assign_1_cast_fu_201_p1 = i_assign_1_fu_195_p2;

assign i_assign_1_fu_195_p2 = ($signed(i_assign_2_cast_fu_179_p1) + $signed(4'd10));

assign i_assign_2_cast4_fu_175_p1 = i_assign_2_reg_85;

assign i_assign_2_cast_fu_179_p1 = i_assign_2_reg_85;

assign i_assign_3_cast3_fu_223_p1 = i_assign_3_reg_108;

assign i_assign_4_cast_fu_283_p1 = i_assign_4_fu_277_p2;

assign i_assign_4_fu_277_p2 = ($signed(i_assign_5_cast_fu_261_p1) + $signed(4'd10));

assign i_assign_5_cast2_fu_257_p1 = i_assign_5_reg_130;

assign i_assign_5_cast_fu_261_p1 = i_assign_5_reg_130;

assign i_assign_cast5_fu_141_p1 = i_assign_reg_62;

assign i_fu_151_p2 = (i_assign_reg_62 + 4'd1);

assign lhs_V_1_fu_313_p1 = e1_V_reg_73;

assign lhs_V_cast_fu_333_p1 = exact_e_V_reg_474;

assign p_Repl2_1_fu_205_p3 = ap_const_lv16_1[i_assign_1_cast_fu_201_p1];

assign p_Repl2_2_fu_239_p3 = ap_const_lv16_2[i_assign_3_cast3_fu_223_p1];

assign p_Repl2_3_fu_287_p3 = ap_const_lv16_2[i_assign_4_cast_fu_283_p1];

assign p_Repl2_s_fu_157_p3 = ap_const_lv16_1[i_assign_cast5_fu_141_p1];

always @ (*) begin
    p_Result_1_fu_213_p4 = e1_V_reg_73;
    p_Result_1_fu_213_p4[i_assign_2_cast4_fu_175_p1] = |(p_Repl2_1_fu_205_p3);
end

always @ (*) begin
    p_Result_2_fu_247_p4 = m2_V_reg_96;
    p_Result_2_fu_247_p4[i_assign_3_cast3_fu_223_p1] = |(p_Repl2_2_fu_239_p3);
end

always @ (*) begin
    p_Result_3_fu_295_p4 = p_Val2_4_reg_119;
    p_Result_3_fu_295_p4[i_assign_5_cast2_fu_257_p1] = |(p_Repl2_3_fu_287_p3);
end

always @ (*) begin
    p_Result_s_fu_165_p4 = m1_V_reg_50;
    p_Result_s_fu_165_p4[i_assign_cast5_fu_141_p1] = |(p_Repl2_s_fu_157_p3);
end

assign r_V_4_fu_336_p2 = ($signed(7'd113) + $signed(lhs_V_cast_fu_333_p1));

assign r_V_fu_379_p3 = ((tmp_fu_348_p3[0:0] === 1'b1) ? tmp_7_fu_361_p2 : tmp_1_fu_375_p1);

assign rhs_V_1_fu_317_p1 = p_Val2_4_reg_119;

assign tmp1_fu_321_p2 = ($signed(6'd49) + $signed(rhs_V_1_fu_317_p1));

assign tmp_1_fu_375_p1 = tmp_3_fu_369_p2[21:0];

assign tmp_2_cast_fu_366_p1 = $signed(r_V_4_reg_485);

assign tmp_3_fu_369_p2 = tmp_5_fu_355_p1 << tmp_2_cast_fu_366_p1;

assign tmp_5_fu_355_p1 = r_V_3_reg_479;

assign tmp_6_cast_fu_358_p1 = $signed(tmp_6_reg_491);

assign tmp_6_fu_342_p2 = (7'd15 - lhs_V_cast_fu_333_p1);

assign tmp_7_fu_361_p2 = r_V_3_reg_479 >> tmp_6_cast_fu_358_p1;

assign tmp_fu_348_p3 = r_V_4_reg_485[32'd6];

endmodule //multiply_accumulate
