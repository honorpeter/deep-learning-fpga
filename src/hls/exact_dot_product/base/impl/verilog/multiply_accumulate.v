// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module multiply_accumulate (
        ap_clk,
        ap_rst,
        CompleteRegister_m_cr_V_read,
        in1_V,
        in2_V,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [127:0] CompleteRegister_m_cr_V_read;
input  [15:0] in1_V;
input  [15:0] in2_V;
output  [127:0] ap_return;
input   ap_ce;

reg[127:0] ap_return;

reg   [15:0] in2_V_read_reg_183;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_pp0_stage0_11001;
reg   [15:0] ap_reg_pp0_iter1_in2_V_read_reg_183;
reg   [15:0] ap_reg_pp0_iter2_in2_V_read_reg_183;
reg   [15:0] ap_reg_pp0_iter3_in2_V_read_reg_183;
reg   [15:0] in1_V_read_reg_188;
reg   [15:0] ap_reg_pp0_iter1_in1_V_read_reg_188;
reg   [15:0] ap_reg_pp0_iter2_in1_V_read_reg_188;
reg   [15:0] ap_reg_pp0_iter3_in1_V_read_reg_188;
reg   [127:0] CompleteRegister_m_c_1_reg_193;
reg   [127:0] ap_reg_pp0_iter1_CompleteRegister_m_c_1_reg_193;
reg   [127:0] ap_reg_pp0_iter2_CompleteRegister_m_c_1_reg_193;
reg   [127:0] ap_reg_pp0_iter3_CompleteRegister_m_c_1_reg_193;
reg   [127:0] ap_reg_pp0_iter4_CompleteRegister_m_c_1_reg_193;
wire   [5:0] r_V_1_fu_106_p2;
reg   [5:0] r_V_1_reg_208;
reg   [5:0] ap_reg_pp0_iter1_r_V_1_reg_208;
reg   [5:0] ap_reg_pp0_iter2_r_V_1_reg_208;
wire   [21:0] grp_fu_177_p2;
reg   [21:0] r_V_reg_213;
wire   [22:0] result_V_fu_112_p1;
reg   [22:0] result_V_reg_218;
wire   [22:0] agg_result_V_assign_s_fu_115_p2;
reg   [22:0] agg_result_V_assign_s_reg_223;
wire   [6:0] op2_assign_fu_124_p2;
reg   [6:0] op2_assign_reg_228;
wire   [96:0] r_V_2_fu_163_p2;
reg   [96:0] r_V_2_reg_233;
wire    ap_block_pp0_stage0;
wire   [9:0] tmp_fu_46_p1;
wire   [9:0] tmp_31_fu_68_p1;
wire   [10:0] p_Result_s_fu_50_p3;
wire   [10:0] p_Result_1_fu_72_p3;
wire   [4:0] e1_V_fu_58_p4;
wire   [4:0] e2_V_fu_80_p4;
wire   [5:0] lhs_V_1_fu_98_p1;
wire   [5:0] rhs_V_1_fu_102_p1;
wire   [6:0] tmp_cast_fu_121_p1;
wire   [0:0] sign_fu_130_p3;
wire   [0:0] sign_1_fu_137_p3;
wire   [0:0] exact_s_fu_144_p2;
wire   [22:0] result_V_2_fu_150_p3;
wire  signed [96:0] shifted_V_cast_fu_156_p1;
wire   [96:0] tmp_cast_21_fu_160_p1;
wire  signed [127:0] grp_fu_172_p1;
wire   [10:0] grp_fu_177_p0;
wire   [10:0] grp_fu_177_p1;
wire   [127:0] grp_fu_172_p2;
reg    grp_fu_172_ce;
reg    grp_fu_177_ce;
reg    ap_ce_reg;
reg   [127:0] CompleteRegister_m_cr_V_read_int_reg;
reg   [15:0] in1_V_int_reg;
reg   [15:0] in2_V_int_reg;
reg   [127:0] ap_return_int_reg;
wire   [21:0] grp_fu_177_p00;
wire   [21:0] grp_fu_177_p10;

neural_network_adbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 128 ),
    .din1_WIDTH( 128 ),
    .dout_WIDTH( 128 ))
neural_network_adbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_reg_pp0_iter4_CompleteRegister_m_c_1_reg_193),
    .din1(grp_fu_172_p1),
    .ce(grp_fu_172_ce),
    .dout(grp_fu_172_p2)
);

neural_network_mucud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 22 ))
neural_network_mucud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_177_p0),
    .din1(grp_fu_177_p1),
    .ce(grp_fu_177_ce),
    .dout(grp_fu_177_p2)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        CompleteRegister_m_c_1_reg_193 <= CompleteRegister_m_cr_V_read_int_reg;
        agg_result_V_assign_s_reg_223 <= agg_result_V_assign_s_fu_115_p2;
        ap_reg_pp0_iter1_CompleteRegister_m_c_1_reg_193 <= CompleteRegister_m_c_1_reg_193;
        ap_reg_pp0_iter1_in1_V_read_reg_188 <= in1_V_read_reg_188;
        ap_reg_pp0_iter1_in2_V_read_reg_183 <= in2_V_read_reg_183;
        ap_reg_pp0_iter1_r_V_1_reg_208 <= r_V_1_reg_208;
        ap_reg_pp0_iter2_CompleteRegister_m_c_1_reg_193 <= ap_reg_pp0_iter1_CompleteRegister_m_c_1_reg_193;
        ap_reg_pp0_iter2_in1_V_read_reg_188 <= ap_reg_pp0_iter1_in1_V_read_reg_188;
        ap_reg_pp0_iter2_in2_V_read_reg_183 <= ap_reg_pp0_iter1_in2_V_read_reg_183;
        ap_reg_pp0_iter2_r_V_1_reg_208 <= ap_reg_pp0_iter1_r_V_1_reg_208;
        ap_reg_pp0_iter3_CompleteRegister_m_c_1_reg_193 <= ap_reg_pp0_iter2_CompleteRegister_m_c_1_reg_193;
        ap_reg_pp0_iter3_in1_V_read_reg_188 <= ap_reg_pp0_iter2_in1_V_read_reg_188;
        ap_reg_pp0_iter3_in2_V_read_reg_183 <= ap_reg_pp0_iter2_in2_V_read_reg_183;
        ap_reg_pp0_iter4_CompleteRegister_m_c_1_reg_193 <= ap_reg_pp0_iter3_CompleteRegister_m_c_1_reg_193;
        in1_V_read_reg_188 <= in1_V_int_reg;
        in2_V_read_reg_183 <= in2_V_int_reg;
        op2_assign_reg_228 <= op2_assign_fu_124_p2;
        r_V_1_reg_208 <= r_V_1_fu_106_p2;
        r_V_2_reg_233 <= r_V_2_fu_163_p2;
        r_V_reg_213 <= grp_fu_177_p2;
        result_V_reg_218[21 : 0] <= result_V_fu_112_p1[21 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        CompleteRegister_m_cr_V_read_int_reg <= CompleteRegister_m_cr_V_read;
        in1_V_int_reg <= in1_V;
        in2_V_int_reg <= in2_V;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= grp_fu_172_p2;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = grp_fu_172_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_172_ce = 1'b1;
    end else begin
        grp_fu_172_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_177_ce = 1'b1;
    end else begin
        grp_fu_177_ce = 1'b0;
    end
end

assign agg_result_V_assign_s_fu_115_p2 = (23'd0 - result_V_fu_112_p1);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign e1_V_fu_58_p4 = {{in1_V_int_reg[14:10]}};

assign e2_V_fu_80_p4 = {{in2_V_int_reg[14:10]}};

assign exact_s_fu_144_p2 = (sign_fu_130_p3 ^ sign_1_fu_137_p3);

assign grp_fu_172_p1 = $signed(r_V_2_reg_233);

assign grp_fu_177_p0 = grp_fu_177_p00;

assign grp_fu_177_p00 = p_Result_s_fu_50_p3;

assign grp_fu_177_p1 = grp_fu_177_p10;

assign grp_fu_177_p10 = p_Result_1_fu_72_p3;

assign lhs_V_1_fu_98_p1 = e1_V_fu_58_p4;

assign op2_assign_fu_124_p2 = (7'd12 + tmp_cast_fu_121_p1);

assign p_Result_1_fu_72_p3 = {{1'd1}, {tmp_31_fu_68_p1}};

assign p_Result_s_fu_50_p3 = {{1'd1}, {tmp_fu_46_p1}};

assign r_V_1_fu_106_p2 = (lhs_V_1_fu_98_p1 + rhs_V_1_fu_102_p1);

assign r_V_2_fu_163_p2 = shifted_V_cast_fu_156_p1 << tmp_cast_21_fu_160_p1;

assign result_V_2_fu_150_p3 = ((exact_s_fu_144_p2[0:0] === 1'b1) ? agg_result_V_assign_s_reg_223 : result_V_reg_218);

assign result_V_fu_112_p1 = r_V_reg_213;

assign rhs_V_1_fu_102_p1 = e2_V_fu_80_p4;

assign shifted_V_cast_fu_156_p1 = $signed(result_V_2_fu_150_p3);

assign sign_1_fu_137_p3 = ap_reg_pp0_iter3_in2_V_read_reg_183[32'd15];

assign sign_fu_130_p3 = ap_reg_pp0_iter3_in1_V_read_reg_188[32'd15];

assign tmp_31_fu_68_p1 = in2_V_int_reg[9:0];

assign tmp_cast_21_fu_160_p1 = op2_assign_reg_228;

assign tmp_cast_fu_121_p1 = ap_reg_pp0_iter2_r_V_1_reg_208;

assign tmp_fu_46_p1 = in1_V_int_reg[9:0];

always @ (posedge ap_clk) begin
    result_V_reg_218[22] <= 1'b0;
end

endmodule //multiply_accumulate
