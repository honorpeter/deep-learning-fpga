// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module relu (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_in_V_V_dout,
        data_in_V_V_empty_n,
        data_in_V_V_read,
        data_out_V_V_din,
        data_out_V_V_full_n,
        data_out_V_V_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] data_in_V_V_dout;
input   data_in_V_V_empty_n;
output   data_in_V_V_read;
output  [31:0] data_out_V_V_din;
input   data_out_V_V_full_n;
output   data_out_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_in_V_V_read;
reg[31:0] data_out_V_V_din;
reg data_out_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_in_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_fu_78_p2;
reg    data_out_V_V_blk_n;
wire   [0:0] tmp_fu_90_p2;
wire   [6:0] ii_1_fu_84_p2;
reg    ap_predicate_op14_write_state2;
reg    ap_predicate_op16_write_state2;
reg    ap_block_state2;
reg   [6:0] ii_reg_67;
reg    ap_block_state1;
reg   [1:0] ap_NS_fsm;
reg    ap_condition_81;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~(((data_out_V_V_full_n == 1'b0) & (ap_predicate_op16_write_state2 == 1'b1)) | ((data_out_V_V_full_n == 1'b0) & (ap_predicate_op14_write_state2 == 1'b1)) | ((exitcond_fu_78_p2 == 1'd0) & (data_in_V_V_empty_n == 1'b0))) & (exitcond_fu_78_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~(((data_out_V_V_full_n == 1'b0) & (ap_predicate_op16_write_state2 == 1'b1)) | ((data_out_V_V_full_n == 1'b0) & (ap_predicate_op14_write_state2 == 1'b1)) | ((exitcond_fu_78_p2 == 1'd0) & (data_in_V_V_empty_n == 1'b0))) & (exitcond_fu_78_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ii_reg_67 <= ii_1_fu_84_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ii_reg_67 <= 7'd0;
    end
end

always @ (*) begin
    if ((~(((data_out_V_V_full_n == 1'b0) & (ap_predicate_op16_write_state2 == 1'b1)) | ((data_out_V_V_full_n == 1'b0) & (ap_predicate_op14_write_state2 == 1'b1)) | ((exitcond_fu_78_p2 == 1'd0) & (data_in_V_V_empty_n == 1'b0))) & (exitcond_fu_78_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_78_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        data_in_V_V_blk_n = data_in_V_V_empty_n;
    end else begin
        data_in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((data_out_V_V_full_n == 1'b0) & (ap_predicate_op16_write_state2 == 1'b1)) | ((data_out_V_V_full_n == 1'b0) & (ap_predicate_op14_write_state2 == 1'b1)) | ((exitcond_fu_78_p2 == 1'd0) & (data_in_V_V_empty_n == 1'b0))) & (exitcond_fu_78_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        data_in_V_V_read = 1'b1;
    end else begin
        data_in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_fu_90_p2 == 1'd0) & (exitcond_fu_78_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_fu_90_p2 == 1'd1) & (exitcond_fu_78_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        data_out_V_V_blk_n = data_out_V_V_full_n;
    end else begin
        data_out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_81)) begin
        if ((ap_predicate_op16_write_state2 == 1'b1)) begin
            data_out_V_V_din = data_in_V_V_dout;
        end else if ((ap_predicate_op14_write_state2 == 1'b1)) begin
            data_out_V_V_din = 32'd0;
        end else begin
            data_out_V_V_din = 'bx;
        end
    end else begin
        data_out_V_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~(((data_out_V_V_full_n == 1'b0) & (ap_predicate_op16_write_state2 == 1'b1)) | ((data_out_V_V_full_n == 1'b0) & (ap_predicate_op14_write_state2 == 1'b1)) | ((exitcond_fu_78_p2 == 1'd0) & (data_in_V_V_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state2) & (ap_predicate_op16_write_state2 == 1'b1)) | (~(((data_out_V_V_full_n == 1'b0) & (ap_predicate_op16_write_state2 == 1'b1)) | ((data_out_V_V_full_n == 1'b0) & (ap_predicate_op14_write_state2 == 1'b1)) | ((exitcond_fu_78_p2 == 1'd0) & (data_in_V_V_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state2) & (ap_predicate_op14_write_state2 == 1'b1)))) begin
        data_out_V_V_write = 1'b1;
    end else begin
        data_out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~(((data_out_V_V_full_n == 1'b0) & (ap_predicate_op16_write_state2 == 1'b1)) | ((data_out_V_V_full_n == 1'b0) & (ap_predicate_op14_write_state2 == 1'b1)) | ((exitcond_fu_78_p2 == 1'd0) & (data_in_V_V_empty_n == 1'b0))) & (exitcond_fu_78_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~(((data_out_V_V_full_n == 1'b0) & (ap_predicate_op16_write_state2 == 1'b1)) | ((data_out_V_V_full_n == 1'b0) & (ap_predicate_op14_write_state2 == 1'b1)) | ((exitcond_fu_78_p2 == 1'd0) & (data_in_V_V_empty_n == 1'b0))) & (exitcond_fu_78_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~(((data_out_V_V_full_n == 1'b0) & (ap_predicate_op16_write_state2 == 1'b1)) | ((data_out_V_V_full_n == 1'b0) & (ap_predicate_op14_write_state2 == 1'b1)) | ((exitcond_fu_78_p2 == 1'd0) & (data_in_V_V_empty_n == 1'b0))) & (exitcond_fu_78_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = (((data_out_V_V_full_n == 1'b0) & (ap_predicate_op16_write_state2 == 1'b1)) | ((data_out_V_V_full_n == 1'b0) & (ap_predicate_op14_write_state2 == 1'b1)) | ((exitcond_fu_78_p2 == 1'd0) & (data_in_V_V_empty_n == 1'b0)));
end

always @ (*) begin
    ap_condition_81 = (~(((data_out_V_V_full_n == 1'b0) & (ap_predicate_op16_write_state2 == 1'b1)) | ((data_out_V_V_full_n == 1'b0) & (ap_predicate_op14_write_state2 == 1'b1)) | ((exitcond_fu_78_p2 == 1'd0) & (data_in_V_V_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state2));
end

always @ (*) begin
    ap_predicate_op14_write_state2 = ((tmp_fu_90_p2 == 1'd0) & (exitcond_fu_78_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op16_write_state2 = ((tmp_fu_90_p2 == 1'd1) & (exitcond_fu_78_p2 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign exitcond_fu_78_p2 = ((ii_reg_67 == 7'd64) ? 1'b1 : 1'b0);

assign ii_1_fu_84_p2 = (ii_reg_67 + 7'd1);

assign start_out = real_start;

assign tmp_fu_90_p2 = (($signed(data_in_V_V_dout) > $signed(32'd0)) ? 1'b1 : 1'b0);

endmodule //relu
