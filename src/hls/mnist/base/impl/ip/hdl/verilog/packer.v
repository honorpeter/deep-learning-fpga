// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module packer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        stream_in_V_V_dout,
        stream_in_V_V_empty_n,
        stream_in_V_V_read,
        sdata_out_TDATA,
        sdata_out_TVALID,
        sdata_out_TREADY,
        sdata_out_TKEEP,
        sdata_out_TSTRB,
        sdata_out_TUSER,
        sdata_out_TLAST,
        sdata_out_TID,
        sdata_out_TDEST
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] stream_in_V_V_dout;
input   stream_in_V_V_empty_n;
output   stream_in_V_V_read;
output  [31:0] sdata_out_TDATA;
output   sdata_out_TVALID;
input   sdata_out_TREADY;
output  [3:0] sdata_out_TKEEP;
output  [3:0] sdata_out_TSTRB;
output  [0:0] sdata_out_TUSER;
output  [0:0] sdata_out_TLAST;
output  [0:0] sdata_out_TID;
output  [0:0] sdata_out_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg stream_in_V_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] stream_out_V_data_V_1_data_out;
reg    stream_out_V_data_V_1_vld_in;
wire    stream_out_V_data_V_1_vld_out;
wire    stream_out_V_data_V_1_ack_in;
wire    stream_out_V_data_V_1_ack_out;
reg   [31:0] stream_out_V_data_V_1_payload_A;
reg   [31:0] stream_out_V_data_V_1_payload_B;
reg    stream_out_V_data_V_1_sel_rd;
reg    stream_out_V_data_V_1_sel_wr;
wire    stream_out_V_data_V_1_sel;
wire    stream_out_V_data_V_1_load_A;
wire    stream_out_V_data_V_1_load_B;
reg   [1:0] stream_out_V_data_V_1_state;
wire    stream_out_V_data_V_1_state_cmp_full;
wire   [3:0] stream_out_V_keep_V_1_data_out;
reg    stream_out_V_keep_V_1_vld_in;
wire    stream_out_V_keep_V_1_vld_out;
wire    stream_out_V_keep_V_1_ack_in;
wire    stream_out_V_keep_V_1_ack_out;
reg    stream_out_V_keep_V_1_sel_rd;
wire    stream_out_V_keep_V_1_sel;
reg   [1:0] stream_out_V_keep_V_1_state;
wire   [3:0] stream_out_V_strb_V_1_data_out;
reg    stream_out_V_strb_V_1_vld_in;
wire    stream_out_V_strb_V_1_vld_out;
wire    stream_out_V_strb_V_1_ack_in;
wire    stream_out_V_strb_V_1_ack_out;
reg    stream_out_V_strb_V_1_sel_rd;
wire    stream_out_V_strb_V_1_sel;
reg   [1:0] stream_out_V_strb_V_1_state;
reg   [0:0] stream_out_V_user_V_1_data_out;
reg    stream_out_V_user_V_1_vld_in;
wire    stream_out_V_user_V_1_vld_out;
wire    stream_out_V_user_V_1_ack_in;
wire    stream_out_V_user_V_1_ack_out;
reg   [0:0] stream_out_V_user_V_1_payload_A;
reg   [0:0] stream_out_V_user_V_1_payload_B;
reg    stream_out_V_user_V_1_sel_rd;
reg    stream_out_V_user_V_1_sel_wr;
wire    stream_out_V_user_V_1_sel;
wire    stream_out_V_user_V_1_load_A;
wire    stream_out_V_user_V_1_load_B;
reg   [1:0] stream_out_V_user_V_1_state;
wire    stream_out_V_user_V_1_state_cmp_full;
reg   [0:0] stream_out_V_last_V_1_data_out;
reg    stream_out_V_last_V_1_vld_in;
wire    stream_out_V_last_V_1_vld_out;
wire    stream_out_V_last_V_1_ack_in;
wire    stream_out_V_last_V_1_ack_out;
reg   [0:0] stream_out_V_last_V_1_payload_A;
reg   [0:0] stream_out_V_last_V_1_payload_B;
reg    stream_out_V_last_V_1_sel_rd;
reg    stream_out_V_last_V_1_sel_wr;
wire    stream_out_V_last_V_1_sel;
wire    stream_out_V_last_V_1_load_A;
wire    stream_out_V_last_V_1_load_B;
reg   [1:0] stream_out_V_last_V_1_state;
wire    stream_out_V_last_V_1_state_cmp_full;
reg   [0:0] stream_out_V_id_V_1_data_out;
reg    stream_out_V_id_V_1_vld_in;
wire    stream_out_V_id_V_1_vld_out;
wire    stream_out_V_id_V_1_ack_in;
wire    stream_out_V_id_V_1_ack_out;
reg   [0:0] stream_out_V_id_V_1_payload_A;
reg   [0:0] stream_out_V_id_V_1_payload_B;
reg    stream_out_V_id_V_1_sel_rd;
reg    stream_out_V_id_V_1_sel_wr;
wire    stream_out_V_id_V_1_sel;
wire    stream_out_V_id_V_1_load_A;
wire    stream_out_V_id_V_1_load_B;
reg   [1:0] stream_out_V_id_V_1_state;
wire    stream_out_V_id_V_1_state_cmp_full;
reg   [0:0] stream_out_V_dest_V_1_data_out;
reg    stream_out_V_dest_V_1_vld_in;
wire    stream_out_V_dest_V_1_vld_out;
wire    stream_out_V_dest_V_1_ack_in;
wire    stream_out_V_dest_V_1_ack_out;
reg   [0:0] stream_out_V_dest_V_1_payload_A;
reg   [0:0] stream_out_V_dest_V_1_payload_B;
reg    stream_out_V_dest_V_1_sel_rd;
reg    stream_out_V_dest_V_1_sel_wr;
wire    stream_out_V_dest_V_1_sel;
wire    stream_out_V_dest_V_1_load_A;
wire    stream_out_V_dest_V_1_load_B;
reg   [1:0] stream_out_V_dest_V_1_state;
wire    stream_out_V_dest_V_1_state_cmp_full;
reg    stream_in_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    sdata_out_TDATA_blk_n;
reg   [0:0] exitcond_reg_240;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg   [0:0] ap_reg_pp0_iter1_exitcond_reg_240;
reg   [3:0] i_reg_201;
reg    ap_block_state1;
wire   [0:0] exitcond_fu_212_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] i_2_fu_218_p2;
reg   [3:0] i_2_reg_244;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] tmp_fu_224_p1;
reg   [63:0] tmp_reg_249;
wire   [0:0] tmp_8_fu_229_p2;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage1_11001;
wire   [0:0] packet_user_V_q0;
wire   [0:0] packet_last_V_q0;
wire   [0:0] packet_id_V_q0;
wire   [0:0] packet_dest_V_q0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage1_subdone;
wire   [3:0] packet_user_V_address0;
reg    packet_user_V_ce0;
reg   [3:0] packet_last_V_address0;
reg    packet_last_V_ce0;
reg    packet_last_V_we0;
reg   [0:0] packet_last_V_d0;
wire   [3:0] packet_id_V_address0;
reg    packet_id_V_ce0;
wire   [3:0] packet_dest_V_address0;
reg    packet_dest_V_ce0;
reg   [3:0] ap_phi_mux_i_phi_fu_205_p4;
reg    ap_block_pp0_stage0_01001;
wire    ap_block_pp0_stage1_01001;
wire    ap_CS_fsm_state6;
reg    ap_block_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_692;
reg    ap_condition_695;
reg    ap_condition_699;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 stream_out_V_data_V_1_sel_rd = 1'b0;
#0 stream_out_V_data_V_1_sel_wr = 1'b0;
#0 stream_out_V_data_V_1_state = 2'd0;
#0 stream_out_V_keep_V_1_sel_rd = 1'b0;
#0 stream_out_V_keep_V_1_state = 2'd0;
#0 stream_out_V_strb_V_1_sel_rd = 1'b0;
#0 stream_out_V_strb_V_1_state = 2'd0;
#0 stream_out_V_user_V_1_sel_rd = 1'b0;
#0 stream_out_V_user_V_1_sel_wr = 1'b0;
#0 stream_out_V_user_V_1_state = 2'd0;
#0 stream_out_V_last_V_1_sel_rd = 1'b0;
#0 stream_out_V_last_V_1_sel_wr = 1'b0;
#0 stream_out_V_last_V_1_state = 2'd0;
#0 stream_out_V_id_V_1_sel_rd = 1'b0;
#0 stream_out_V_id_V_1_sel_wr = 1'b0;
#0 stream_out_V_id_V_1_state = 2'd0;
#0 stream_out_V_dest_V_1_sel_rd = 1'b0;
#0 stream_out_V_dest_V_1_sel_wr = 1'b0;
#0 stream_out_V_dest_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

packer_packet_useibs #(
    .DataWidth( 1 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
packet_user_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(packet_user_V_address0),
    .ce0(packet_user_V_ce0),
    .q0(packet_user_V_q0)
);

packer_packet_lasjbC #(
    .DataWidth( 1 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
packet_last_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(packet_last_V_address0),
    .ce0(packet_last_V_ce0),
    .we0(packet_last_V_we0),
    .d0(packet_last_V_d0),
    .q0(packet_last_V_q0)
);

packer_packet_useibs #(
    .DataWidth( 1 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
packet_id_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(packet_id_V_address0),
    .ce0(packet_id_V_ce0),
    .q0(packet_id_V_q0)
);

packer_packet_useibs #(
    .DataWidth( 1 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
packet_dest_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(packet_dest_V_address0),
    .ce0(packet_dest_V_ce0),
    .q0(packet_dest_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_out_V_dest_V_1_ack_in == 1'b0) | (stream_out_V_id_V_1_ack_in == 1'b0) | (stream_out_V_last_V_1_ack_in == 1'b0) | (stream_out_V_user_V_1_ack_in == 1'b0) | (stream_out_V_strb_V_1_ack_in == 1'b0) | (stream_out_V_keep_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_data_V_1_ack_out == 1'b1) & (stream_out_V_data_V_1_vld_out == 1'b1))) begin
            stream_out_V_data_V_1_sel_rd <= ~stream_out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_data_V_1_ack_in == 1'b1) & (stream_out_V_data_V_1_vld_in == 1'b1))) begin
            stream_out_V_data_V_1_sel_wr <= ~stream_out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_data_V_1_state == 2'd2) & (stream_out_V_data_V_1_vld_in == 1'b0)) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_V_data_V_1_vld_in == 1'b0) & (stream_out_V_data_V_1_ack_out == 1'b1)))) begin
            stream_out_V_data_V_1_state <= 2'd2;
        end else if ((((stream_out_V_data_V_1_state == 2'd1) & (stream_out_V_data_V_1_ack_out == 1'b0)) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_V_data_V_1_ack_out == 1'b0) & (stream_out_V_data_V_1_vld_in == 1'b1)))) begin
            stream_out_V_data_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_data_V_1_vld_in == 1'b0) & (stream_out_V_data_V_1_ack_out == 1'b1)) & ~((stream_out_V_data_V_1_ack_out == 1'b0) & (stream_out_V_data_V_1_vld_in == 1'b1)) & (stream_out_V_data_V_1_state == 2'd3)) | ((stream_out_V_data_V_1_state == 2'd1) & (stream_out_V_data_V_1_ack_out == 1'b1)) | ((stream_out_V_data_V_1_state == 2'd2) & (stream_out_V_data_V_1_vld_in == 1'b1)))) begin
            stream_out_V_data_V_1_state <= 2'd3;
        end else begin
            stream_out_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_dest_V_1_ack_out == 1'b1) & (stream_out_V_dest_V_1_vld_out == 1'b1))) begin
            stream_out_V_dest_V_1_sel_rd <= ~stream_out_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_dest_V_1_ack_in == 1'b1) & (stream_out_V_dest_V_1_vld_in == 1'b1))) begin
            stream_out_V_dest_V_1_sel_wr <= ~stream_out_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_dest_V_1_state == 2'd2) & (stream_out_V_dest_V_1_vld_in == 1'b0)) | ((stream_out_V_dest_V_1_state == 2'd3) & (stream_out_V_dest_V_1_vld_in == 1'b0) & (stream_out_V_dest_V_1_ack_out == 1'b1)))) begin
            stream_out_V_dest_V_1_state <= 2'd2;
        end else if ((((stream_out_V_dest_V_1_state == 2'd1) & (stream_out_V_dest_V_1_ack_out == 1'b0)) | ((stream_out_V_dest_V_1_state == 2'd3) & (stream_out_V_dest_V_1_ack_out == 1'b0) & (stream_out_V_dest_V_1_vld_in == 1'b1)))) begin
            stream_out_V_dest_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_dest_V_1_vld_in == 1'b0) & (stream_out_V_dest_V_1_ack_out == 1'b1)) & ~((stream_out_V_dest_V_1_ack_out == 1'b0) & (stream_out_V_dest_V_1_vld_in == 1'b1)) & (stream_out_V_dest_V_1_state == 2'd3)) | ((stream_out_V_dest_V_1_state == 2'd1) & (stream_out_V_dest_V_1_ack_out == 1'b1)) | ((stream_out_V_dest_V_1_state == 2'd2) & (stream_out_V_dest_V_1_vld_in == 1'b1)))) begin
            stream_out_V_dest_V_1_state <= 2'd3;
        end else begin
            stream_out_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_id_V_1_ack_out == 1'b1) & (stream_out_V_id_V_1_vld_out == 1'b1))) begin
            stream_out_V_id_V_1_sel_rd <= ~stream_out_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_id_V_1_ack_in == 1'b1) & (stream_out_V_id_V_1_vld_in == 1'b1))) begin
            stream_out_V_id_V_1_sel_wr <= ~stream_out_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_id_V_1_state == 2'd2) & (stream_out_V_id_V_1_vld_in == 1'b0)) | ((stream_out_V_id_V_1_state == 2'd3) & (stream_out_V_id_V_1_vld_in == 1'b0) & (stream_out_V_id_V_1_ack_out == 1'b1)))) begin
            stream_out_V_id_V_1_state <= 2'd2;
        end else if ((((stream_out_V_id_V_1_state == 2'd1) & (stream_out_V_id_V_1_ack_out == 1'b0)) | ((stream_out_V_id_V_1_state == 2'd3) & (stream_out_V_id_V_1_ack_out == 1'b0) & (stream_out_V_id_V_1_vld_in == 1'b1)))) begin
            stream_out_V_id_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_id_V_1_vld_in == 1'b0) & (stream_out_V_id_V_1_ack_out == 1'b1)) & ~((stream_out_V_id_V_1_ack_out == 1'b0) & (stream_out_V_id_V_1_vld_in == 1'b1)) & (stream_out_V_id_V_1_state == 2'd3)) | ((stream_out_V_id_V_1_state == 2'd1) & (stream_out_V_id_V_1_ack_out == 1'b1)) | ((stream_out_V_id_V_1_state == 2'd2) & (stream_out_V_id_V_1_vld_in == 1'b1)))) begin
            stream_out_V_id_V_1_state <= 2'd3;
        end else begin
            stream_out_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_keep_V_1_ack_out == 1'b1) & (stream_out_V_keep_V_1_vld_out == 1'b1))) begin
            stream_out_V_keep_V_1_sel_rd <= ~stream_out_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_keep_V_1_state == 2'd2) & (stream_out_V_keep_V_1_vld_in == 1'b0)) | ((stream_out_V_keep_V_1_state == 2'd3) & (stream_out_V_keep_V_1_vld_in == 1'b0) & (stream_out_V_keep_V_1_ack_out == 1'b1)))) begin
            stream_out_V_keep_V_1_state <= 2'd2;
        end else if ((((stream_out_V_keep_V_1_state == 2'd1) & (stream_out_V_keep_V_1_ack_out == 1'b0)) | ((stream_out_V_keep_V_1_state == 2'd3) & (stream_out_V_keep_V_1_ack_out == 1'b0) & (stream_out_V_keep_V_1_vld_in == 1'b1)))) begin
            stream_out_V_keep_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_keep_V_1_vld_in == 1'b0) & (stream_out_V_keep_V_1_ack_out == 1'b1)) & ~((stream_out_V_keep_V_1_ack_out == 1'b0) & (stream_out_V_keep_V_1_vld_in == 1'b1)) & (stream_out_V_keep_V_1_state == 2'd3)) | ((stream_out_V_keep_V_1_state == 2'd1) & (stream_out_V_keep_V_1_ack_out == 1'b1)) | ((stream_out_V_keep_V_1_state == 2'd2) & (stream_out_V_keep_V_1_vld_in == 1'b1)))) begin
            stream_out_V_keep_V_1_state <= 2'd3;
        end else begin
            stream_out_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_last_V_1_ack_out == 1'b1) & (stream_out_V_last_V_1_vld_out == 1'b1))) begin
            stream_out_V_last_V_1_sel_rd <= ~stream_out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_last_V_1_ack_in == 1'b1) & (stream_out_V_last_V_1_vld_in == 1'b1))) begin
            stream_out_V_last_V_1_sel_wr <= ~stream_out_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_last_V_1_state == 2'd2) & (stream_out_V_last_V_1_vld_in == 1'b0)) | ((stream_out_V_last_V_1_state == 2'd3) & (stream_out_V_last_V_1_vld_in == 1'b0) & (stream_out_V_last_V_1_ack_out == 1'b1)))) begin
            stream_out_V_last_V_1_state <= 2'd2;
        end else if ((((stream_out_V_last_V_1_state == 2'd1) & (stream_out_V_last_V_1_ack_out == 1'b0)) | ((stream_out_V_last_V_1_state == 2'd3) & (stream_out_V_last_V_1_ack_out == 1'b0) & (stream_out_V_last_V_1_vld_in == 1'b1)))) begin
            stream_out_V_last_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_last_V_1_vld_in == 1'b0) & (stream_out_V_last_V_1_ack_out == 1'b1)) & ~((stream_out_V_last_V_1_ack_out == 1'b0) & (stream_out_V_last_V_1_vld_in == 1'b1)) & (stream_out_V_last_V_1_state == 2'd3)) | ((stream_out_V_last_V_1_state == 2'd1) & (stream_out_V_last_V_1_ack_out == 1'b1)) | ((stream_out_V_last_V_1_state == 2'd2) & (stream_out_V_last_V_1_vld_in == 1'b1)))) begin
            stream_out_V_last_V_1_state <= 2'd3;
        end else begin
            stream_out_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_strb_V_1_ack_out == 1'b1) & (stream_out_V_strb_V_1_vld_out == 1'b1))) begin
            stream_out_V_strb_V_1_sel_rd <= ~stream_out_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_strb_V_1_state == 2'd2) & (stream_out_V_strb_V_1_vld_in == 1'b0)) | ((stream_out_V_strb_V_1_state == 2'd3) & (stream_out_V_strb_V_1_vld_in == 1'b0) & (stream_out_V_strb_V_1_ack_out == 1'b1)))) begin
            stream_out_V_strb_V_1_state <= 2'd2;
        end else if ((((stream_out_V_strb_V_1_state == 2'd1) & (stream_out_V_strb_V_1_ack_out == 1'b0)) | ((stream_out_V_strb_V_1_state == 2'd3) & (stream_out_V_strb_V_1_ack_out == 1'b0) & (stream_out_V_strb_V_1_vld_in == 1'b1)))) begin
            stream_out_V_strb_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_strb_V_1_vld_in == 1'b0) & (stream_out_V_strb_V_1_ack_out == 1'b1)) & ~((stream_out_V_strb_V_1_ack_out == 1'b0) & (stream_out_V_strb_V_1_vld_in == 1'b1)) & (stream_out_V_strb_V_1_state == 2'd3)) | ((stream_out_V_strb_V_1_state == 2'd1) & (stream_out_V_strb_V_1_ack_out == 1'b1)) | ((stream_out_V_strb_V_1_state == 2'd2) & (stream_out_V_strb_V_1_vld_in == 1'b1)))) begin
            stream_out_V_strb_V_1_state <= 2'd3;
        end else begin
            stream_out_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_user_V_1_ack_out == 1'b1) & (stream_out_V_user_V_1_vld_out == 1'b1))) begin
            stream_out_V_user_V_1_sel_rd <= ~stream_out_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_user_V_1_ack_in == 1'b1) & (stream_out_V_user_V_1_vld_in == 1'b1))) begin
            stream_out_V_user_V_1_sel_wr <= ~stream_out_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_user_V_1_state == 2'd2) & (stream_out_V_user_V_1_vld_in == 1'b0)) | ((stream_out_V_user_V_1_state == 2'd3) & (stream_out_V_user_V_1_vld_in == 1'b0) & (stream_out_V_user_V_1_ack_out == 1'b1)))) begin
            stream_out_V_user_V_1_state <= 2'd2;
        end else if ((((stream_out_V_user_V_1_state == 2'd1) & (stream_out_V_user_V_1_ack_out == 1'b0)) | ((stream_out_V_user_V_1_state == 2'd3) & (stream_out_V_user_V_1_ack_out == 1'b0) & (stream_out_V_user_V_1_vld_in == 1'b1)))) begin
            stream_out_V_user_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_user_V_1_vld_in == 1'b0) & (stream_out_V_user_V_1_ack_out == 1'b1)) & ~((stream_out_V_user_V_1_ack_out == 1'b0) & (stream_out_V_user_V_1_vld_in == 1'b1)) & (stream_out_V_user_V_1_state == 2'd3)) | ((stream_out_V_user_V_1_state == 2'd1) & (stream_out_V_user_V_1_ack_out == 1'b1)) | ((stream_out_V_user_V_1_state == 2'd2) & (stream_out_V_user_V_1_vld_in == 1'b1)))) begin
            stream_out_V_user_V_1_state <= 2'd3;
        end else begin
            stream_out_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_201 <= 4'd0;
    end else if (((exitcond_reg_240 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_201 <= i_2_reg_244;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_exitcond_reg_240 <= exitcond_reg_240;
        exitcond_reg_240 <= exitcond_fu_212_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_2_reg_244 <= i_2_fu_218_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_data_V_1_load_A == 1'b1)) begin
        stream_out_V_data_V_1_payload_A <= stream_in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_data_V_1_load_B == 1'b1)) begin
        stream_out_V_data_V_1_payload_B <= stream_in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_dest_V_1_load_A == 1'b1)) begin
        stream_out_V_dest_V_1_payload_A <= packet_dest_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_dest_V_1_load_B == 1'b1)) begin
        stream_out_V_dest_V_1_payload_B <= packet_dest_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_id_V_1_load_A == 1'b1)) begin
        stream_out_V_id_V_1_payload_A <= packet_id_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_id_V_1_load_B == 1'b1)) begin
        stream_out_V_id_V_1_payload_B <= packet_id_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_last_V_1_load_A == 1'b1)) begin
        stream_out_V_last_V_1_payload_A <= packet_last_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_last_V_1_load_B == 1'b1)) begin
        stream_out_V_last_V_1_payload_B <= packet_last_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_user_V_1_load_A == 1'b1)) begin
        stream_out_V_user_V_1_payload_A <= packet_user_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_user_V_1_load_B == 1'b1)) begin
        stream_out_V_user_V_1_payload_B <= packet_user_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_212_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_249[3 : 0] <= tmp_fu_224_p1[3 : 0];
    end
end

always @ (*) begin
    if ((exitcond_fu_212_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_out_V_dest_V_1_ack_in == 1'b0) | (stream_out_V_id_V_1_ack_in == 1'b0) | (stream_out_V_last_V_1_ack_in == 1'b0) | (stream_out_V_user_V_1_ack_in == 1'b0) | (stream_out_V_strb_V_1_ack_in == 1'b0) | (stream_out_V_keep_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_240 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_205_p4 = i_2_reg_244;
    end else begin
        ap_phi_mux_i_phi_fu_205_p4 = i_reg_201;
    end
end

always @ (*) begin
    if ((~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_out_V_dest_V_1_ack_in == 1'b0) | (stream_out_V_id_V_1_ack_in == 1'b0) | (stream_out_V_last_V_1_ack_in == 1'b0) | (stream_out_V_user_V_1_ack_in == 1'b0) | (stream_out_V_strb_V_1_ack_in == 1'b0) | (stream_out_V_keep_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        packet_dest_V_ce0 = 1'b1;
    end else begin
        packet_dest_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        packet_id_V_ce0 = 1'b1;
    end else begin
        packet_id_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            packet_last_V_address0 = tmp_reg_249;
        end else if ((1'b1 == ap_condition_695)) begin
            packet_last_V_address0 = 64'd9;
        end else if ((1'b1 == ap_condition_692)) begin
            packet_last_V_address0 = tmp_fu_224_p1;
        end else begin
            packet_last_V_address0 = 'bx;
        end
    end else begin
        packet_last_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((tmp_8_fu_229_p2 == 1'd1) & (exitcond_fu_212_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_8_fu_229_p2 == 1'd0) & (exitcond_fu_212_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        packet_last_V_ce0 = 1'b1;
    end else begin
        packet_last_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_699)) begin
        if ((tmp_8_fu_229_p2 == 1'd1)) begin
            packet_last_V_d0 = 1'd1;
        end else if ((tmp_8_fu_229_p2 == 1'd0)) begin
            packet_last_V_d0 = 1'd0;
        end else begin
            packet_last_V_d0 = 'bx;
        end
    end else begin
        packet_last_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_8_fu_229_p2 == 1'd1) & (exitcond_fu_212_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_8_fu_229_p2 == 1'd0) & (exitcond_fu_212_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        packet_last_V_we0 = 1'b1;
    end else begin
        packet_last_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        packet_user_V_ce0 = 1'b1;
    end else begin
        packet_user_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_reg_pp0_iter1_exitcond_reg_240 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((exitcond_reg_240 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        sdata_out_TDATA_blk_n = stream_out_V_data_V_1_state[1'd1];
    end else begin
        sdata_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_in_V_V_blk_n = stream_in_V_V_empty_n;
    end else begin
        stream_in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_in_V_V_read = 1'b1;
    end else begin
        stream_in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_V_data_V_1_sel == 1'b1)) begin
        stream_out_V_data_V_1_data_out = stream_out_V_data_V_1_payload_B;
    end else begin
        stream_out_V_data_V_1_data_out = stream_out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond_reg_240 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_out_V_data_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_V_dest_V_1_sel == 1'b1)) begin
        stream_out_V_dest_V_1_data_out = stream_out_V_dest_V_1_payload_B;
    end else begin
        stream_out_V_dest_V_1_data_out = stream_out_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond_reg_240 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_out_V_dest_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_V_id_V_1_sel == 1'b1)) begin
        stream_out_V_id_V_1_data_out = stream_out_V_id_V_1_payload_B;
    end else begin
        stream_out_V_id_V_1_data_out = stream_out_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond_reg_240 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_out_V_id_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_240 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_out_V_keep_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_V_last_V_1_sel == 1'b1)) begin
        stream_out_V_last_V_1_data_out = stream_out_V_last_V_1_payload_B;
    end else begin
        stream_out_V_last_V_1_data_out = stream_out_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond_reg_240 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_out_V_last_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_240 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_out_V_strb_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_V_user_V_1_sel == 1'b1)) begin
        stream_out_V_user_V_1_data_out = stream_out_V_user_V_1_payload_B;
    end else begin
        stream_out_V_user_V_1_data_out = stream_out_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond_reg_240 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_out_V_user_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_212_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_212_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_out_V_dest_V_1_ack_in == 1'b0) | (stream_out_V_id_V_1_ack_in == 1'b0) | (stream_out_V_last_V_1_ack_in == 1'b0) | (stream_out_V_user_V_1_ack_in == 1'b0) | (stream_out_V_strb_V_1_ack_in == 1'b0) | (stream_out_V_keep_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((stream_in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((stream_in_V_V_empty_n == 1'b0) | (1'b1 == ap_block_state4_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((stream_in_V_V_empty_n == 1'b0) | (1'b1 == ap_block_state4_io)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((exitcond_reg_240 == 1'd0) & (stream_out_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (stream_in_V_V_empty_n == 1'b0);
end

always @ (*) begin
    ap_block_state5_io = ((ap_reg_pp0_iter1_exitcond_reg_240 == 1'd0) & (stream_out_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6 = ((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_out_V_dest_V_1_ack_in == 1'b0) | (stream_out_V_id_V_1_ack_in == 1'b0) | (stream_out_V_last_V_1_ack_in == 1'b0) | (stream_out_V_user_V_1_ack_in == 1'b0) | (stream_out_V_strb_V_1_ack_in == 1'b0) | (stream_out_V_keep_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_condition_692 = ((tmp_8_fu_229_p2 == 1'd0) & (exitcond_fu_212_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_695 = ((tmp_8_fu_229_p2 == 1'd1) & (exitcond_fu_212_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_699 = ((exitcond_fu_212_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond_fu_212_p2 = ((ap_phi_mux_i_phi_fu_205_p4 == 4'd10) ? 1'b1 : 1'b0);

assign i_2_fu_218_p2 = (ap_phi_mux_i_phi_fu_205_p4 + 4'd1);

assign packet_dest_V_address0 = tmp_reg_249;

assign packet_id_V_address0 = tmp_reg_249;

assign packet_user_V_address0 = tmp_reg_249;

assign sdata_out_TDATA = stream_out_V_data_V_1_data_out;

assign sdata_out_TDEST = stream_out_V_dest_V_1_data_out;

assign sdata_out_TID = stream_out_V_id_V_1_data_out;

assign sdata_out_TKEEP = stream_out_V_keep_V_1_data_out;

assign sdata_out_TLAST = stream_out_V_last_V_1_data_out;

assign sdata_out_TSTRB = stream_out_V_strb_V_1_data_out;

assign sdata_out_TUSER = stream_out_V_user_V_1_data_out;

assign sdata_out_TVALID = stream_out_V_dest_V_1_state[1'd0];

assign stream_out_V_data_V_1_ack_in = stream_out_V_data_V_1_state[1'd1];

assign stream_out_V_data_V_1_ack_out = sdata_out_TREADY;

assign stream_out_V_data_V_1_load_A = (stream_out_V_data_V_1_state_cmp_full & ~stream_out_V_data_V_1_sel_wr);

assign stream_out_V_data_V_1_load_B = (stream_out_V_data_V_1_state_cmp_full & stream_out_V_data_V_1_sel_wr);

assign stream_out_V_data_V_1_sel = stream_out_V_data_V_1_sel_rd;

assign stream_out_V_data_V_1_state_cmp_full = ((stream_out_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_data_V_1_vld_out = stream_out_V_data_V_1_state[1'd0];

assign stream_out_V_dest_V_1_ack_in = stream_out_V_dest_V_1_state[1'd1];

assign stream_out_V_dest_V_1_ack_out = sdata_out_TREADY;

assign stream_out_V_dest_V_1_load_A = (stream_out_V_dest_V_1_state_cmp_full & ~stream_out_V_dest_V_1_sel_wr);

assign stream_out_V_dest_V_1_load_B = (stream_out_V_dest_V_1_state_cmp_full & stream_out_V_dest_V_1_sel_wr);

assign stream_out_V_dest_V_1_sel = stream_out_V_dest_V_1_sel_rd;

assign stream_out_V_dest_V_1_state_cmp_full = ((stream_out_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_dest_V_1_vld_out = stream_out_V_dest_V_1_state[1'd0];

assign stream_out_V_id_V_1_ack_in = stream_out_V_id_V_1_state[1'd1];

assign stream_out_V_id_V_1_ack_out = sdata_out_TREADY;

assign stream_out_V_id_V_1_load_A = (stream_out_V_id_V_1_state_cmp_full & ~stream_out_V_id_V_1_sel_wr);

assign stream_out_V_id_V_1_load_B = (stream_out_V_id_V_1_state_cmp_full & stream_out_V_id_V_1_sel_wr);

assign stream_out_V_id_V_1_sel = stream_out_V_id_V_1_sel_rd;

assign stream_out_V_id_V_1_state_cmp_full = ((stream_out_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_id_V_1_vld_out = stream_out_V_id_V_1_state[1'd0];

assign stream_out_V_keep_V_1_ack_in = stream_out_V_keep_V_1_state[1'd1];

assign stream_out_V_keep_V_1_ack_out = sdata_out_TREADY;

assign stream_out_V_keep_V_1_data_out = 4'd15;

assign stream_out_V_keep_V_1_sel = stream_out_V_keep_V_1_sel_rd;

assign stream_out_V_keep_V_1_vld_out = stream_out_V_keep_V_1_state[1'd0];

assign stream_out_V_last_V_1_ack_in = stream_out_V_last_V_1_state[1'd1];

assign stream_out_V_last_V_1_ack_out = sdata_out_TREADY;

assign stream_out_V_last_V_1_load_A = (stream_out_V_last_V_1_state_cmp_full & ~stream_out_V_last_V_1_sel_wr);

assign stream_out_V_last_V_1_load_B = (stream_out_V_last_V_1_state_cmp_full & stream_out_V_last_V_1_sel_wr);

assign stream_out_V_last_V_1_sel = stream_out_V_last_V_1_sel_rd;

assign stream_out_V_last_V_1_state_cmp_full = ((stream_out_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_last_V_1_vld_out = stream_out_V_last_V_1_state[1'd0];

assign stream_out_V_strb_V_1_ack_in = stream_out_V_strb_V_1_state[1'd1];

assign stream_out_V_strb_V_1_ack_out = sdata_out_TREADY;

assign stream_out_V_strb_V_1_data_out = 4'd15;

assign stream_out_V_strb_V_1_sel = stream_out_V_strb_V_1_sel_rd;

assign stream_out_V_strb_V_1_vld_out = stream_out_V_strb_V_1_state[1'd0];

assign stream_out_V_user_V_1_ack_in = stream_out_V_user_V_1_state[1'd1];

assign stream_out_V_user_V_1_ack_out = sdata_out_TREADY;

assign stream_out_V_user_V_1_load_A = (stream_out_V_user_V_1_state_cmp_full & ~stream_out_V_user_V_1_sel_wr);

assign stream_out_V_user_V_1_load_B = (stream_out_V_user_V_1_state_cmp_full & stream_out_V_user_V_1_sel_wr);

assign stream_out_V_user_V_1_sel = stream_out_V_user_V_1_sel_rd;

assign stream_out_V_user_V_1_state_cmp_full = ((stream_out_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_user_V_1_vld_out = stream_out_V_user_V_1_state[1'd0];

assign tmp_8_fu_229_p2 = ((ap_phi_mux_i_phi_fu_205_p4 == 4'd9) ? 1'b1 : 1'b0);

assign tmp_fu_224_p1 = ap_phi_mux_i_phi_fu_205_p4;

always @ (posedge ap_clk) begin
    tmp_reg_249[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //packer
