-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity linear_activationfYi_rom is 
    generic(
             dwidth     : integer := 80; 
             awidth     : integer := 6; 
             mem_size    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of linear_activationfYi_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00000000000000000100001101000001000000000000000011000010100001000000000000000000", 
    1 => "00000000000000001100001101000010000000000000000011000011010000000000000000000000", 
    2 => "00000000000000000100001000101100000000000000000011000010110101000000000000000000", 
    3 => "00000000000000001100001011101000000000000000000001000011100011110000000000000000", 
    4 => "00000000000000000100001111010001100000000000000001000010000110000000000000000000", 
    5 => "00000000000000000100001010100000000000000000000011000001000100000000000000000000", 
    6 => "00000000000000001100001011000010000000000000000001000011101011011000000000000000", 
    7 => "00000000000000000100001111011101000000000000000001000011000101000000000000000000", 
    8 => "00000000000000000100001101100111000000000000000001000100000101100100000000000000", 
    9 => "00000000000000001100000111010000000000000000000001000011000110100000000000000000", 
    10 => "00000000000000000100000110100000000000000000000011000010111001000000000000000000", 
    11 => "00000000000000000100001110111110100000000000000001000011001110010000000000000000", 
    12 => "00000000000000000100001100000011000000000000000001000001111110000000000000000000", 
    13 => "00000000000000000100001101111001000000000000000011000000100000000000000000000000", 
    14 => "00000000000000001100001001010000000000000000000011000010100000000000000000000000", 
    15 => "00000000000000000100000010100000000000000000000001000011001011100000000000000000", 
    16 => "00000000000000000100001100010111000000000000000001000010011101000000000000000000", 
    17 => "00000000000000001100001010111100000000000000000001000011010111010000000000000000", 
    18 => "00000000000000001100001001101000000000000000000001000100000000100000000000000000", 
    19 => "00000000000000000100001100000011000000000000000011000010101011100000000000000000", 
    20 => "00000000000000001100001001111000000000000000000001000010011111000000000000000000", 
    21 => "00000000000000000100001100100101000000000000000001000011001111010000000000000000", 
    22 => "00000000000000000100001111011011100000000000000011000001110110000000000000000000", 
    23 => "00000000000000000100000110000000000000000000000011000010001100000000000000000000", 
    24 => "00000000000000000100001100110010000000000000000011000001101110000000000000000000", 
    25 => "00000000000000001100001100000101000000000000000001000011101100100000000000000000", 
    26 => "00000000000000000100001110100000000000000000000001000011000010110000000000000000", 
    27 => "00000000000000001100001011110010000000000000000011000010000111000000000000000000", 
    28 => "00000000000000001100001100101000000000000000000001000011101100100000000000000000", 
    29 => "10000000000000000100001110101001000000000000000011000010100011000000000000000000", 
    30 => "00000000000000001100001001011100000000000000000001000001110000000000000000000000", 
    31 => "00000000000000001100001101011000000000000000000001000011011011000000000000000000", 
    32 => "00000000000000000100001010011110000000000000000001000011001100010000000000000000", 
    33 => "00000000000000001100001010100110000000000000000001000011010000110000000000000000", 
    34 => "00000000000000000100001011010010000000000000000001000001101110000000000000000000", 
    35 => "00000000000000000100001001110000000000000000000011000011001001110000000000000000", 
    36 => "00000000000000001100001011100010000000000000000011000001001000000000000000000000", 
    37 => "00000000000000000100000110101000000000000000000011000010011000000000000000000000", 
    38 => "00000000000000001100000001000000000000000000000001000011001110010000000000000000", 
    39 => "00000000000000001100001010001110000000000000000001000100000001100100000000000000", 
    40 => "00000000000000000100000111000000000000000000000011000010111011100000000000000000", 
    41 => "00000000000000001100001101101111000000000000000001000010110011000000000000000000", 
    42 => "00000000000000000100000110111000000000000000000011000010110110000000000000000000", 
    43 => "00000000000000001100001100100111000000000000000001000011000101100000000000000000", 
    44 => "00000000000000000100001101000111000000000000000001000011010101010000000000000000", 
    45 => "00000000000000000100001110010001000000000000000001000010100101100000000000000000", 
    46 => "00000000000000001100001110001110000000000000000001000100000001101100000000000000", 
    47 => "00000000000000000100001100000000000000000000000011000011000000100000000000000000", 
    48 => "00000000000000000100001100001001000000000000000001000010111001000000000000000000", 
    49 => "00000000000000000100001110111010000000000000000001000010000101000000000000000000", 
    50 => "00000000000000001100001001000100000000000000000001000010110110000000000000000000", 
    51 => "00000000000000000100001010110000000000000000000001000010111000100000000000000000", 
    52 => "00000000000000001100001100010010000000000000000001000011011011000000000000000000", 
    53 => "00000000000000000100001110000101100000000000000011000010101110000000000000000000", 
    54 => "00000000000000001100000100010000000000000000000000111111100000000000000000000000", 
    55 => "00000000000000001100001101111001000000000000000001000011010010100000000000000000", 
    56 => "00000000000000001100001100000101000000000000000001000001011000000000000000000000", 
    57 => "00000000000000000100001101101010000000000000000011000010110110100000000000000000", 
    58 => "00000000000000000100001100000110000000000000000001000011011000110000000000000000", 
    59 => "00000000000000000100001101110011000000000000000001000010110000100000000000000000", 
    60 => "00000000000000000100001101001001000000000000000011000010100110100000000000000000", 
    61 => "00000000000000001100001000000000000000000000000011000011011000010000000000000000", 
    62 => "00000000000000000100001010000010000000000000000001000010111000100000000000000000", 
    63 => "00000000000000001100000111111000000000000000000001000001011000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity linear_activationfYi is
    generic (
        DataWidth : INTEGER := 80;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of linear_activationfYi is
    component linear_activationfYi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    linear_activationfYi_rom_U :  component linear_activationfYi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


