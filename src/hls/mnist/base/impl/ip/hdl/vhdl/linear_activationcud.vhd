-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity linear_activationcud_rom is 
    generic(
             dwidth     : integer := 5; 
             awidth     : integer := 7; 
             mem_size    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of linear_activationcud_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "11100", 1 => "00001", 2 => "00110", 3 => "00010", 4 => "11011", 
    5 => "00011", 6 => "11111", 7 => "00011", 8 => "11111", 9 => "00000", 
    10 => "11110", 11 => "11011", 12 => "00010", 13 => "00000", 14 => "00010", 
    15 => "11110", 16 => "10110", 17 => "11111", 18 => "00010", 19 => "00101", 
    20 => "00010", 21 => "11100", 22 => "00001", 23 => "11001", 24 to 25=> "11111", 
    26 => "11110", 27 => "00000", 28 to 29=> "11100", 30 => "00110", 31 => "00011", 
    32 => "11100", 33 to 34=> "11110", 35 => "01001", 36 => "00001", 37 => "11010", 
    38 => "00110", 39 => "00010", 40 => "00011", 41 => "11100", 42 => "11111", 
    43 => "11001", 44 => "11111", 45 => "00010", 46 => "11101", 47 => "11100", 
    48 => "11110", 49 => "11101", 50 => "11010", 51 => "00000", 52 => "00011", 
    53 => "00111", 54 => "00100", 55 => "11110", 56 => "00110", 57 => "11100", 
    58 => "00000", 59 => "00101", 60 => "00011", 61 => "11111", 62 => "11101", 
    63 => "00011", 64 => "11101", 65 to 66=> "00000", 67 => "00001", 68 => "11011", 
    69 => "11110", 70 => "11000", 71 => "00101", 72 to 73=> "11100", 74 => "11101", 
    75 => "10111", 76 => "11110", 77 => "01001", 78 => "11100", 79 => "00001", 
    80 to 81=> "00011", 82 => "00000", 83 => "11100", 84 => "11101", 85 => "11010", 
    86 => "11110", 87 => "00011", 88 => "00000", 89 => "11111", 90 => "00001", 
    91 => "11101", 92 => "00001", 93 => "11110", 94 => "11001", 95 to 96=> "11110", 
    97 => "00000", 98 => "11001", 99 => "00001", 100 => "11010", 101 => "11101", 
    102 => "11011", 103 => "00010", 104 => "00000", 105 => "11011", 106 => "11111", 
    107 => "01001", 108 => "11111", 109 => "11110", 110 => "11010", 111 => "11111", 
    112 => "11101", 113 => "00100", 114 => "00001", 115 => "11100", 116 => "11110", 
    117 => "11010", 118 => "00100", 119 => "00000", 120 => "11010", 121 => "11100", 
    122 => "11110", 123 => "00010", 124 => "11001", 125 => "00011", 126 => "00101", 
    127 => "11100" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "select_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "distributed";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity linear_activationcud is
    generic (
        DataWidth : INTEGER := 5;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of linear_activationcud is
    component linear_activationcud_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    linear_activationcud_rom_U :  component linear_activationcud_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


