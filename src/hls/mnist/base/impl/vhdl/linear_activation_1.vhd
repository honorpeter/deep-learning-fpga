-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity linear_activation_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_in_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    data_in_V_V_empty_n : IN STD_LOGIC;
    data_in_V_V_read : OUT STD_LOGIC;
    data_out_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_out_V_V_full_n : IN STD_LOGIC;
    data_out_V_V_write : OUT STD_LOGIC );
end;


architecture behav of linear_activation_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal L2_WEIGHTS_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal L2_WEIGHTS_V_ce0 : STD_LOGIC;
    signal L2_WEIGHTS_V_q0 : STD_LOGIC_VECTOR (79 downto 0);
    signal L2_BIAS_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal L2_BIAS_V_ce0 : STD_LOGIC;
    signal L2_BIAS_V_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal data_in_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond5_reg_596 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_out_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond_reg_774 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter1_exitcond_reg_774 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_9_V_reg_159 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_8_V_reg_171 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_7_V_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_6_V_reg_195 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_5_V_reg_207 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_4_V_reg_219 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_3_V_reg_231 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_2_V_reg_243 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_1_V_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_0_V_reg_267 : STD_LOGIC_VECTOR (31 downto 0);
    signal ii_reg_279 : STD_LOGIC_VECTOR (7 downto 0);
    signal ires_reg_290 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond5_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond5_reg_596 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond5_reg_596 : STD_LOGIC_VECTOR (0 downto 0);
    signal ii_2_fu_308_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_V_1_reg_610 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_319_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_624 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_629 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_634 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_reg_639 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_reg_644 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_reg_649 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_reg_654 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_reg_659 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_reg_664 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_reg_669 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_416_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_674 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_1_fu_424_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_1_reg_679 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_2_fu_432_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_2_reg_684 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_3_fu_440_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_3_reg_689 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_4_fu_448_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_4_reg_694 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_5_fu_456_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_5_reg_699 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_6_fu_464_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_6_reg_704 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_7_fu_472_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_7_reg_709 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_8_fu_480_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_8_reg_714 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_9_fu_488_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_9_reg_719 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_0_V_1_fu_493_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal acc_1_V_1_fu_498_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_2_V_1_fu_503_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_3_V_1_fu_508_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_4_V_1_fu_513_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_5_V_1_fu_518_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_6_V_1_fu_523_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_7_V_1_fu_528_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_8_V_1_fu_533_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_9_V_1_fu_538_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state7_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal ires_1_fu_549_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ires_1_reg_778 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal tmp_V_fu_590_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_reg_788 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_phi_mux_ires_phi_fu_294_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_314_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_555_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal tmp_3_fu_416_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_1_fu_424_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_2_fu_432_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_3_fu_440_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_4_fu_448_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_5_fu_456_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_6_fu_464_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_7_fu_472_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_8_fu_480_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_9_fu_488_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_560_p12 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_586_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component mnist_mux_104_32_ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component linear_activationg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (79 downto 0) );
    end component;


    component linear_activationhbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;



begin
    L2_WEIGHTS_V_U : component linear_activationg8j
    generic map (
        DataWidth => 80,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => L2_WEIGHTS_V_address0,
        ce0 => L2_WEIGHTS_V_ce0,
        q0 => L2_WEIGHTS_V_q0);

    L2_BIAS_V_U : component linear_activationhbi
    generic map (
        DataWidth => 4,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => L2_BIAS_V_address0,
        ce0 => L2_BIAS_V_ce0,
        q0 => L2_BIAS_V_q0);

    mnist_mux_104_32_ibs_U147 : component mnist_mux_104_32_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => acc_0_V_reg_267,
        din1 => acc_1_V_reg_255,
        din2 => acc_2_V_reg_243,
        din3 => acc_3_V_reg_231,
        din4 => acc_4_V_reg_219,
        din5 => acc_5_V_reg_207,
        din6 => acc_6_V_reg_195,
        din7 => acc_7_V_reg_183,
        din8 => acc_8_V_reg_171,
        din9 => acc_9_V_reg_159,
        din10 => ires_reg_290,
        dout => tmp_16_fu_560_p12);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state7);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    acc_0_V_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_exitcond5_reg_596 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                acc_0_V_reg_267 <= acc_0_V_1_fu_493_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                acc_0_V_reg_267 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    acc_1_V_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_exitcond5_reg_596 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                acc_1_V_reg_255 <= acc_1_V_1_fu_498_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                acc_1_V_reg_255 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    acc_2_V_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_exitcond5_reg_596 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                acc_2_V_reg_243 <= acc_2_V_1_fu_503_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                acc_2_V_reg_243 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    acc_3_V_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_exitcond5_reg_596 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                acc_3_V_reg_231 <= acc_3_V_1_fu_508_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                acc_3_V_reg_231 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    acc_4_V_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_exitcond5_reg_596 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                acc_4_V_reg_219 <= acc_4_V_1_fu_513_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                acc_4_V_reg_219 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    acc_5_V_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_exitcond5_reg_596 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                acc_5_V_reg_207 <= acc_5_V_1_fu_518_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                acc_5_V_reg_207 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    acc_6_V_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_exitcond5_reg_596 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                acc_6_V_reg_195 <= acc_6_V_1_fu_523_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                acc_6_V_reg_195 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    acc_7_V_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_exitcond5_reg_596 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                acc_7_V_reg_183 <= acc_7_V_1_fu_528_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                acc_7_V_reg_183 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    acc_8_V_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_exitcond5_reg_596 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                acc_8_V_reg_171 <= acc_8_V_1_fu_533_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                acc_8_V_reg_171 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    acc_9_V_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_exitcond5_reg_596 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                acc_9_V_reg_159 <= acc_9_V_1_fu_538_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                acc_9_V_reg_159 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    ii_reg_279_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_302_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                ii_reg_279 <= ii_2_fu_308_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ii_reg_279 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    ires_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                ires_reg_290 <= ap_const_lv4_0;
            elsif (((exitcond_reg_774 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                ires_reg_290 <= ires_1_reg_778;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_reg_pp0_iter1_exitcond5_reg_596 <= exitcond5_reg_596;
                exitcond5_reg_596 <= exitcond5_fu_302_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_reg_pp0_iter2_exitcond5_reg_596 <= ap_reg_pp0_iter1_exitcond5_reg_596;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                ap_reg_pp1_iter1_exitcond_reg_774 <= exitcond_reg_774;
                exitcond_reg_774 <= exitcond_fu_543_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                ires_1_reg_778 <= ires_1_fu_549_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_reg_596 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_10_reg_649 <= L2_WEIGHTS_V_q0(47 downto 40);
                tmp_11_reg_654 <= L2_WEIGHTS_V_q0(55 downto 48);
                tmp_12_reg_659 <= L2_WEIGHTS_V_q0(63 downto 56);
                tmp_13_reg_664 <= L2_WEIGHTS_V_q0(71 downto 64);
                tmp_14_reg_669 <= L2_WEIGHTS_V_q0(79 downto 72);
                tmp_1_reg_624 <= tmp_1_fu_319_p1;
                tmp_4_reg_629 <= L2_WEIGHTS_V_q0(15 downto 8);
                tmp_5_reg_634 <= L2_WEIGHTS_V_q0(23 downto 16);
                tmp_6_reg_639 <= L2_WEIGHTS_V_q0(31 downto 24);
                tmp_9_reg_644 <= L2_WEIGHTS_V_q0(39 downto 32);
                tmp_V_1_reg_610 <= data_in_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter1_exitcond5_reg_596 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_12_1_reg_679 <= tmp_12_1_fu_424_p2;
                tmp_12_2_reg_684 <= tmp_12_2_fu_432_p2;
                tmp_12_3_reg_689 <= tmp_12_3_fu_440_p2;
                tmp_12_4_reg_694 <= tmp_12_4_fu_448_p2;
                tmp_12_5_reg_699 <= tmp_12_5_fu_456_p2;
                tmp_12_6_reg_704 <= tmp_12_6_fu_464_p2;
                tmp_12_7_reg_709 <= tmp_12_7_fu_472_p2;
                tmp_12_8_reg_714 <= tmp_12_8_fu_480_p2;
                tmp_12_9_reg_719 <= tmp_12_9_fu_488_p2;
                tmp_3_reg_674 <= tmp_3_fu_416_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_774 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                tmp_V_reg_788 <= tmp_V_fu_590_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter2, exitcond5_fu_302_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, exitcond_fu_543_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond5_fu_302_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond5_fu_302_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (exitcond_fu_543_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (exitcond_fu_543_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    L2_BIAS_V_address0 <= tmp_7_fu_555_p1(4 - 1 downto 0);

    L2_BIAS_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            L2_BIAS_V_ce0 <= ap_const_logic_1;
        else 
            L2_BIAS_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    L2_WEIGHTS_V_address0 <= tmp_s_fu_314_p1(7 - 1 downto 0);

    L2_WEIGHTS_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            L2_WEIGHTS_V_ce0 <= ap_const_logic_1;
        else 
            L2_WEIGHTS_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    acc_0_V_1_fu_493_p2 <= std_logic_vector(unsigned(acc_0_V_reg_267) + unsigned(tmp_3_reg_674));
    acc_1_V_1_fu_498_p2 <= std_logic_vector(unsigned(acc_1_V_reg_255) + unsigned(tmp_12_1_reg_679));
    acc_2_V_1_fu_503_p2 <= std_logic_vector(unsigned(acc_2_V_reg_243) + unsigned(tmp_12_2_reg_684));
    acc_3_V_1_fu_508_p2 <= std_logic_vector(unsigned(acc_3_V_reg_231) + unsigned(tmp_12_3_reg_689));
    acc_4_V_1_fu_513_p2 <= std_logic_vector(unsigned(acc_4_V_reg_219) + unsigned(tmp_12_4_reg_694));
    acc_5_V_1_fu_518_p2 <= std_logic_vector(unsigned(acc_5_V_reg_207) + unsigned(tmp_12_5_reg_699));
    acc_6_V_1_fu_523_p2 <= std_logic_vector(unsigned(acc_6_V_reg_195) + unsigned(tmp_12_6_reg_704));
    acc_7_V_1_fu_528_p2 <= std_logic_vector(unsigned(acc_7_V_reg_183) + unsigned(tmp_12_7_reg_709));
    acc_8_V_1_fu_533_p2 <= std_logic_vector(unsigned(acc_8_V_reg_171) + unsigned(tmp_12_8_reg_714));
    acc_9_V_1_fu_538_p2 <= std_logic_vector(unsigned(acc_9_V_reg_159) + unsigned(tmp_12_9_reg_719));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(data_in_V_V_empty_n, ap_enable_reg_pp0_iter1, exitcond5_reg_596)
    begin
                ap_block_pp0_stage0_11001 <= ((exitcond5_reg_596 = ap_const_lv1_0) and (data_in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(data_in_V_V_empty_n, ap_enable_reg_pp0_iter1, exitcond5_reg_596)
    begin
                ap_block_pp0_stage0_subdone <= ((exitcond5_reg_596 = ap_const_lv1_0) and (data_in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_01001_assign_proc : process(data_out_V_V_full_n, ap_enable_reg_pp1_iter2, ap_reg_pp1_iter1_exitcond_reg_774)
    begin
                ap_block_pp1_stage0_01001 <= ((ap_reg_pp1_iter1_exitcond_reg_774 = ap_const_lv1_0) and (data_out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_11001_assign_proc : process(data_out_V_V_full_n, ap_enable_reg_pp1_iter2, ap_reg_pp1_iter1_exitcond_reg_774)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_reg_pp1_iter1_exitcond_reg_774 = ap_const_lv1_0) and (data_out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(data_out_V_V_full_n, ap_enable_reg_pp1_iter2, ap_reg_pp1_iter1_exitcond_reg_774)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_reg_pp1_iter1_exitcond_reg_774 = ap_const_lv1_0) and (data_out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(data_in_V_V_empty_n, exitcond5_reg_596)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((exitcond5_reg_596 = ap_const_lv1_0) and (data_in_V_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_pp1_stage0_iter2_assign_proc : process(data_out_V_V_full_n, ap_reg_pp1_iter1_exitcond_reg_774)
    begin
                ap_block_state9_pp1_stage0_iter2 <= ((ap_reg_pp1_iter1_exitcond_reg_774 = ap_const_lv1_0) and (data_out_V_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond5_fu_302_p2)
    begin
        if ((exitcond5_fu_302_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state7_assign_proc : process(exitcond_fu_543_p2)
    begin
        if ((exitcond_fu_543_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_ires_phi_fu_294_p4_assign_proc : process(ap_block_pp1_stage0, exitcond_reg_774, ires_reg_290, ap_CS_fsm_pp1_stage0, ires_1_reg_778, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (exitcond_reg_774 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_ires_phi_fu_294_p4 <= ires_1_reg_778;
        else 
            ap_phi_mux_ires_phi_fu_294_p4 <= ires_reg_290;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    data_in_V_V_blk_n_assign_proc : process(data_in_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond5_reg_596)
    begin
        if (((exitcond5_reg_596 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_in_V_V_blk_n <= data_in_V_V_empty_n;
        else 
            data_in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_in_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond5_reg_596, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond5_reg_596 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_in_V_V_read <= ap_const_logic_1;
        else 
            data_in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_out_V_V_blk_n_assign_proc : process(data_out_V_V_full_n, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, ap_reg_pp1_iter1_exitcond_reg_774)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_reg_pp1_iter1_exitcond_reg_774 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            data_out_V_V_blk_n <= data_out_V_V_full_n;
        else 
            data_out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_out_V_V_din <= tmp_V_reg_788;

    data_out_V_V_write_assign_proc : process(ap_enable_reg_pp1_iter2, ap_reg_pp1_iter1_exitcond_reg_774, ap_block_pp1_stage0_11001)
    begin
        if (((ap_reg_pp1_iter1_exitcond_reg_774 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            data_out_V_V_write <= ap_const_logic_1;
        else 
            data_out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    exitcond5_fu_302_p2 <= "1" when (ii_reg_279 = ap_const_lv8_80) else "0";
    exitcond_fu_543_p2 <= "1" when (ap_phi_mux_ires_phi_fu_294_p4 = ap_const_lv4_A) else "0";
    ii_2_fu_308_p2 <= std_logic_vector(unsigned(ii_reg_279) + unsigned(ap_const_lv8_1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ires_1_fu_549_p2 <= std_logic_vector(unsigned(ap_phi_mux_ires_phi_fu_294_p4) + unsigned(ap_const_lv4_1));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_12_1_fu_424_p0 <= tmp_4_reg_629;
    tmp_12_1_fu_424_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_12_1_fu_424_p0) * signed(tmp_V_1_reg_610))), 32));
    tmp_12_2_fu_432_p0 <= tmp_5_reg_634;
    tmp_12_2_fu_432_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_12_2_fu_432_p0) * signed(tmp_V_1_reg_610))), 32));
    tmp_12_3_fu_440_p0 <= tmp_6_reg_639;
    tmp_12_3_fu_440_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_12_3_fu_440_p0) * signed(tmp_V_1_reg_610))), 32));
    tmp_12_4_fu_448_p0 <= tmp_9_reg_644;
    tmp_12_4_fu_448_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_12_4_fu_448_p0) * signed(tmp_V_1_reg_610))), 32));
    tmp_12_5_fu_456_p0 <= tmp_10_reg_649;
    tmp_12_5_fu_456_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_12_5_fu_456_p0) * signed(tmp_V_1_reg_610))), 32));
    tmp_12_6_fu_464_p0 <= tmp_11_reg_654;
    tmp_12_6_fu_464_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_12_6_fu_464_p0) * signed(tmp_V_1_reg_610))), 32));
    tmp_12_7_fu_472_p0 <= tmp_12_reg_659;
    tmp_12_7_fu_472_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_12_7_fu_472_p0) * signed(tmp_V_1_reg_610))), 32));
    tmp_12_8_fu_480_p0 <= tmp_13_reg_664;
    tmp_12_8_fu_480_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_12_8_fu_480_p0) * signed(tmp_V_1_reg_610))), 32));
    tmp_12_9_fu_488_p0 <= tmp_14_reg_669;
    tmp_12_9_fu_488_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_12_9_fu_488_p0) * signed(tmp_V_1_reg_610))), 32));
    tmp_1_fu_319_p1 <= L2_WEIGHTS_V_q0(8 - 1 downto 0);
    tmp_3_fu_416_p0 <= tmp_1_reg_624;
    tmp_3_fu_416_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_3_fu_416_p0) * signed(tmp_V_1_reg_610))), 32));
    tmp_7_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_ires_phi_fu_294_p4),64));
        tmp_8_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(L2_BIAS_V_q0),32));

    tmp_V_fu_590_p2 <= std_logic_vector(unsigned(tmp_16_fu_560_p12) + unsigned(tmp_8_fu_586_p1));
    tmp_s_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_reg_279),64));
end behav;
