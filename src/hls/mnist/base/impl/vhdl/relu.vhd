-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity relu is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_in_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    data_in_V_V_empty_n : IN STD_LOGIC;
    data_in_V_V_read : OUT STD_LOGIC;
    data_out_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_out_V_V_full_n : IN STD_LOGIC;
    data_out_V_V_write : OUT STD_LOGIC );
end;


architecture behav of relu is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal data_in_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_fu_78_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_out_V_V_blk_n : STD_LOGIC;
    signal tmp_fu_90_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ii_1_fu_84_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_predicate_op14_write_state2 : BOOLEAN;
    signal ap_predicate_op16_write_state2 : BOOLEAN;
    signal ap_block_state2 : BOOLEAN;
    signal ii_reg_67 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_condition_81 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not((((data_out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op16_write_state2 = ap_const_boolean_1)) or ((data_out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op14_write_state2 = ap_const_boolean_1)) or ((exitcond_fu_78_p2 = ap_const_lv1_0) and (data_in_V_V_empty_n = ap_const_logic_0)))) and (exitcond_fu_78_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ii_reg_67_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((data_out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op16_write_state2 = ap_const_boolean_1)) or ((data_out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op14_write_state2 = ap_const_boolean_1)) or ((exitcond_fu_78_p2 = ap_const_lv1_0) and (data_in_V_V_empty_n = ap_const_logic_0)))) and (exitcond_fu_78_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ii_reg_67 <= ii_1_fu_84_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ii_reg_67 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, data_in_V_V_empty_n, data_out_V_V_full_n, ap_CS_fsm_state2, exitcond_fu_78_p2, ap_predicate_op14_write_state2, ap_predicate_op16_write_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not((((data_out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op16_write_state2 = ap_const_boolean_1)) or ((data_out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op14_write_state2 = ap_const_boolean_1)) or ((exitcond_fu_78_p2 = ap_const_lv1_0) and (data_in_V_V_empty_n = ap_const_logic_0)))) and (exitcond_fu_78_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not((((data_out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op16_write_state2 = ap_const_boolean_1)) or ((data_out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op14_write_state2 = ap_const_boolean_1)) or ((exitcond_fu_78_p2 = ap_const_lv1_0) and (data_in_V_V_empty_n = ap_const_logic_0)))) and (exitcond_fu_78_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(data_in_V_V_empty_n, data_out_V_V_full_n, exitcond_fu_78_p2, ap_predicate_op14_write_state2, ap_predicate_op16_write_state2)
    begin
                ap_block_state2 <= (((data_out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op16_write_state2 = ap_const_boolean_1)) or ((data_out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op14_write_state2 = ap_const_boolean_1)) or ((exitcond_fu_78_p2 = ap_const_lv1_0) and (data_in_V_V_empty_n = ap_const_logic_0)));
    end process;


    ap_condition_81_assign_proc : process(data_in_V_V_empty_n, data_out_V_V_full_n, ap_CS_fsm_state2, exitcond_fu_78_p2, ap_predicate_op14_write_state2, ap_predicate_op16_write_state2)
    begin
                ap_condition_81 <= (not((((data_out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op16_write_state2 = ap_const_boolean_1)) or ((data_out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op14_write_state2 = ap_const_boolean_1)) or ((exitcond_fu_78_p2 = ap_const_lv1_0) and (data_in_V_V_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2));
    end process;


    ap_done_assign_proc : process(ap_done_reg, data_in_V_V_empty_n, data_out_V_V_full_n, ap_CS_fsm_state2, exitcond_fu_78_p2, ap_predicate_op14_write_state2, ap_predicate_op16_write_state2)
    begin
        if ((not((((data_out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op16_write_state2 = ap_const_boolean_1)) or ((data_out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op14_write_state2 = ap_const_boolean_1)) or ((exitcond_fu_78_p2 = ap_const_lv1_0) and (data_in_V_V_empty_n = ap_const_logic_0)))) and (exitcond_fu_78_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op14_write_state2_assign_proc : process(exitcond_fu_78_p2, tmp_fu_90_p2)
    begin
                ap_predicate_op14_write_state2 <= ((tmp_fu_90_p2 = ap_const_lv1_0) and (exitcond_fu_78_p2 = ap_const_lv1_0));
    end process;


    ap_predicate_op16_write_state2_assign_proc : process(exitcond_fu_78_p2, tmp_fu_90_p2)
    begin
                ap_predicate_op16_write_state2 <= ((tmp_fu_90_p2 = ap_const_lv1_1) and (exitcond_fu_78_p2 = ap_const_lv1_0));
    end process;

    ap_ready <= internal_ap_ready;

    data_in_V_V_blk_n_assign_proc : process(data_in_V_V_empty_n, ap_CS_fsm_state2, exitcond_fu_78_p2)
    begin
        if (((exitcond_fu_78_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_in_V_V_blk_n <= data_in_V_V_empty_n;
        else 
            data_in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_in_V_V_read_assign_proc : process(data_in_V_V_empty_n, data_out_V_V_full_n, ap_CS_fsm_state2, exitcond_fu_78_p2, ap_predicate_op14_write_state2, ap_predicate_op16_write_state2)
    begin
        if ((not((((data_out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op16_write_state2 = ap_const_boolean_1)) or ((data_out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op14_write_state2 = ap_const_boolean_1)) or ((exitcond_fu_78_p2 = ap_const_lv1_0) and (data_in_V_V_empty_n = ap_const_logic_0)))) and (exitcond_fu_78_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_in_V_V_read <= ap_const_logic_1;
        else 
            data_in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_out_V_V_blk_n_assign_proc : process(data_out_V_V_full_n, ap_CS_fsm_state2, exitcond_fu_78_p2, tmp_fu_90_p2)
    begin
        if ((((tmp_fu_90_p2 = ap_const_lv1_0) and (exitcond_fu_78_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_fu_90_p2 = ap_const_lv1_1) and (exitcond_fu_78_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            data_out_V_V_blk_n <= data_out_V_V_full_n;
        else 
            data_out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_out_V_V_din_assign_proc : process(data_in_V_V_dout, ap_predicate_op14_write_state2, ap_predicate_op16_write_state2, ap_condition_81)
    begin
        if ((ap_const_boolean_1 = ap_condition_81)) then
            if ((ap_predicate_op16_write_state2 = ap_const_boolean_1)) then 
                data_out_V_V_din <= data_in_V_V_dout;
            elsif ((ap_predicate_op14_write_state2 = ap_const_boolean_1)) then 
                data_out_V_V_din <= ap_const_lv32_0;
            else 
                data_out_V_V_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            data_out_V_V_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_out_V_V_write_assign_proc : process(data_in_V_V_empty_n, data_out_V_V_full_n, ap_CS_fsm_state2, exitcond_fu_78_p2, ap_predicate_op14_write_state2, ap_predicate_op16_write_state2)
    begin
        if (((not((((data_out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op16_write_state2 = ap_const_boolean_1)) or ((data_out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op14_write_state2 = ap_const_boolean_1)) or ((exitcond_fu_78_p2 = ap_const_lv1_0) and (data_in_V_V_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_predicate_op16_write_state2 = ap_const_boolean_1)) or (not((((data_out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op16_write_state2 = ap_const_boolean_1)) or ((data_out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op14_write_state2 = ap_const_boolean_1)) or ((exitcond_fu_78_p2 = ap_const_lv1_0) and (data_in_V_V_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_predicate_op14_write_state2 = ap_const_boolean_1)))) then 
            data_out_V_V_write <= ap_const_logic_1;
        else 
            data_out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_78_p2 <= "1" when (ii_reg_67 = ap_const_lv7_40) else "0";
    ii_1_fu_84_p2 <= std_logic_vector(unsigned(ii_reg_67) + unsigned(ap_const_lv7_1));

    internal_ap_ready_assign_proc : process(data_in_V_V_empty_n, data_out_V_V_full_n, ap_CS_fsm_state2, exitcond_fu_78_p2, ap_predicate_op14_write_state2, ap_predicate_op16_write_state2)
    begin
        if ((not((((data_out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op16_write_state2 = ap_const_boolean_1)) or ((data_out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op14_write_state2 = ap_const_boolean_1)) or ((exitcond_fu_78_p2 = ap_const_lv1_0) and (data_in_V_V_empty_n = ap_const_logic_0)))) and (exitcond_fu_78_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_90_p2 <= "1" when (signed(data_in_V_V_dout) > signed(ap_const_lv32_0)) else "0";
end behav;
