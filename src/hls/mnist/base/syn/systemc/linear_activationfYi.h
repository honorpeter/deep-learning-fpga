// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __linear_activationfYi_H__
#define __linear_activationfYi_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct linear_activationfYi_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 80;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(linear_activationfYi_ram) {
        ram[0] = "0b00000000000000000100001101000001000000000000000011000010100001000000000000000000";
        ram[1] = "0b00000000000000001100001101000010000000000000000011000011010000000000000000000000";
        ram[2] = "0b00000000000000000100001000101100000000000000000011000010110101000000000000000000";
        ram[3] = "0b00000000000000001100001011101000000000000000000001000011100011110000000000000000";
        ram[4] = "0b00000000000000000100001111010001100000000000000001000010000110000000000000000000";
        ram[5] = "0b00000000000000000100001010100000000000000000000011000001000100000000000000000000";
        ram[6] = "0b00000000000000001100001011000010000000000000000001000011101011011000000000000000";
        ram[7] = "0b00000000000000000100001111011101000000000000000001000011000101000000000000000000";
        ram[8] = "0b00000000000000000100001101100111000000000000000001000100000101100100000000000000";
        ram[9] = "0b00000000000000001100000111010000000000000000000001000011000110100000000000000000";
        ram[10] = "0b00000000000000000100000110100000000000000000000011000010111001000000000000000000";
        ram[11] = "0b00000000000000000100001110111110100000000000000001000011001110010000000000000000";
        ram[12] = "0b00000000000000000100001100000011000000000000000001000001111110000000000000000000";
        ram[13] = "0b00000000000000000100001101111001000000000000000011000000100000000000000000000000";
        ram[14] = "0b00000000000000001100001001010000000000000000000011000010100000000000000000000000";
        ram[15] = "0b00000000000000000100000010100000000000000000000001000011001011100000000000000000";
        ram[16] = "0b00000000000000000100001100010111000000000000000001000010011101000000000000000000";
        ram[17] = "0b00000000000000001100001010111100000000000000000001000011010111010000000000000000";
        ram[18] = "0b00000000000000001100001001101000000000000000000001000100000000100000000000000000";
        ram[19] = "0b00000000000000000100001100000011000000000000000011000010101011100000000000000000";
        ram[20] = "0b00000000000000001100001001111000000000000000000001000010011111000000000000000000";
        ram[21] = "0b00000000000000000100001100100101000000000000000001000011001111010000000000000000";
        ram[22] = "0b00000000000000000100001111011011100000000000000011000001110110000000000000000000";
        ram[23] = "0b00000000000000000100000110000000000000000000000011000010001100000000000000000000";
        ram[24] = "0b00000000000000000100001100110010000000000000000011000001101110000000000000000000";
        ram[25] = "0b00000000000000001100001100000101000000000000000001000011101100100000000000000000";
        ram[26] = "0b00000000000000000100001110100000000000000000000001000011000010110000000000000000";
        ram[27] = "0b00000000000000001100001011110010000000000000000011000010000111000000000000000000";
        ram[28] = "0b00000000000000001100001100101000000000000000000001000011101100100000000000000000";
        ram[29] = "0b10000000000000000100001110101001000000000000000011000010100011000000000000000000";
        ram[30] = "0b00000000000000001100001001011100000000000000000001000001110000000000000000000000";
        ram[31] = "0b00000000000000001100001101011000000000000000000001000011011011000000000000000000";
        ram[32] = "0b00000000000000000100001010011110000000000000000001000011001100010000000000000000";
        ram[33] = "0b00000000000000001100001010100110000000000000000001000011010000110000000000000000";
        ram[34] = "0b00000000000000000100001011010010000000000000000001000001101110000000000000000000";
        ram[35] = "0b00000000000000000100001001110000000000000000000011000011001001110000000000000000";
        ram[36] = "0b00000000000000001100001011100010000000000000000011000001001000000000000000000000";
        ram[37] = "0b00000000000000000100000110101000000000000000000011000010011000000000000000000000";
        ram[38] = "0b00000000000000001100000001000000000000000000000001000011001110010000000000000000";
        ram[39] = "0b00000000000000001100001010001110000000000000000001000100000001100100000000000000";
        ram[40] = "0b00000000000000000100000111000000000000000000000011000010111011100000000000000000";
        ram[41] = "0b00000000000000001100001101101111000000000000000001000010110011000000000000000000";
        ram[42] = "0b00000000000000000100000110111000000000000000000011000010110110000000000000000000";
        ram[43] = "0b00000000000000001100001100100111000000000000000001000011000101100000000000000000";
        ram[44] = "0b00000000000000000100001101000111000000000000000001000011010101010000000000000000";
        ram[45] = "0b00000000000000000100001110010001000000000000000001000010100101100000000000000000";
        ram[46] = "0b00000000000000001100001110001110000000000000000001000100000001101100000000000000";
        ram[47] = "0b00000000000000000100001100000000000000000000000011000011000000100000000000000000";
        ram[48] = "0b00000000000000000100001100001001000000000000000001000010111001000000000000000000";
        ram[49] = "0b00000000000000000100001110111010000000000000000001000010000101000000000000000000";
        ram[50] = "0b00000000000000001100001001000100000000000000000001000010110110000000000000000000";
        ram[51] = "0b00000000000000000100001010110000000000000000000001000010111000100000000000000000";
        ram[52] = "0b00000000000000001100001100010010000000000000000001000011011011000000000000000000";
        ram[53] = "0b00000000000000000100001110000101100000000000000011000010101110000000000000000000";
        ram[54] = "0b00000000000000001100000100010000000000000000000000111111100000000000000000000000";
        ram[55] = "0b00000000000000001100001101111001000000000000000001000011010010100000000000000000";
        ram[56] = "0b00000000000000001100001100000101000000000000000001000001011000000000000000000000";
        ram[57] = "0b00000000000000000100001101101010000000000000000011000010110110100000000000000000";
        ram[58] = "0b00000000000000000100001100000110000000000000000001000011011000110000000000000000";
        ram[59] = "0b00000000000000000100001101110011000000000000000001000010110000100000000000000000";
        ram[60] = "0b00000000000000000100001101001001000000000000000011000010100110100000000000000000";
        ram[61] = "0b00000000000000001100001000000000000000000000000011000011011000010000000000000000";
        ram[62] = "0b00000000000000000100001010000010000000000000000001000010111000100000000000000000";
        ram[63] = "0b00000000000000001100000111111000000000000000000001000001011000000000000000000000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(linear_activationfYi) {


static const unsigned DataWidth = 80;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


linear_activationfYi_ram* meminst;


SC_CTOR(linear_activationfYi) {
meminst = new linear_activationfYi_ram("linear_activationfYi_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~linear_activationfYi() {
    delete meminst;
}


};//endmodule
#endif
