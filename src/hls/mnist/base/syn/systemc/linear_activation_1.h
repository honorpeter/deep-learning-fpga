// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _linear_activation_1_HH_
#define _linear_activation_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "mnist_mux_104_32_ibs.h"
#include "linear_activationg8j.h"
#include "linear_activationhbi.h"

namespace ap_rtl {

struct linear_activation_1 : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<32> > data_in_V_V_dout;
    sc_in< sc_logic > data_in_V_V_empty_n;
    sc_out< sc_logic > data_in_V_V_read;
    sc_out< sc_lv<32> > data_out_V_V_din;
    sc_in< sc_logic > data_out_V_V_full_n;
    sc_out< sc_logic > data_out_V_V_write;


    // Module declarations
    linear_activation_1(sc_module_name name);
    SC_HAS_PROCESS(linear_activation_1);

    ~linear_activation_1();

    sc_trace_file* mVcdFile;

    linear_activationg8j* L2_WEIGHTS_V_U;
    linear_activationhbi* L2_BIAS_V_U;
    mnist_mux_104_32_ibs<1,1,32,32,32,32,32,32,32,32,32,32,4,32>* mnist_mux_104_32_ibs_U147;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_lv<7> > L2_WEIGHTS_V_address0;
    sc_signal< sc_logic > L2_WEIGHTS_V_ce0;
    sc_signal< sc_lv<80> > L2_WEIGHTS_V_q0;
    sc_signal< sc_lv<4> > L2_BIAS_V_address0;
    sc_signal< sc_logic > L2_BIAS_V_ce0;
    sc_signal< sc_lv<4> > L2_BIAS_V_q0;
    sc_signal< sc_logic > data_in_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond5_reg_596;
    sc_signal< sc_logic > data_out_V_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter2;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<1> > exitcond_reg_774;
    sc_signal< sc_lv<1> > ap_reg_pp1_iter1_exitcond_reg_774;
    sc_signal< sc_lv<32> > acc_9_V_reg_159;
    sc_signal< sc_lv<32> > acc_8_V_reg_171;
    sc_signal< sc_lv<32> > acc_7_V_reg_183;
    sc_signal< sc_lv<32> > acc_6_V_reg_195;
    sc_signal< sc_lv<32> > acc_5_V_reg_207;
    sc_signal< sc_lv<32> > acc_4_V_reg_219;
    sc_signal< sc_lv<32> > acc_3_V_reg_231;
    sc_signal< sc_lv<32> > acc_2_V_reg_243;
    sc_signal< sc_lv<32> > acc_1_V_reg_255;
    sc_signal< sc_lv<32> > acc_0_V_reg_267;
    sc_signal< sc_lv<8> > ii_reg_279;
    sc_signal< sc_lv<4> > ires_reg_290;
    sc_signal< sc_lv<1> > exitcond5_fu_302_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter1_exitcond5_reg_596;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter2_exitcond5_reg_596;
    sc_signal< sc_lv<8> > ii_2_fu_308_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<32> > tmp_V_1_reg_610;
    sc_signal< sc_lv<8> > tmp_1_fu_319_p1;
    sc_signal< sc_lv<8> > tmp_1_reg_624;
    sc_signal< sc_lv<8> > tmp_4_reg_629;
    sc_signal< sc_lv<8> > tmp_5_reg_634;
    sc_signal< sc_lv<8> > tmp_6_reg_639;
    sc_signal< sc_lv<8> > tmp_9_reg_644;
    sc_signal< sc_lv<8> > tmp_10_reg_649;
    sc_signal< sc_lv<8> > tmp_11_reg_654;
    sc_signal< sc_lv<8> > tmp_12_reg_659;
    sc_signal< sc_lv<8> > tmp_13_reg_664;
    sc_signal< sc_lv<8> > tmp_14_reg_669;
    sc_signal< sc_lv<32> > tmp_3_fu_416_p2;
    sc_signal< sc_lv<32> > tmp_3_reg_674;
    sc_signal< sc_lv<32> > tmp_12_1_fu_424_p2;
    sc_signal< sc_lv<32> > tmp_12_1_reg_679;
    sc_signal< sc_lv<32> > tmp_12_2_fu_432_p2;
    sc_signal< sc_lv<32> > tmp_12_2_reg_684;
    sc_signal< sc_lv<32> > tmp_12_3_fu_440_p2;
    sc_signal< sc_lv<32> > tmp_12_3_reg_689;
    sc_signal< sc_lv<32> > tmp_12_4_fu_448_p2;
    sc_signal< sc_lv<32> > tmp_12_4_reg_694;
    sc_signal< sc_lv<32> > tmp_12_5_fu_456_p2;
    sc_signal< sc_lv<32> > tmp_12_5_reg_699;
    sc_signal< sc_lv<32> > tmp_12_6_fu_464_p2;
    sc_signal< sc_lv<32> > tmp_12_6_reg_704;
    sc_signal< sc_lv<32> > tmp_12_7_fu_472_p2;
    sc_signal< sc_lv<32> > tmp_12_7_reg_709;
    sc_signal< sc_lv<32> > tmp_12_8_fu_480_p2;
    sc_signal< sc_lv<32> > tmp_12_8_reg_714;
    sc_signal< sc_lv<32> > tmp_12_9_fu_488_p2;
    sc_signal< sc_lv<32> > tmp_12_9_reg_719;
    sc_signal< sc_lv<32> > acc_0_V_1_fu_493_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_lv<32> > acc_1_V_1_fu_498_p2;
    sc_signal< sc_lv<32> > acc_2_V_1_fu_503_p2;
    sc_signal< sc_lv<32> > acc_3_V_1_fu_508_p2;
    sc_signal< sc_lv<32> > acc_4_V_1_fu_513_p2;
    sc_signal< sc_lv<32> > acc_5_V_1_fu_518_p2;
    sc_signal< sc_lv<32> > acc_6_V_1_fu_523_p2;
    sc_signal< sc_lv<32> > acc_7_V_1_fu_528_p2;
    sc_signal< sc_lv<32> > acc_8_V_1_fu_533_p2;
    sc_signal< sc_lv<32> > acc_9_V_1_fu_538_p2;
    sc_signal< sc_lv<1> > exitcond_fu_543_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< bool > ap_block_state7_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state8_pp1_stage0_iter1;
    sc_signal< bool > ap_block_state9_pp1_stage0_iter2;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<4> > ires_1_fu_549_p2;
    sc_signal< sc_lv<4> > ires_1_reg_778;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< sc_lv<32> > tmp_V_fu_590_p2;
    sc_signal< sc_lv<32> > tmp_V_reg_788;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state7;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< sc_lv<4> > ap_phi_mux_ires_phi_fu_294_p4;
    sc_signal< sc_lv<64> > tmp_s_fu_314_p1;
    sc_signal< sc_lv<64> > tmp_7_fu_555_p1;
    sc_signal< bool > ap_block_pp1_stage0_01001;
    sc_signal< sc_lv<8> > tmp_3_fu_416_p0;
    sc_signal< sc_lv<8> > tmp_12_1_fu_424_p0;
    sc_signal< sc_lv<8> > tmp_12_2_fu_432_p0;
    sc_signal< sc_lv<8> > tmp_12_3_fu_440_p0;
    sc_signal< sc_lv<8> > tmp_12_4_fu_448_p0;
    sc_signal< sc_lv<8> > tmp_12_5_fu_456_p0;
    sc_signal< sc_lv<8> > tmp_12_6_fu_464_p0;
    sc_signal< sc_lv<8> > tmp_12_7_fu_472_p0;
    sc_signal< sc_lv<8> > tmp_12_8_fu_480_p0;
    sc_signal< sc_lv<8> > tmp_12_9_fu_488_p0;
    sc_signal< sc_lv<32> > tmp_16_fu_560_p12;
    sc_signal< sc_lv<32> > tmp_8_fu_586_p1;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_pp0_stage0;
    static const sc_lv<5> ap_ST_fsm_state6;
    static const sc_lv<5> ap_ST_fsm_pp1_stage0;
    static const sc_lv<5> ap_ST_fsm_state10;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<8> ap_const_lv8_80;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_27;
    static const sc_lv<32> ap_const_lv32_28;
    static const sc_lv<32> ap_const_lv32_2F;
    static const sc_lv<32> ap_const_lv32_30;
    static const sc_lv<32> ap_const_lv32_37;
    static const sc_lv<32> ap_const_lv32_38;
    static const sc_lv<32> ap_const_lv32_3F;
    static const sc_lv<32> ap_const_lv32_40;
    static const sc_lv<32> ap_const_lv32_47;
    static const sc_lv<32> ap_const_lv32_48;
    static const sc_lv<32> ap_const_lv32_4F;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<32> ap_const_lv32_4;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_L2_BIAS_V_address0();
    void thread_L2_BIAS_V_ce0();
    void thread_L2_WEIGHTS_V_address0();
    void thread_L2_WEIGHTS_V_ce0();
    void thread_acc_0_V_1_fu_493_p2();
    void thread_acc_1_V_1_fu_498_p2();
    void thread_acc_2_V_1_fu_503_p2();
    void thread_acc_3_V_1_fu_508_p2();
    void thread_acc_4_V_1_fu_513_p2();
    void thread_acc_5_V_1_fu_518_p2();
    void thread_acc_6_V_1_fu_523_p2();
    void thread_acc_7_V_1_fu_528_p2();
    void thread_acc_8_V_1_fu_533_p2();
    void thread_acc_9_V_1_fu_538_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_01001();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_block_state7_pp1_stage0_iter0();
    void thread_ap_block_state8_pp1_stage0_iter1();
    void thread_ap_block_state9_pp1_stage0_iter2();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_condition_pp1_exit_iter0_state7();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_pp1();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp1();
    void thread_ap_phi_mux_ires_phi_fu_294_p4();
    void thread_ap_ready();
    void thread_data_in_V_V_blk_n();
    void thread_data_in_V_V_read();
    void thread_data_out_V_V_blk_n();
    void thread_data_out_V_V_din();
    void thread_data_out_V_V_write();
    void thread_exitcond5_fu_302_p2();
    void thread_exitcond_fu_543_p2();
    void thread_ii_2_fu_308_p2();
    void thread_internal_ap_ready();
    void thread_ires_1_fu_549_p2();
    void thread_real_start();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp_12_1_fu_424_p0();
    void thread_tmp_12_1_fu_424_p2();
    void thread_tmp_12_2_fu_432_p0();
    void thread_tmp_12_2_fu_432_p2();
    void thread_tmp_12_3_fu_440_p0();
    void thread_tmp_12_3_fu_440_p2();
    void thread_tmp_12_4_fu_448_p0();
    void thread_tmp_12_4_fu_448_p2();
    void thread_tmp_12_5_fu_456_p0();
    void thread_tmp_12_5_fu_456_p2();
    void thread_tmp_12_6_fu_464_p0();
    void thread_tmp_12_6_fu_464_p2();
    void thread_tmp_12_7_fu_472_p0();
    void thread_tmp_12_7_fu_472_p2();
    void thread_tmp_12_8_fu_480_p0();
    void thread_tmp_12_8_fu_480_p2();
    void thread_tmp_12_9_fu_488_p0();
    void thread_tmp_12_9_fu_488_p2();
    void thread_tmp_1_fu_319_p1();
    void thread_tmp_3_fu_416_p0();
    void thread_tmp_3_fu_416_p2();
    void thread_tmp_7_fu_555_p1();
    void thread_tmp_8_fu_586_p1();
    void thread_tmp_V_fu_590_p2();
    void thread_tmp_s_fu_314_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
