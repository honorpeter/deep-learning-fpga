// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mnist.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_lv<32> mnist::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<4> mnist::ap_const_lv4_0 = "0000";
const sc_lv<1> mnist::ap_const_lv1_0 = "0";
const sc_logic mnist::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mnist::ap_const_logic_0 = sc_dt::Log_0;

mnist::mnist(sc_module_name name) : sc_module(name), mVcdFile(0) {
    unpacker_U0 = new unpacker("unpacker_U0");
    unpacker_U0->ap_clk(ap_clk);
    unpacker_U0->ap_rst(ap_rst_n_inv);
    unpacker_U0->ap_start(unpacker_U0_ap_start);
    unpacker_U0->start_full_n(start_for_linear_activation_U0_full_n);
    unpacker_U0->ap_done(unpacker_U0_ap_done);
    unpacker_U0->ap_continue(unpacker_U0_ap_continue);
    unpacker_U0->ap_idle(unpacker_U0_ap_idle);
    unpacker_U0->ap_ready(unpacker_U0_ap_ready);
    unpacker_U0->start_out(unpacker_U0_start_out);
    unpacker_U0->start_write(unpacker_U0_start_write);
    unpacker_U0->sdata_in_TDATA(sdata_in_TDATA);
    unpacker_U0->sdata_in_TVALID(sdata_in_TVALID);
    unpacker_U0->sdata_in_TREADY(unpacker_U0_sdata_in_TREADY);
    unpacker_U0->sdata_in_TKEEP(sdata_in_TKEEP);
    unpacker_U0->sdata_in_TSTRB(sdata_in_TSTRB);
    unpacker_U0->sdata_in_TUSER(sdata_in_TUSER);
    unpacker_U0->sdata_in_TLAST(sdata_in_TLAST);
    unpacker_U0->sdata_in_TID(sdata_in_TID);
    unpacker_U0->sdata_in_TDEST(sdata_in_TDEST);
    unpacker_U0->stream_out_V_V_din(unpacker_U0_stream_out_V_V_din);
    unpacker_U0->stream_out_V_V_full_n(data_in_V_V_full_n);
    unpacker_U0->stream_out_V_V_write(unpacker_U0_stream_out_V_V_write);
    linear_activation_U0 = new linear_activation("linear_activation_U0");
    linear_activation_U0->ap_clk(ap_clk);
    linear_activation_U0->ap_rst(ap_rst_n_inv);
    linear_activation_U0->ap_start(linear_activation_U0_ap_start);
    linear_activation_U0->start_full_n(start_for_relu_U0_full_n);
    linear_activation_U0->ap_done(linear_activation_U0_ap_done);
    linear_activation_U0->ap_continue(linear_activation_U0_ap_continue);
    linear_activation_U0->ap_idle(linear_activation_U0_ap_idle);
    linear_activation_U0->ap_ready(linear_activation_U0_ap_ready);
    linear_activation_U0->start_out(linear_activation_U0_start_out);
    linear_activation_U0->start_write(linear_activation_U0_start_write);
    linear_activation_U0->data_in_V_V_dout(data_in_V_V_dout);
    linear_activation_U0->data_in_V_V_empty_n(data_in_V_V_empty_n);
    linear_activation_U0->data_in_V_V_read(linear_activation_U0_data_in_V_V_read);
    linear_activation_U0->data_out_V_V_din(linear_activation_U0_data_out_V_V_din);
    linear_activation_U0->data_out_V_V_full_n(l1_result_V_V_full_n);
    linear_activation_U0->data_out_V_V_write(linear_activation_U0_data_out_V_V_write);
    relu_U0 = new relu("relu_U0");
    relu_U0->ap_clk(ap_clk);
    relu_U0->ap_rst(ap_rst_n_inv);
    relu_U0->ap_start(relu_U0_ap_start);
    relu_U0->start_full_n(start_for_linear_activation_1_U0_full_n);
    relu_U0->ap_done(relu_U0_ap_done);
    relu_U0->ap_continue(relu_U0_ap_continue);
    relu_U0->ap_idle(relu_U0_ap_idle);
    relu_U0->ap_ready(relu_U0_ap_ready);
    relu_U0->start_out(relu_U0_start_out);
    relu_U0->start_write(relu_U0_start_write);
    relu_U0->data_in_V_V_dout(l1_result_V_V_dout);
    relu_U0->data_in_V_V_empty_n(l1_result_V_V_empty_n);
    relu_U0->data_in_V_V_read(relu_U0_data_in_V_V_read);
    relu_U0->data_out_V_V_din(relu_U0_data_out_V_V_din);
    relu_U0->data_out_V_V_full_n(l1_relu_V_V_full_n);
    relu_U0->data_out_V_V_write(relu_U0_data_out_V_V_write);
    linear_activation_1_U0 = new linear_activation_1("linear_activation_1_U0");
    linear_activation_1_U0->ap_clk(ap_clk);
    linear_activation_1_U0->ap_rst(ap_rst_n_inv);
    linear_activation_1_U0->ap_start(linear_activation_1_U0_ap_start);
    linear_activation_1_U0->start_full_n(start_for_packer_U0_full_n);
    linear_activation_1_U0->ap_done(linear_activation_1_U0_ap_done);
    linear_activation_1_U0->ap_continue(linear_activation_1_U0_ap_continue);
    linear_activation_1_U0->ap_idle(linear_activation_1_U0_ap_idle);
    linear_activation_1_U0->ap_ready(linear_activation_1_U0_ap_ready);
    linear_activation_1_U0->start_out(linear_activation_1_U0_start_out);
    linear_activation_1_U0->start_write(linear_activation_1_U0_start_write);
    linear_activation_1_U0->data_in_V_V_dout(l1_relu_V_V_dout);
    linear_activation_1_U0->data_in_V_V_empty_n(l1_relu_V_V_empty_n);
    linear_activation_1_U0->data_in_V_V_read(linear_activation_1_U0_data_in_V_V_read);
    linear_activation_1_U0->data_out_V_V_din(linear_activation_1_U0_data_out_V_V_din);
    linear_activation_1_U0->data_out_V_V_full_n(data_out_V_V_full_n);
    linear_activation_1_U0->data_out_V_V_write(linear_activation_1_U0_data_out_V_V_write);
    packer_U0 = new packer("packer_U0");
    packer_U0->ap_clk(ap_clk);
    packer_U0->ap_rst(ap_rst_n_inv);
    packer_U0->ap_start(packer_U0_ap_start);
    packer_U0->ap_done(packer_U0_ap_done);
    packer_U0->ap_continue(packer_U0_ap_continue);
    packer_U0->ap_idle(packer_U0_ap_idle);
    packer_U0->ap_ready(packer_U0_ap_ready);
    packer_U0->stream_in_V_V_dout(data_out_V_V_dout);
    packer_U0->stream_in_V_V_empty_n(data_out_V_V_empty_n);
    packer_U0->stream_in_V_V_read(packer_U0_stream_in_V_V_read);
    packer_U0->sdata_out_TDATA(packer_U0_sdata_out_TDATA);
    packer_U0->sdata_out_TVALID(packer_U0_sdata_out_TVALID);
    packer_U0->sdata_out_TREADY(sdata_out_TREADY);
    packer_U0->sdata_out_TKEEP(packer_U0_sdata_out_TKEEP);
    packer_U0->sdata_out_TSTRB(packer_U0_sdata_out_TSTRB);
    packer_U0->sdata_out_TUSER(packer_U0_sdata_out_TUSER);
    packer_U0->sdata_out_TLAST(packer_U0_sdata_out_TLAST);
    packer_U0->sdata_out_TID(packer_U0_sdata_out_TID);
    packer_U0->sdata_out_TDEST(packer_U0_sdata_out_TDEST);
    data_in_V_V_U = new fifo_w8_d1_A("data_in_V_V_U");
    data_in_V_V_U->clk(ap_clk);
    data_in_V_V_U->reset(ap_rst_n_inv);
    data_in_V_V_U->if_read_ce(ap_var_for_const0);
    data_in_V_V_U->if_write_ce(ap_var_for_const0);
    data_in_V_V_U->if_din(unpacker_U0_stream_out_V_V_din);
    data_in_V_V_U->if_full_n(data_in_V_V_full_n);
    data_in_V_V_U->if_write(unpacker_U0_stream_out_V_V_write);
    data_in_V_V_U->if_dout(data_in_V_V_dout);
    data_in_V_V_U->if_empty_n(data_in_V_V_empty_n);
    data_in_V_V_U->if_read(linear_activation_U0_data_in_V_V_read);
    l1_result_V_V_U = new fifo_w32_d1_A("l1_result_V_V_U");
    l1_result_V_V_U->clk(ap_clk);
    l1_result_V_V_U->reset(ap_rst_n_inv);
    l1_result_V_V_U->if_read_ce(ap_var_for_const0);
    l1_result_V_V_U->if_write_ce(ap_var_for_const0);
    l1_result_V_V_U->if_din(linear_activation_U0_data_out_V_V_din);
    l1_result_V_V_U->if_full_n(l1_result_V_V_full_n);
    l1_result_V_V_U->if_write(linear_activation_U0_data_out_V_V_write);
    l1_result_V_V_U->if_dout(l1_result_V_V_dout);
    l1_result_V_V_U->if_empty_n(l1_result_V_V_empty_n);
    l1_result_V_V_U->if_read(relu_U0_data_in_V_V_read);
    l1_relu_V_V_U = new fifo_w32_d1_A("l1_relu_V_V_U");
    l1_relu_V_V_U->clk(ap_clk);
    l1_relu_V_V_U->reset(ap_rst_n_inv);
    l1_relu_V_V_U->if_read_ce(ap_var_for_const0);
    l1_relu_V_V_U->if_write_ce(ap_var_for_const0);
    l1_relu_V_V_U->if_din(relu_U0_data_out_V_V_din);
    l1_relu_V_V_U->if_full_n(l1_relu_V_V_full_n);
    l1_relu_V_V_U->if_write(relu_U0_data_out_V_V_write);
    l1_relu_V_V_U->if_dout(l1_relu_V_V_dout);
    l1_relu_V_V_U->if_empty_n(l1_relu_V_V_empty_n);
    l1_relu_V_V_U->if_read(linear_activation_1_U0_data_in_V_V_read);
    data_out_V_V_U = new fifo_w32_d1_A("data_out_V_V_U");
    data_out_V_V_U->clk(ap_clk);
    data_out_V_V_U->reset(ap_rst_n_inv);
    data_out_V_V_U->if_read_ce(ap_var_for_const0);
    data_out_V_V_U->if_write_ce(ap_var_for_const0);
    data_out_V_V_U->if_din(linear_activation_1_U0_data_out_V_V_din);
    data_out_V_V_U->if_full_n(data_out_V_V_full_n);
    data_out_V_V_U->if_write(linear_activation_1_U0_data_out_V_V_write);
    data_out_V_V_U->if_dout(data_out_V_V_dout);
    data_out_V_V_U->if_empty_n(data_out_V_V_empty_n);
    data_out_V_V_U->if_read(packer_U0_stream_in_V_V_read);
    start_for_linear_mb6_U = new start_for_linear_mb6("start_for_linear_mb6_U");
    start_for_linear_mb6_U->clk(ap_clk);
    start_for_linear_mb6_U->reset(ap_rst_n_inv);
    start_for_linear_mb6_U->if_read_ce(ap_var_for_const0);
    start_for_linear_mb6_U->if_write_ce(ap_var_for_const0);
    start_for_linear_mb6_U->if_din(start_for_linear_activation_U0_din);
    start_for_linear_mb6_U->if_full_n(start_for_linear_activation_U0_full_n);
    start_for_linear_mb6_U->if_write(unpacker_U0_start_write);
    start_for_linear_mb6_U->if_dout(start_for_linear_activation_U0_dout);
    start_for_linear_mb6_U->if_empty_n(start_for_linear_activation_U0_empty_n);
    start_for_linear_mb6_U->if_read(linear_activation_U0_ap_ready);
    start_for_relu_U0_U = new start_for_relu_U0("start_for_relu_U0_U");
    start_for_relu_U0_U->clk(ap_clk);
    start_for_relu_U0_U->reset(ap_rst_n_inv);
    start_for_relu_U0_U->if_read_ce(ap_var_for_const0);
    start_for_relu_U0_U->if_write_ce(ap_var_for_const0);
    start_for_relu_U0_U->if_din(start_for_relu_U0_din);
    start_for_relu_U0_U->if_full_n(start_for_relu_U0_full_n);
    start_for_relu_U0_U->if_write(linear_activation_U0_start_write);
    start_for_relu_U0_U->if_dout(start_for_relu_U0_dout);
    start_for_relu_U0_U->if_empty_n(start_for_relu_U0_empty_n);
    start_for_relu_U0_U->if_read(relu_U0_ap_ready);
    start_for_linear_ncg_U = new start_for_linear_ncg("start_for_linear_ncg_U");
    start_for_linear_ncg_U->clk(ap_clk);
    start_for_linear_ncg_U->reset(ap_rst_n_inv);
    start_for_linear_ncg_U->if_read_ce(ap_var_for_const0);
    start_for_linear_ncg_U->if_write_ce(ap_var_for_const0);
    start_for_linear_ncg_U->if_din(start_for_linear_activation_1_U0_din);
    start_for_linear_ncg_U->if_full_n(start_for_linear_activation_1_U0_full_n);
    start_for_linear_ncg_U->if_write(relu_U0_start_write);
    start_for_linear_ncg_U->if_dout(start_for_linear_activation_1_U0_dout);
    start_for_linear_ncg_U->if_empty_n(start_for_linear_activation_1_U0_empty_n);
    start_for_linear_ncg_U->if_read(linear_activation_1_U0_ap_ready);
    start_for_packer_U0_U = new start_for_packer_U0("start_for_packer_U0_U");
    start_for_packer_U0_U->clk(ap_clk);
    start_for_packer_U0_U->reset(ap_rst_n_inv);
    start_for_packer_U0_U->if_read_ce(ap_var_for_const0);
    start_for_packer_U0_U->if_write_ce(ap_var_for_const0);
    start_for_packer_U0_U->if_din(start_for_packer_U0_din);
    start_for_packer_U0_U->if_full_n(start_for_packer_U0_full_n);
    start_for_packer_U0_U->if_write(linear_activation_1_U0_start_write);
    start_for_packer_U0_U->if_dout(start_for_packer_U0_dout);
    start_for_packer_U0_U->if_empty_n(start_for_packer_U0_empty_n);
    start_for_packer_U0_U->if_read(packer_U0_ap_ready);

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_linear_activation_1_U0_ap_continue);

    SC_METHOD(thread_linear_activation_1_U0_ap_start);
    sensitive << ( start_for_linear_activation_1_U0_empty_n );

    SC_METHOD(thread_linear_activation_U0_ap_continue);

    SC_METHOD(thread_linear_activation_U0_ap_start);
    sensitive << ( start_for_linear_activation_U0_empty_n );

    SC_METHOD(thread_packer_U0_ap_continue);

    SC_METHOD(thread_packer_U0_ap_start);
    sensitive << ( start_for_packer_U0_empty_n );

    SC_METHOD(thread_packer_U0_start_full_n);

    SC_METHOD(thread_packer_U0_start_write);

    SC_METHOD(thread_relu_U0_ap_continue);

    SC_METHOD(thread_relu_U0_ap_start);
    sensitive << ( start_for_relu_U0_empty_n );

    SC_METHOD(thread_sdata_in_TREADY);
    sensitive << ( unpacker_U0_sdata_in_TREADY );

    SC_METHOD(thread_sdata_out_TDATA);
    sensitive << ( packer_U0_sdata_out_TDATA );

    SC_METHOD(thread_sdata_out_TDEST);
    sensitive << ( packer_U0_sdata_out_TDEST );

    SC_METHOD(thread_sdata_out_TID);
    sensitive << ( packer_U0_sdata_out_TID );

    SC_METHOD(thread_sdata_out_TKEEP);
    sensitive << ( packer_U0_sdata_out_TKEEP );

    SC_METHOD(thread_sdata_out_TLAST);
    sensitive << ( packer_U0_sdata_out_TLAST );

    SC_METHOD(thread_sdata_out_TSTRB);
    sensitive << ( packer_U0_sdata_out_TSTRB );

    SC_METHOD(thread_sdata_out_TUSER);
    sensitive << ( packer_U0_sdata_out_TUSER );

    SC_METHOD(thread_sdata_out_TVALID);
    sensitive << ( packer_U0_sdata_out_TVALID );

    SC_METHOD(thread_start_for_linear_activation_1_U0_din);

    SC_METHOD(thread_start_for_linear_activation_U0_din);

    SC_METHOD(thread_start_for_packer_U0_din);

    SC_METHOD(thread_start_for_relu_U0_din);

    SC_METHOD(thread_unpacker_U0_ap_continue);

    SC_METHOD(thread_unpacker_U0_ap_start);

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mnist_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, sdata_in_TDATA, "(port)sdata_in_TDATA");
    sc_trace(mVcdFile, sdata_in_TKEEP, "(port)sdata_in_TKEEP");
    sc_trace(mVcdFile, sdata_in_TSTRB, "(port)sdata_in_TSTRB");
    sc_trace(mVcdFile, sdata_in_TUSER, "(port)sdata_in_TUSER");
    sc_trace(mVcdFile, sdata_in_TLAST, "(port)sdata_in_TLAST");
    sc_trace(mVcdFile, sdata_in_TID, "(port)sdata_in_TID");
    sc_trace(mVcdFile, sdata_in_TDEST, "(port)sdata_in_TDEST");
    sc_trace(mVcdFile, sdata_out_TDATA, "(port)sdata_out_TDATA");
    sc_trace(mVcdFile, sdata_out_TKEEP, "(port)sdata_out_TKEEP");
    sc_trace(mVcdFile, sdata_out_TSTRB, "(port)sdata_out_TSTRB");
    sc_trace(mVcdFile, sdata_out_TUSER, "(port)sdata_out_TUSER");
    sc_trace(mVcdFile, sdata_out_TLAST, "(port)sdata_out_TLAST");
    sc_trace(mVcdFile, sdata_out_TID, "(port)sdata_out_TID");
    sc_trace(mVcdFile, sdata_out_TDEST, "(port)sdata_out_TDEST");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, sdata_in_TVALID, "(port)sdata_in_TVALID");
    sc_trace(mVcdFile, sdata_in_TREADY, "(port)sdata_in_TREADY");
    sc_trace(mVcdFile, sdata_out_TVALID, "(port)sdata_out_TVALID");
    sc_trace(mVcdFile, sdata_out_TREADY, "(port)sdata_out_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, unpacker_U0_ap_start, "unpacker_U0_ap_start");
    sc_trace(mVcdFile, unpacker_U0_ap_done, "unpacker_U0_ap_done");
    sc_trace(mVcdFile, unpacker_U0_ap_continue, "unpacker_U0_ap_continue");
    sc_trace(mVcdFile, unpacker_U0_ap_idle, "unpacker_U0_ap_idle");
    sc_trace(mVcdFile, unpacker_U0_ap_ready, "unpacker_U0_ap_ready");
    sc_trace(mVcdFile, unpacker_U0_start_out, "unpacker_U0_start_out");
    sc_trace(mVcdFile, unpacker_U0_start_write, "unpacker_U0_start_write");
    sc_trace(mVcdFile, unpacker_U0_sdata_in_TREADY, "unpacker_U0_sdata_in_TREADY");
    sc_trace(mVcdFile, unpacker_U0_stream_out_V_V_din, "unpacker_U0_stream_out_V_V_din");
    sc_trace(mVcdFile, unpacker_U0_stream_out_V_V_write, "unpacker_U0_stream_out_V_V_write");
    sc_trace(mVcdFile, linear_activation_U0_ap_start, "linear_activation_U0_ap_start");
    sc_trace(mVcdFile, linear_activation_U0_ap_done, "linear_activation_U0_ap_done");
    sc_trace(mVcdFile, linear_activation_U0_ap_continue, "linear_activation_U0_ap_continue");
    sc_trace(mVcdFile, linear_activation_U0_ap_idle, "linear_activation_U0_ap_idle");
    sc_trace(mVcdFile, linear_activation_U0_ap_ready, "linear_activation_U0_ap_ready");
    sc_trace(mVcdFile, linear_activation_U0_start_out, "linear_activation_U0_start_out");
    sc_trace(mVcdFile, linear_activation_U0_start_write, "linear_activation_U0_start_write");
    sc_trace(mVcdFile, linear_activation_U0_data_in_V_V_read, "linear_activation_U0_data_in_V_V_read");
    sc_trace(mVcdFile, linear_activation_U0_data_out_V_V_din, "linear_activation_U0_data_out_V_V_din");
    sc_trace(mVcdFile, linear_activation_U0_data_out_V_V_write, "linear_activation_U0_data_out_V_V_write");
    sc_trace(mVcdFile, relu_U0_ap_start, "relu_U0_ap_start");
    sc_trace(mVcdFile, relu_U0_ap_done, "relu_U0_ap_done");
    sc_trace(mVcdFile, relu_U0_ap_continue, "relu_U0_ap_continue");
    sc_trace(mVcdFile, relu_U0_ap_idle, "relu_U0_ap_idle");
    sc_trace(mVcdFile, relu_U0_ap_ready, "relu_U0_ap_ready");
    sc_trace(mVcdFile, relu_U0_start_out, "relu_U0_start_out");
    sc_trace(mVcdFile, relu_U0_start_write, "relu_U0_start_write");
    sc_trace(mVcdFile, relu_U0_data_in_V_V_read, "relu_U0_data_in_V_V_read");
    sc_trace(mVcdFile, relu_U0_data_out_V_V_din, "relu_U0_data_out_V_V_din");
    sc_trace(mVcdFile, relu_U0_data_out_V_V_write, "relu_U0_data_out_V_V_write");
    sc_trace(mVcdFile, linear_activation_1_U0_ap_start, "linear_activation_1_U0_ap_start");
    sc_trace(mVcdFile, linear_activation_1_U0_ap_done, "linear_activation_1_U0_ap_done");
    sc_trace(mVcdFile, linear_activation_1_U0_ap_continue, "linear_activation_1_U0_ap_continue");
    sc_trace(mVcdFile, linear_activation_1_U0_ap_idle, "linear_activation_1_U0_ap_idle");
    sc_trace(mVcdFile, linear_activation_1_U0_ap_ready, "linear_activation_1_U0_ap_ready");
    sc_trace(mVcdFile, linear_activation_1_U0_start_out, "linear_activation_1_U0_start_out");
    sc_trace(mVcdFile, linear_activation_1_U0_start_write, "linear_activation_1_U0_start_write");
    sc_trace(mVcdFile, linear_activation_1_U0_data_in_V_V_read, "linear_activation_1_U0_data_in_V_V_read");
    sc_trace(mVcdFile, linear_activation_1_U0_data_out_V_V_din, "linear_activation_1_U0_data_out_V_V_din");
    sc_trace(mVcdFile, linear_activation_1_U0_data_out_V_V_write, "linear_activation_1_U0_data_out_V_V_write");
    sc_trace(mVcdFile, packer_U0_ap_start, "packer_U0_ap_start");
    sc_trace(mVcdFile, packer_U0_ap_done, "packer_U0_ap_done");
    sc_trace(mVcdFile, packer_U0_ap_continue, "packer_U0_ap_continue");
    sc_trace(mVcdFile, packer_U0_ap_idle, "packer_U0_ap_idle");
    sc_trace(mVcdFile, packer_U0_ap_ready, "packer_U0_ap_ready");
    sc_trace(mVcdFile, packer_U0_stream_in_V_V_read, "packer_U0_stream_in_V_V_read");
    sc_trace(mVcdFile, packer_U0_sdata_out_TDATA, "packer_U0_sdata_out_TDATA");
    sc_trace(mVcdFile, packer_U0_sdata_out_TVALID, "packer_U0_sdata_out_TVALID");
    sc_trace(mVcdFile, packer_U0_sdata_out_TKEEP, "packer_U0_sdata_out_TKEEP");
    sc_trace(mVcdFile, packer_U0_sdata_out_TSTRB, "packer_U0_sdata_out_TSTRB");
    sc_trace(mVcdFile, packer_U0_sdata_out_TUSER, "packer_U0_sdata_out_TUSER");
    sc_trace(mVcdFile, packer_U0_sdata_out_TLAST, "packer_U0_sdata_out_TLAST");
    sc_trace(mVcdFile, packer_U0_sdata_out_TID, "packer_U0_sdata_out_TID");
    sc_trace(mVcdFile, packer_U0_sdata_out_TDEST, "packer_U0_sdata_out_TDEST");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, data_in_V_V_full_n, "data_in_V_V_full_n");
    sc_trace(mVcdFile, data_in_V_V_dout, "data_in_V_V_dout");
    sc_trace(mVcdFile, data_in_V_V_empty_n, "data_in_V_V_empty_n");
    sc_trace(mVcdFile, l1_result_V_V_full_n, "l1_result_V_V_full_n");
    sc_trace(mVcdFile, l1_result_V_V_dout, "l1_result_V_V_dout");
    sc_trace(mVcdFile, l1_result_V_V_empty_n, "l1_result_V_V_empty_n");
    sc_trace(mVcdFile, l1_relu_V_V_full_n, "l1_relu_V_V_full_n");
    sc_trace(mVcdFile, l1_relu_V_V_dout, "l1_relu_V_V_dout");
    sc_trace(mVcdFile, l1_relu_V_V_empty_n, "l1_relu_V_V_empty_n");
    sc_trace(mVcdFile, data_out_V_V_full_n, "data_out_V_V_full_n");
    sc_trace(mVcdFile, data_out_V_V_dout, "data_out_V_V_dout");
    sc_trace(mVcdFile, data_out_V_V_empty_n, "data_out_V_V_empty_n");
    sc_trace(mVcdFile, start_for_linear_activation_U0_din, "start_for_linear_activation_U0_din");
    sc_trace(mVcdFile, start_for_linear_activation_U0_full_n, "start_for_linear_activation_U0_full_n");
    sc_trace(mVcdFile, start_for_linear_activation_U0_dout, "start_for_linear_activation_U0_dout");
    sc_trace(mVcdFile, start_for_linear_activation_U0_empty_n, "start_for_linear_activation_U0_empty_n");
    sc_trace(mVcdFile, start_for_relu_U0_din, "start_for_relu_U0_din");
    sc_trace(mVcdFile, start_for_relu_U0_full_n, "start_for_relu_U0_full_n");
    sc_trace(mVcdFile, start_for_relu_U0_dout, "start_for_relu_U0_dout");
    sc_trace(mVcdFile, start_for_relu_U0_empty_n, "start_for_relu_U0_empty_n");
    sc_trace(mVcdFile, start_for_linear_activation_1_U0_din, "start_for_linear_activation_1_U0_din");
    sc_trace(mVcdFile, start_for_linear_activation_1_U0_full_n, "start_for_linear_activation_1_U0_full_n");
    sc_trace(mVcdFile, start_for_linear_activation_1_U0_dout, "start_for_linear_activation_1_U0_dout");
    sc_trace(mVcdFile, start_for_linear_activation_1_U0_empty_n, "start_for_linear_activation_1_U0_empty_n");
    sc_trace(mVcdFile, start_for_packer_U0_din, "start_for_packer_U0_din");
    sc_trace(mVcdFile, start_for_packer_U0_full_n, "start_for_packer_U0_full_n");
    sc_trace(mVcdFile, start_for_packer_U0_dout, "start_for_packer_U0_dout");
    sc_trace(mVcdFile, start_for_packer_U0_empty_n, "start_for_packer_U0_empty_n");
    sc_trace(mVcdFile, packer_U0_start_full_n, "packer_U0_start_full_n");
    sc_trace(mVcdFile, packer_U0_start_write, "packer_U0_start_write");
#endif

    }
    mHdltvinHandle.open("mnist.hdltvin.dat");
    mHdltvoutHandle.open("mnist.hdltvout.dat");
}

mnist::~mnist() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete unpacker_U0;
    delete linear_activation_U0;
    delete relu_U0;
    delete linear_activation_1_U0;
    delete packer_U0;
    delete data_in_V_V_U;
    delete l1_result_V_V_U;
    delete l1_relu_V_V_U;
    delete data_out_V_V_U;
    delete start_for_linear_mb6_U;
    delete start_for_relu_U0_U;
    delete start_for_linear_ncg_U;
    delete start_for_packer_U0_U;
}

void mnist::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void mnist::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void mnist::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_0;
}

void mnist::thread_linear_activation_1_U0_ap_continue() {
    linear_activation_1_U0_ap_continue = ap_const_logic_1;
}

void mnist::thread_linear_activation_1_U0_ap_start() {
    linear_activation_1_U0_ap_start = start_for_linear_activation_1_U0_empty_n.read();
}

void mnist::thread_linear_activation_U0_ap_continue() {
    linear_activation_U0_ap_continue = ap_const_logic_1;
}

void mnist::thread_linear_activation_U0_ap_start() {
    linear_activation_U0_ap_start = start_for_linear_activation_U0_empty_n.read();
}

void mnist::thread_packer_U0_ap_continue() {
    packer_U0_ap_continue = ap_const_logic_1;
}

void mnist::thread_packer_U0_ap_start() {
    packer_U0_ap_start = start_for_packer_U0_empty_n.read();
}

void mnist::thread_packer_U0_start_full_n() {
    packer_U0_start_full_n = ap_const_logic_1;
}

void mnist::thread_packer_U0_start_write() {
    packer_U0_start_write = ap_const_logic_0;
}

void mnist::thread_relu_U0_ap_continue() {
    relu_U0_ap_continue = ap_const_logic_1;
}

void mnist::thread_relu_U0_ap_start() {
    relu_U0_ap_start = start_for_relu_U0_empty_n.read();
}

void mnist::thread_sdata_in_TREADY() {
    sdata_in_TREADY = unpacker_U0_sdata_in_TREADY.read();
}

void mnist::thread_sdata_out_TDATA() {
    sdata_out_TDATA = packer_U0_sdata_out_TDATA.read();
}

void mnist::thread_sdata_out_TDEST() {
    sdata_out_TDEST = packer_U0_sdata_out_TDEST.read();
}

void mnist::thread_sdata_out_TID() {
    sdata_out_TID = packer_U0_sdata_out_TID.read();
}

void mnist::thread_sdata_out_TKEEP() {
    sdata_out_TKEEP = packer_U0_sdata_out_TKEEP.read();
}

void mnist::thread_sdata_out_TLAST() {
    sdata_out_TLAST = packer_U0_sdata_out_TLAST.read();
}

void mnist::thread_sdata_out_TSTRB() {
    sdata_out_TSTRB = packer_U0_sdata_out_TSTRB.read();
}

void mnist::thread_sdata_out_TUSER() {
    sdata_out_TUSER = packer_U0_sdata_out_TUSER.read();
}

void mnist::thread_sdata_out_TVALID() {
    sdata_out_TVALID = packer_U0_sdata_out_TVALID.read();
}

void mnist::thread_start_for_linear_activation_1_U0_din() {
    start_for_linear_activation_1_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void mnist::thread_start_for_linear_activation_U0_din() {
    start_for_linear_activation_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void mnist::thread_start_for_packer_U0_din() {
    start_for_packer_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void mnist::thread_start_for_relu_U0_din() {
    start_for_relu_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void mnist::thread_unpacker_U0_ap_continue() {
    unpacker_U0_ap_continue = ap_const_logic_1;
}

void mnist::thread_unpacker_U0_ap_start() {
    unpacker_U0_ap_start = ap_const_logic_1;
}

void mnist::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"sdata_in_TDATA\" :  \"" << sdata_in_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sdata_in_TKEEP\" :  \"" << sdata_in_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sdata_in_TSTRB\" :  \"" << sdata_in_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sdata_in_TUSER\" :  \"" << sdata_in_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sdata_in_TLAST\" :  \"" << sdata_in_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sdata_in_TID\" :  \"" << sdata_in_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sdata_in_TDEST\" :  \"" << sdata_in_TDEST.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"sdata_out_TDATA\" :  \"" << sdata_out_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sdata_out_TKEEP\" :  \"" << sdata_out_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sdata_out_TSTRB\" :  \"" << sdata_out_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sdata_out_TUSER\" :  \"" << sdata_out_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sdata_out_TLAST\" :  \"" << sdata_out_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sdata_out_TID\" :  \"" << sdata_out_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sdata_out_TDEST\" :  \"" << sdata_out_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sdata_in_TVALID\" :  \"" << sdata_in_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sdata_in_TREADY\" :  \"" << sdata_in_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sdata_out_TVALID\" :  \"" << sdata_out_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sdata_out_TREADY\" :  \"" << sdata_out_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

