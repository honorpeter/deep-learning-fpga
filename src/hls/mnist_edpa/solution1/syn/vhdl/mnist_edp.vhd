-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mnist_edp is
port (
    sdata_in_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    sdata_in_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
    sdata_in_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
    sdata_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sdata_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    sdata_in_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    sdata_in_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    sdata_out_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    sdata_out_TKEEP : OUT STD_LOGIC_VECTOR (1 downto 0);
    sdata_out_TSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    sdata_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    sdata_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    sdata_out_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    sdata_out_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    sdata_in_TVALID : IN STD_LOGIC;
    sdata_in_TREADY : OUT STD_LOGIC;
    sdata_out_TVALID : OUT STD_LOGIC;
    sdata_out_TREADY : IN STD_LOGIC );
end;


architecture behav of mnist_edp is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mnist_edp,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=15.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=14.910125,HLS_SYN_LAT=1706,HLS_SYN_TPT=1706,HLS_SYN_MEM=63,HLS_SYN_DSP=37,HLS_SYN_FF=21366,HLS_SYN_LUT=29118}";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal unpacker_U0_ap_start : STD_LOGIC;
    signal unpacker_U0_ap_done : STD_LOGIC;
    signal unpacker_U0_ap_continue : STD_LOGIC;
    signal unpacker_U0_ap_idle : STD_LOGIC;
    signal unpacker_U0_ap_ready : STD_LOGIC;
    signal unpacker_U0_start_out : STD_LOGIC;
    signal unpacker_U0_start_write : STD_LOGIC;
    signal unpacker_U0_sdata_in_TREADY : STD_LOGIC;
    signal unpacker_U0_stream_out_V_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal unpacker_U0_stream_out_V_V_write : STD_LOGIC;
    signal linear_activation_U0_ap_start : STD_LOGIC;
    signal linear_activation_U0_ap_done : STD_LOGIC;
    signal linear_activation_U0_ap_continue : STD_LOGIC;
    signal linear_activation_U0_ap_idle : STD_LOGIC;
    signal linear_activation_U0_ap_ready : STD_LOGIC;
    signal linear_activation_U0_start_out : STD_LOGIC;
    signal linear_activation_U0_start_write : STD_LOGIC;
    signal linear_activation_U0_data_in_V_V_read : STD_LOGIC;
    signal linear_activation_U0_data_out_V_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal linear_activation_U0_data_out_V_V_write : STD_LOGIC;
    signal relu_U0_ap_start : STD_LOGIC;
    signal relu_U0_ap_done : STD_LOGIC;
    signal relu_U0_ap_continue : STD_LOGIC;
    signal relu_U0_ap_idle : STD_LOGIC;
    signal relu_U0_ap_ready : STD_LOGIC;
    signal relu_U0_start_out : STD_LOGIC;
    signal relu_U0_start_write : STD_LOGIC;
    signal relu_U0_data_in_V_V_read : STD_LOGIC;
    signal relu_U0_data_out_V_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal relu_U0_data_out_V_V_write : STD_LOGIC;
    signal linear_activation_1_U0_ap_start : STD_LOGIC;
    signal linear_activation_1_U0_ap_done : STD_LOGIC;
    signal linear_activation_1_U0_ap_continue : STD_LOGIC;
    signal linear_activation_1_U0_ap_idle : STD_LOGIC;
    signal linear_activation_1_U0_ap_ready : STD_LOGIC;
    signal linear_activation_1_U0_start_out : STD_LOGIC;
    signal linear_activation_1_U0_start_write : STD_LOGIC;
    signal linear_activation_1_U0_data_in_V_V_read : STD_LOGIC;
    signal linear_activation_1_U0_data_out_V_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal linear_activation_1_U0_data_out_V_V_write : STD_LOGIC;
    signal packer_U0_ap_start : STD_LOGIC;
    signal packer_U0_ap_done : STD_LOGIC;
    signal packer_U0_ap_continue : STD_LOGIC;
    signal packer_U0_ap_idle : STD_LOGIC;
    signal packer_U0_ap_ready : STD_LOGIC;
    signal packer_U0_stream_in_V_V_read : STD_LOGIC;
    signal packer_U0_sdata_out_TDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal packer_U0_sdata_out_TVALID : STD_LOGIC;
    signal packer_U0_sdata_out_TKEEP : STD_LOGIC_VECTOR (1 downto 0);
    signal packer_U0_sdata_out_TSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal packer_U0_sdata_out_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal packer_U0_sdata_out_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal packer_U0_sdata_out_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal packer_U0_sdata_out_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal data_in_V_V_full_n : STD_LOGIC;
    signal data_in_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal data_in_V_V_empty_n : STD_LOGIC;
    signal l1_result_V_V_full_n : STD_LOGIC;
    signal l1_result_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal l1_result_V_V_empty_n : STD_LOGIC;
    signal l1_relu_V_V_full_n : STD_LOGIC;
    signal l1_relu_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal l1_relu_V_V_empty_n : STD_LOGIC;
    signal data_out_V_V_full_n : STD_LOGIC;
    signal data_out_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal data_out_V_V_empty_n : STD_LOGIC;
    signal start_for_linear_activation_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_linear_activation_U0_full_n : STD_LOGIC;
    signal start_for_linear_activation_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_linear_activation_U0_empty_n : STD_LOGIC;
    signal start_for_relu_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_relu_U0_full_n : STD_LOGIC;
    signal start_for_relu_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_relu_U0_empty_n : STD_LOGIC;
    signal start_for_linear_activation_1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_linear_activation_1_U0_full_n : STD_LOGIC;
    signal start_for_linear_activation_1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_linear_activation_1_U0_empty_n : STD_LOGIC;
    signal start_for_packer_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_packer_U0_full_n : STD_LOGIC;
    signal start_for_packer_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_packer_U0_empty_n : STD_LOGIC;
    signal packer_U0_start_full_n : STD_LOGIC;
    signal packer_U0_start_write : STD_LOGIC;

    component unpacker IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        sdata_in_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        sdata_in_TVALID : IN STD_LOGIC;
        sdata_in_TREADY : OUT STD_LOGIC;
        sdata_in_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
        sdata_in_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        sdata_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sdata_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        sdata_in_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        sdata_in_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        stream_out_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        stream_out_V_V_full_n : IN STD_LOGIC;
        stream_out_V_V_write : OUT STD_LOGIC );
    end component;


    component linear_activation IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        data_in_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        data_in_V_V_empty_n : IN STD_LOGIC;
        data_in_V_V_read : OUT STD_LOGIC;
        data_out_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        data_out_V_V_full_n : IN STD_LOGIC;
        data_out_V_V_write : OUT STD_LOGIC );
    end component;


    component relu IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        data_in_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        data_in_V_V_empty_n : IN STD_LOGIC;
        data_in_V_V_read : OUT STD_LOGIC;
        data_out_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        data_out_V_V_full_n : IN STD_LOGIC;
        data_out_V_V_write : OUT STD_LOGIC );
    end component;


    component linear_activation_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        data_in_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        data_in_V_V_empty_n : IN STD_LOGIC;
        data_in_V_V_read : OUT STD_LOGIC;
        data_out_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        data_out_V_V_full_n : IN STD_LOGIC;
        data_out_V_V_write : OUT STD_LOGIC );
    end component;


    component packer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        stream_in_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        stream_in_V_V_empty_n : IN STD_LOGIC;
        stream_in_V_V_read : OUT STD_LOGIC;
        sdata_out_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        sdata_out_TVALID : OUT STD_LOGIC;
        sdata_out_TREADY : IN STD_LOGIC;
        sdata_out_TKEEP : OUT STD_LOGIC_VECTOR (1 downto 0);
        sdata_out_TSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        sdata_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        sdata_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        sdata_out_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        sdata_out_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fifo_w16_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_linear_kbM IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_relu_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_linear_lbW IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_packer_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    unpacker_U0 : component unpacker
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => unpacker_U0_ap_start,
        start_full_n => start_for_linear_activation_U0_full_n,
        ap_done => unpacker_U0_ap_done,
        ap_continue => unpacker_U0_ap_continue,
        ap_idle => unpacker_U0_ap_idle,
        ap_ready => unpacker_U0_ap_ready,
        start_out => unpacker_U0_start_out,
        start_write => unpacker_U0_start_write,
        sdata_in_TDATA => sdata_in_TDATA,
        sdata_in_TVALID => sdata_in_TVALID,
        sdata_in_TREADY => unpacker_U0_sdata_in_TREADY,
        sdata_in_TKEEP => sdata_in_TKEEP,
        sdata_in_TSTRB => sdata_in_TSTRB,
        sdata_in_TUSER => sdata_in_TUSER,
        sdata_in_TLAST => sdata_in_TLAST,
        sdata_in_TID => sdata_in_TID,
        sdata_in_TDEST => sdata_in_TDEST,
        stream_out_V_V_din => unpacker_U0_stream_out_V_V_din,
        stream_out_V_V_full_n => data_in_V_V_full_n,
        stream_out_V_V_write => unpacker_U0_stream_out_V_V_write);

    linear_activation_U0 : component linear_activation
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => linear_activation_U0_ap_start,
        start_full_n => start_for_relu_U0_full_n,
        ap_done => linear_activation_U0_ap_done,
        ap_continue => linear_activation_U0_ap_continue,
        ap_idle => linear_activation_U0_ap_idle,
        ap_ready => linear_activation_U0_ap_ready,
        start_out => linear_activation_U0_start_out,
        start_write => linear_activation_U0_start_write,
        data_in_V_V_dout => data_in_V_V_dout,
        data_in_V_V_empty_n => data_in_V_V_empty_n,
        data_in_V_V_read => linear_activation_U0_data_in_V_V_read,
        data_out_V_V_din => linear_activation_U0_data_out_V_V_din,
        data_out_V_V_full_n => l1_result_V_V_full_n,
        data_out_V_V_write => linear_activation_U0_data_out_V_V_write);

    relu_U0 : component relu
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => relu_U0_ap_start,
        start_full_n => start_for_linear_activation_1_U0_full_n,
        ap_done => relu_U0_ap_done,
        ap_continue => relu_U0_ap_continue,
        ap_idle => relu_U0_ap_idle,
        ap_ready => relu_U0_ap_ready,
        start_out => relu_U0_start_out,
        start_write => relu_U0_start_write,
        data_in_V_V_dout => l1_result_V_V_dout,
        data_in_V_V_empty_n => l1_result_V_V_empty_n,
        data_in_V_V_read => relu_U0_data_in_V_V_read,
        data_out_V_V_din => relu_U0_data_out_V_V_din,
        data_out_V_V_full_n => l1_relu_V_V_full_n,
        data_out_V_V_write => relu_U0_data_out_V_V_write);

    linear_activation_1_U0 : component linear_activation_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => linear_activation_1_U0_ap_start,
        start_full_n => start_for_packer_U0_full_n,
        ap_done => linear_activation_1_U0_ap_done,
        ap_continue => linear_activation_1_U0_ap_continue,
        ap_idle => linear_activation_1_U0_ap_idle,
        ap_ready => linear_activation_1_U0_ap_ready,
        start_out => linear_activation_1_U0_start_out,
        start_write => linear_activation_1_U0_start_write,
        data_in_V_V_dout => l1_relu_V_V_dout,
        data_in_V_V_empty_n => l1_relu_V_V_empty_n,
        data_in_V_V_read => linear_activation_1_U0_data_in_V_V_read,
        data_out_V_V_din => linear_activation_1_U0_data_out_V_V_din,
        data_out_V_V_full_n => data_out_V_V_full_n,
        data_out_V_V_write => linear_activation_1_U0_data_out_V_V_write);

    packer_U0 : component packer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => packer_U0_ap_start,
        ap_done => packer_U0_ap_done,
        ap_continue => packer_U0_ap_continue,
        ap_idle => packer_U0_ap_idle,
        ap_ready => packer_U0_ap_ready,
        stream_in_V_V_dout => data_out_V_V_dout,
        stream_in_V_V_empty_n => data_out_V_V_empty_n,
        stream_in_V_V_read => packer_U0_stream_in_V_V_read,
        sdata_out_TDATA => packer_U0_sdata_out_TDATA,
        sdata_out_TVALID => packer_U0_sdata_out_TVALID,
        sdata_out_TREADY => sdata_out_TREADY,
        sdata_out_TKEEP => packer_U0_sdata_out_TKEEP,
        sdata_out_TSTRB => packer_U0_sdata_out_TSTRB,
        sdata_out_TUSER => packer_U0_sdata_out_TUSER,
        sdata_out_TLAST => packer_U0_sdata_out_TLAST,
        sdata_out_TID => packer_U0_sdata_out_TID,
        sdata_out_TDEST => packer_U0_sdata_out_TDEST);

    data_in_V_V_U : component fifo_w16_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => unpacker_U0_stream_out_V_V_din,
        if_full_n => data_in_V_V_full_n,
        if_write => unpacker_U0_stream_out_V_V_write,
        if_dout => data_in_V_V_dout,
        if_empty_n => data_in_V_V_empty_n,
        if_read => linear_activation_U0_data_in_V_V_read);

    l1_result_V_V_U : component fifo_w16_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => linear_activation_U0_data_out_V_V_din,
        if_full_n => l1_result_V_V_full_n,
        if_write => linear_activation_U0_data_out_V_V_write,
        if_dout => l1_result_V_V_dout,
        if_empty_n => l1_result_V_V_empty_n,
        if_read => relu_U0_data_in_V_V_read);

    l1_relu_V_V_U : component fifo_w16_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => relu_U0_data_out_V_V_din,
        if_full_n => l1_relu_V_V_full_n,
        if_write => relu_U0_data_out_V_V_write,
        if_dout => l1_relu_V_V_dout,
        if_empty_n => l1_relu_V_V_empty_n,
        if_read => linear_activation_1_U0_data_in_V_V_read);

    data_out_V_V_U : component fifo_w16_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => linear_activation_1_U0_data_out_V_V_din,
        if_full_n => data_out_V_V_full_n,
        if_write => linear_activation_1_U0_data_out_V_V_write,
        if_dout => data_out_V_V_dout,
        if_empty_n => data_out_V_V_empty_n,
        if_read => packer_U0_stream_in_V_V_read);

    start_for_linear_kbM_U : component start_for_linear_kbM
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_linear_activation_U0_din,
        if_full_n => start_for_linear_activation_U0_full_n,
        if_write => unpacker_U0_start_write,
        if_dout => start_for_linear_activation_U0_dout,
        if_empty_n => start_for_linear_activation_U0_empty_n,
        if_read => linear_activation_U0_ap_ready);

    start_for_relu_U0_U : component start_for_relu_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_relu_U0_din,
        if_full_n => start_for_relu_U0_full_n,
        if_write => linear_activation_U0_start_write,
        if_dout => start_for_relu_U0_dout,
        if_empty_n => start_for_relu_U0_empty_n,
        if_read => relu_U0_ap_ready);

    start_for_linear_lbW_U : component start_for_linear_lbW
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_linear_activation_1_U0_din,
        if_full_n => start_for_linear_activation_1_U0_full_n,
        if_write => relu_U0_start_write,
        if_dout => start_for_linear_activation_1_U0_dout,
        if_empty_n => start_for_linear_activation_1_U0_empty_n,
        if_read => linear_activation_1_U0_ap_ready);

    start_for_packer_U0_U : component start_for_packer_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_packer_U0_din,
        if_full_n => start_for_packer_U0_full_n,
        if_write => linear_activation_1_U0_start_write,
        if_dout => start_for_packer_U0_dout,
        if_empty_n => start_for_packer_U0_empty_n,
        if_read => packer_U0_ap_ready);





    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_0;
    linear_activation_1_U0_ap_continue <= ap_const_logic_1;
    linear_activation_1_U0_ap_start <= start_for_linear_activation_1_U0_empty_n;
    linear_activation_U0_ap_continue <= ap_const_logic_1;
    linear_activation_U0_ap_start <= start_for_linear_activation_U0_empty_n;
    packer_U0_ap_continue <= ap_const_logic_1;
    packer_U0_ap_start <= start_for_packer_U0_empty_n;
    packer_U0_start_full_n <= ap_const_logic_1;
    packer_U0_start_write <= ap_const_logic_0;
    relu_U0_ap_continue <= ap_const_logic_1;
    relu_U0_ap_start <= start_for_relu_U0_empty_n;
    sdata_in_TREADY <= unpacker_U0_sdata_in_TREADY;
    sdata_out_TDATA <= packer_U0_sdata_out_TDATA;
    sdata_out_TDEST <= packer_U0_sdata_out_TDEST;
    sdata_out_TID <= packer_U0_sdata_out_TID;
    sdata_out_TKEEP <= packer_U0_sdata_out_TKEEP;
    sdata_out_TLAST <= packer_U0_sdata_out_TLAST;
    sdata_out_TSTRB <= packer_U0_sdata_out_TSTRB;
    sdata_out_TUSER <= packer_U0_sdata_out_TUSER;
    sdata_out_TVALID <= packer_U0_sdata_out_TVALID;
    start_for_linear_activation_1_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_linear_activation_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_packer_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_relu_U0_din <= (0=>ap_const_logic_1, others=>'-');
    unpacker_U0_ap_continue <= ap_const_logic_1;
    unpacker_U0_ap_start <= ap_const_logic_1;
end behav;
