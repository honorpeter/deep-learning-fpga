// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "multiply_accumulate.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic multiply_accumulate::ap_const_logic_1 = sc_dt::Log_1;
const bool multiply_accumulate::ap_const_boolean_1 = true;
const bool multiply_accumulate::ap_const_boolean_0 = false;
const sc_lv<32> multiply_accumulate::ap_const_lv32_F = "1111";
const sc_lv<1> multiply_accumulate::ap_const_lv1_1 = "1";
const sc_lv<32> multiply_accumulate::ap_const_lv32_A = "1010";
const sc_lv<32> multiply_accumulate::ap_const_lv32_E = "1110";
const sc_lv<23> multiply_accumulate::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<7> multiply_accumulate::ap_const_lv7_74 = "1110100";
const sc_lv<32> multiply_accumulate::ap_const_lv32_6 = "110";
const sc_lv<7> multiply_accumulate::ap_const_lv7_C = "1100";
const sc_logic multiply_accumulate::ap_const_logic_0 = sc_dt::Log_0;

multiply_accumulate::multiply_accumulate(sc_module_name name) : sc_module(name), mVcdFile(0) {
    mnist_edp_mul_mulbkb_U9 = new mnist_edp_mul_mulbkb<1,1,11,11,22>("mnist_edp_mul_mulbkb_U9");
    mnist_edp_mul_mulbkb_U9->din0(r_V_fu_227_p0);
    mnist_edp_mul_mulbkb_U9->din1(r_V_fu_227_p1);
    mnist_edp_mul_mulbkb_U9->dout(r_V_fu_227_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_agg_result_V_assign_s_fu_143_p2);
    sensitive << ( result_V_fu_140_p1 );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_return);
    sensitive << ( CompleteRegister_m_c_1_reg_234 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( r_V_cast_fu_218_p1 );

    SC_METHOD(thread_e1_V_fu_72_p4);
    sensitive << ( in1_V );

    SC_METHOD(thread_e2_V_fu_102_p4);
    sensitive << ( in2_V );

    SC_METHOD(thread_exact_s_fu_112_p2);
    sensitive << ( sign_fu_52_p3 );
    sensitive << ( sign_1_fu_82_p3 );

    SC_METHOD(thread_lhs_V_1_fu_126_p1);
    sensitive << ( e1_V_fu_72_p4 );

    SC_METHOD(thread_op2_assign_cast_fu_169_p1);
    sensitive << ( op2_assign_fu_163_p2 );

    SC_METHOD(thread_op2_assign_fu_163_p2);
    sensitive << ( tmp_cast_fu_157_p1 );

    SC_METHOD(thread_p_Result_1_fu_94_p3);
    sensitive << ( tmp_2_fu_90_p1 );

    SC_METHOD(thread_p_Result_s_fu_64_p3);
    sensitive << ( tmp_fu_60_p1 );

    SC_METHOD(thread_r_V_1_fu_134_p2);
    sensitive << ( lhs_V_1_fu_126_p1 );
    sensitive << ( rhs_V_1_fu_130_p1 );

    SC_METHOD(thread_r_V_2_fu_210_p3);
    sensitive << ( tmp_3_fu_173_p3 );
    sensitive << ( tmp_7_cast_fu_206_p1 );
    sensitive << ( tmp_4_fu_185_p2 );

    SC_METHOD(thread_r_V_cast_fu_218_p1);
    sensitive << ( r_V_2_fu_210_p3 );

    SC_METHOD(thread_r_V_fu_227_p0);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( r_V_fu_227_p00 );

    SC_METHOD(thread_r_V_fu_227_p00);
    sensitive << ( p_Result_s_fu_64_p3 );

    SC_METHOD(thread_r_V_fu_227_p1);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( r_V_fu_227_p10 );

    SC_METHOD(thread_r_V_fu_227_p10);
    sensitive << ( p_Result_1_fu_94_p3 );

    SC_METHOD(thread_result_V_2_fu_149_p3);
    sensitive << ( result_V_fu_140_p1 );
    sensitive << ( exact_s_fu_112_p2 );
    sensitive << ( agg_result_V_assign_s_fu_143_p2 );

    SC_METHOD(thread_result_V_fu_140_p1);
    sensitive << ( r_V_fu_227_p2 );

    SC_METHOD(thread_rhs_V_1_fu_130_p1);
    sensitive << ( e2_V_fu_102_p4 );

    SC_METHOD(thread_shifted_V_cast_fu_160_p1);
    sensitive << ( result_V_2_reg_244 );

    SC_METHOD(thread_sign_1_fu_82_p3);
    sensitive << ( in2_V );

    SC_METHOD(thread_sign_fu_52_p3);
    sensitive << ( in1_V );

    SC_METHOD(thread_tmp_2_fu_90_p1);
    sensitive << ( in2_V );

    SC_METHOD(thread_tmp_3_cast_fu_181_p1);
    sensitive << ( op2_assign_cast_fu_169_p1 );

    SC_METHOD(thread_tmp_3_fu_173_p3);
    sensitive << ( op2_assign_fu_163_p2 );

    SC_METHOD(thread_tmp_4_fu_185_p2);
    sensitive << ( shifted_V_cast_fu_160_p1 );
    sensitive << ( tmp_3_cast_fu_181_p1 );

    SC_METHOD(thread_tmp_5_cast_cast_fu_197_p1);
    sensitive << ( tmp_5_fu_191_p2 );

    SC_METHOD(thread_tmp_5_fu_191_p2);
    sensitive << ( tmp_cast_fu_157_p1 );

    SC_METHOD(thread_tmp_7_cast_fu_206_p1);
    sensitive << ( tmp_7_fu_201_p2 );

    SC_METHOD(thread_tmp_7_fu_201_p2);
    sensitive << ( result_V_2_reg_244 );
    sensitive << ( tmp_5_cast_cast_fu_197_p1 );

    SC_METHOD(thread_tmp_cast_fu_157_p1);
    sensitive << ( r_V_1_reg_239 );

    SC_METHOD(thread_tmp_fu_60_p1);
    sensitive << ( in1_V );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "multiply_accumulate_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, CompleteRegister_ap_uint_16_ap_uint_16_m_cr_V_read, "(port)CompleteRegister_ap_uint_16_ap_uint_16_m_cr_V_read");
    sc_trace(mVcdFile, in1_V, "(port)in1_V");
    sc_trace(mVcdFile, in2_V, "(port)in2_V");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, CompleteRegister_m_c_1_reg_234, "CompleteRegister_m_c_1_reg_234");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, r_V_1_fu_134_p2, "r_V_1_fu_134_p2");
    sc_trace(mVcdFile, r_V_1_reg_239, "r_V_1_reg_239");
    sc_trace(mVcdFile, result_V_2_fu_149_p3, "result_V_2_fu_149_p3");
    sc_trace(mVcdFile, result_V_2_reg_244, "result_V_2_reg_244");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, tmp_fu_60_p1, "tmp_fu_60_p1");
    sc_trace(mVcdFile, tmp_2_fu_90_p1, "tmp_2_fu_90_p1");
    sc_trace(mVcdFile, sign_fu_52_p3, "sign_fu_52_p3");
    sc_trace(mVcdFile, sign_1_fu_82_p3, "sign_1_fu_82_p3");
    sc_trace(mVcdFile, p_Result_s_fu_64_p3, "p_Result_s_fu_64_p3");
    sc_trace(mVcdFile, p_Result_1_fu_94_p3, "p_Result_1_fu_94_p3");
    sc_trace(mVcdFile, e1_V_fu_72_p4, "e1_V_fu_72_p4");
    sc_trace(mVcdFile, e2_V_fu_102_p4, "e2_V_fu_102_p4");
    sc_trace(mVcdFile, lhs_V_1_fu_126_p1, "lhs_V_1_fu_126_p1");
    sc_trace(mVcdFile, rhs_V_1_fu_130_p1, "rhs_V_1_fu_130_p1");
    sc_trace(mVcdFile, r_V_fu_227_p2, "r_V_fu_227_p2");
    sc_trace(mVcdFile, result_V_fu_140_p1, "result_V_fu_140_p1");
    sc_trace(mVcdFile, exact_s_fu_112_p2, "exact_s_fu_112_p2");
    sc_trace(mVcdFile, agg_result_V_assign_s_fu_143_p2, "agg_result_V_assign_s_fu_143_p2");
    sc_trace(mVcdFile, tmp_cast_fu_157_p1, "tmp_cast_fu_157_p1");
    sc_trace(mVcdFile, op2_assign_fu_163_p2, "op2_assign_fu_163_p2");
    sc_trace(mVcdFile, op2_assign_cast_fu_169_p1, "op2_assign_cast_fu_169_p1");
    sc_trace(mVcdFile, shifted_V_cast_fu_160_p1, "shifted_V_cast_fu_160_p1");
    sc_trace(mVcdFile, tmp_3_cast_fu_181_p1, "tmp_3_cast_fu_181_p1");
    sc_trace(mVcdFile, tmp_5_fu_191_p2, "tmp_5_fu_191_p2");
    sc_trace(mVcdFile, tmp_5_cast_cast_fu_197_p1, "tmp_5_cast_cast_fu_197_p1");
    sc_trace(mVcdFile, tmp_7_fu_201_p2, "tmp_7_fu_201_p2");
    sc_trace(mVcdFile, tmp_3_fu_173_p3, "tmp_3_fu_173_p3");
    sc_trace(mVcdFile, tmp_7_cast_fu_206_p1, "tmp_7_cast_fu_206_p1");
    sc_trace(mVcdFile, tmp_4_fu_185_p2, "tmp_4_fu_185_p2");
    sc_trace(mVcdFile, r_V_2_fu_210_p3, "r_V_2_fu_210_p3");
    sc_trace(mVcdFile, r_V_cast_fu_218_p1, "r_V_cast_fu_218_p1");
    sc_trace(mVcdFile, r_V_fu_227_p0, "r_V_fu_227_p0");
    sc_trace(mVcdFile, r_V_fu_227_p1, "r_V_fu_227_p1");
    sc_trace(mVcdFile, r_V_fu_227_p00, "r_V_fu_227_p00");
    sc_trace(mVcdFile, r_V_fu_227_p10, "r_V_fu_227_p10");
#endif

    }
}

multiply_accumulate::~multiply_accumulate() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete mnist_edp_mul_mulbkb_U9;
}

void multiply_accumulate::thread_ap_clk_no_reset_() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        CompleteRegister_m_c_1_reg_234 = CompleteRegister_ap_uint_16_ap_uint_16_m_cr_V_read.read();
        r_V_1_reg_239 = r_V_1_fu_134_p2.read();
        result_V_2_reg_244 = result_V_2_fu_149_p3.read();
    }
}

void multiply_accumulate::thread_agg_result_V_assign_s_fu_143_p2() {
    agg_result_V_assign_s_fu_143_p2 = (!ap_const_lv23_0.is_01() || !result_V_fu_140_p1.read().is_01())? sc_lv<23>(): (sc_biguint<23>(ap_const_lv23_0) - sc_biguint<23>(result_V_fu_140_p1.read()));
}

void multiply_accumulate::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void multiply_accumulate::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void multiply_accumulate::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void multiply_accumulate::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void multiply_accumulate::thread_ap_return() {
    ap_return = (!CompleteRegister_m_c_1_reg_234.read().is_01() || !r_V_cast_fu_218_p1.read().is_01())? sc_lv<80>(): (sc_biguint<80>(CompleteRegister_m_c_1_reg_234.read()) + sc_bigint<80>(r_V_cast_fu_218_p1.read()));
}

void multiply_accumulate::thread_e1_V_fu_72_p4() {
    e1_V_fu_72_p4 = in1_V.read().range(14, 10);
}

void multiply_accumulate::thread_e2_V_fu_102_p4() {
    e2_V_fu_102_p4 = in2_V.read().range(14, 10);
}

void multiply_accumulate::thread_exact_s_fu_112_p2() {
    exact_s_fu_112_p2 = (sign_fu_52_p3.read() ^ sign_1_fu_82_p3.read());
}

void multiply_accumulate::thread_lhs_V_1_fu_126_p1() {
    lhs_V_1_fu_126_p1 = esl_zext<6,5>(e1_V_fu_72_p4.read());
}

void multiply_accumulate::thread_op2_assign_cast_fu_169_p1() {
    op2_assign_cast_fu_169_p1 = esl_sext<32,7>(op2_assign_fu_163_p2.read());
}

void multiply_accumulate::thread_op2_assign_fu_163_p2() {
    op2_assign_fu_163_p2 = (!ap_const_lv7_74.is_01() || !tmp_cast_fu_157_p1.read().is_01())? sc_lv<7>(): (sc_bigint<7>(ap_const_lv7_74) + sc_biguint<7>(tmp_cast_fu_157_p1.read()));
}

void multiply_accumulate::thread_p_Result_1_fu_94_p3() {
    p_Result_1_fu_94_p3 = esl_concat<1,10>(ap_const_lv1_1, tmp_2_fu_90_p1.read());
}

void multiply_accumulate::thread_p_Result_s_fu_64_p3() {
    p_Result_s_fu_64_p3 = esl_concat<1,10>(ap_const_lv1_1, tmp_fu_60_p1.read());
}

void multiply_accumulate::thread_r_V_1_fu_134_p2() {
    r_V_1_fu_134_p2 = (!lhs_V_1_fu_126_p1.read().is_01() || !rhs_V_1_fu_130_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(lhs_V_1_fu_126_p1.read()) + sc_biguint<6>(rhs_V_1_fu_130_p1.read()));
}

void multiply_accumulate::thread_r_V_2_fu_210_p3() {
    r_V_2_fu_210_p3 = (!tmp_3_fu_173_p3.read()[0].is_01())? sc_lv<73>(): ((tmp_3_fu_173_p3.read()[0].to_bool())? tmp_7_cast_fu_206_p1.read(): tmp_4_fu_185_p2.read());
}

void multiply_accumulate::thread_r_V_cast_fu_218_p1() {
    r_V_cast_fu_218_p1 = esl_sext<80,73>(r_V_2_fu_210_p3.read());
}

void multiply_accumulate::thread_r_V_fu_227_p0() {
    r_V_fu_227_p0 =  (sc_lv<11>) (r_V_fu_227_p00.read());
}

void multiply_accumulate::thread_r_V_fu_227_p00() {
    r_V_fu_227_p00 = esl_zext<22,11>(p_Result_s_fu_64_p3.read());
}

void multiply_accumulate::thread_r_V_fu_227_p1() {
    r_V_fu_227_p1 =  (sc_lv<11>) (r_V_fu_227_p10.read());
}

void multiply_accumulate::thread_r_V_fu_227_p10() {
    r_V_fu_227_p10 = esl_zext<22,11>(p_Result_1_fu_94_p3.read());
}

void multiply_accumulate::thread_result_V_2_fu_149_p3() {
    result_V_2_fu_149_p3 = (!exact_s_fu_112_p2.read()[0].is_01())? sc_lv<23>(): ((exact_s_fu_112_p2.read()[0].to_bool())? agg_result_V_assign_s_fu_143_p2.read(): result_V_fu_140_p1.read());
}

void multiply_accumulate::thread_result_V_fu_140_p1() {
    result_V_fu_140_p1 = esl_zext<23,22>(r_V_fu_227_p2.read());
}

void multiply_accumulate::thread_rhs_V_1_fu_130_p1() {
    rhs_V_1_fu_130_p1 = esl_zext<6,5>(e2_V_fu_102_p4.read());
}

void multiply_accumulate::thread_shifted_V_cast_fu_160_p1() {
    shifted_V_cast_fu_160_p1 = esl_sext<73,23>(result_V_2_reg_244.read());
}

void multiply_accumulate::thread_sign_1_fu_82_p3() {
    sign_1_fu_82_p3 = in2_V.read().range(15, 15);
}

void multiply_accumulate::thread_sign_fu_52_p3() {
    sign_fu_52_p3 = in1_V.read().range(15, 15);
}

void multiply_accumulate::thread_tmp_2_fu_90_p1() {
    tmp_2_fu_90_p1 = in2_V.read().range(10-1, 0);
}

void multiply_accumulate::thread_tmp_3_cast_fu_181_p1() {
    tmp_3_cast_fu_181_p1 = esl_zext<73,32>(op2_assign_cast_fu_169_p1.read());
}

void multiply_accumulate::thread_tmp_3_fu_173_p3() {
    tmp_3_fu_173_p3 = op2_assign_fu_163_p2.read().range(6, 6);
}

void multiply_accumulate::thread_tmp_4_fu_185_p2() {
    tmp_4_fu_185_p2 = (!tmp_3_cast_fu_181_p1.read().is_01())? sc_lv<73>(): shifted_V_cast_fu_160_p1.read() << (unsigned short)tmp_3_cast_fu_181_p1.read().to_uint();
}

void multiply_accumulate::thread_tmp_5_cast_cast_fu_197_p1() {
    tmp_5_cast_cast_fu_197_p1 = esl_sext<23,7>(tmp_5_fu_191_p2.read());
}

void multiply_accumulate::thread_tmp_5_fu_191_p2() {
    tmp_5_fu_191_p2 = (!ap_const_lv7_C.is_01() || !tmp_cast_fu_157_p1.read().is_01())? sc_lv<7>(): (sc_biguint<7>(ap_const_lv7_C) - sc_biguint<7>(tmp_cast_fu_157_p1.read()));
}

void multiply_accumulate::thread_tmp_7_cast_fu_206_p1() {
    tmp_7_cast_fu_206_p1 = esl_sext<73,23>(tmp_7_fu_201_p2.read());
}

void multiply_accumulate::thread_tmp_7_fu_201_p2() {
    tmp_7_fu_201_p2 = (!result_V_2_reg_244.read().is_01() || !tmp_5_cast_cast_fu_197_p1.read().is_01())? sc_lv<23>(): sc_bigint<23>(result_V_2_reg_244.read()) >> (unsigned short)tmp_5_cast_cast_fu_197_p1.read().to_uint();
}

void multiply_accumulate::thread_tmp_cast_fu_157_p1() {
    tmp_cast_fu_157_p1 = esl_zext<7,6>(r_V_1_reg_239.read());
}

void multiply_accumulate::thread_tmp_fu_60_p1() {
    tmp_fu_60_p1 = in1_V.read().range(10-1, 0);
}

}

