// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _multiply_accumulate_HH_
#define _multiply_accumulate_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "mnist_edp_mul_mulbkb.h"

namespace ap_rtl {

struct multiply_accumulate : public sc_module {
    // Port declarations 7
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_lv<80> > CompleteRegister_ap_uint_16_ap_uint_16_m_cr_V_read;
    sc_in< sc_lv<16> > in1_V;
    sc_in< sc_lv<16> > in2_V;
    sc_out< sc_lv<80> > ap_return;
    sc_in< sc_logic > ap_ce;


    // Module declarations
    multiply_accumulate(sc_module_name name);
    SC_HAS_PROCESS(multiply_accumulate);

    ~multiply_accumulate();

    sc_trace_file* mVcdFile;

    mnist_edp_mul_mulbkb<1,1,11,11,22>* mnist_edp_mul_mulbkb_U9;
    sc_signal< sc_lv<80> > CompleteRegister_m_c_1_reg_234;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<6> > r_V_1_fu_134_p2;
    sc_signal< sc_lv<6> > r_V_1_reg_239;
    sc_signal< sc_lv<23> > result_V_2_fu_149_p3;
    sc_signal< sc_lv<23> > result_V_2_reg_244;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<10> > tmp_fu_60_p1;
    sc_signal< sc_lv<10> > tmp_2_fu_90_p1;
    sc_signal< sc_lv<1> > sign_fu_52_p3;
    sc_signal< sc_lv<1> > sign_1_fu_82_p3;
    sc_signal< sc_lv<11> > p_Result_s_fu_64_p3;
    sc_signal< sc_lv<11> > p_Result_1_fu_94_p3;
    sc_signal< sc_lv<5> > e1_V_fu_72_p4;
    sc_signal< sc_lv<5> > e2_V_fu_102_p4;
    sc_signal< sc_lv<6> > lhs_V_1_fu_126_p1;
    sc_signal< sc_lv<6> > rhs_V_1_fu_130_p1;
    sc_signal< sc_lv<22> > r_V_fu_227_p2;
    sc_signal< sc_lv<23> > result_V_fu_140_p1;
    sc_signal< sc_lv<1> > exact_s_fu_112_p2;
    sc_signal< sc_lv<23> > agg_result_V_assign_s_fu_143_p2;
    sc_signal< sc_lv<7> > tmp_cast_fu_157_p1;
    sc_signal< sc_lv<7> > op2_assign_fu_163_p2;
    sc_signal< sc_lv<32> > op2_assign_cast_fu_169_p1;
    sc_signal< sc_lv<73> > shifted_V_cast_fu_160_p1;
    sc_signal< sc_lv<73> > tmp_3_cast_fu_181_p1;
    sc_signal< sc_lv<7> > tmp_5_fu_191_p2;
    sc_signal< sc_lv<23> > tmp_5_cast_cast_fu_197_p1;
    sc_signal< sc_lv<23> > tmp_7_fu_201_p2;
    sc_signal< sc_lv<1> > tmp_3_fu_173_p3;
    sc_signal< sc_lv<73> > tmp_7_cast_fu_206_p1;
    sc_signal< sc_lv<73> > tmp_4_fu_185_p2;
    sc_signal< sc_lv<73> > r_V_2_fu_210_p3;
    sc_signal< sc_lv<80> > r_V_cast_fu_218_p1;
    sc_signal< sc_lv<11> > r_V_fu_227_p0;
    sc_signal< sc_lv<11> > r_V_fu_227_p1;
    sc_signal< sc_lv<22> > r_V_fu_227_p00;
    sc_signal< sc_lv<22> > r_V_fu_227_p10;
    static const sc_logic ap_const_logic_1;
    static const bool ap_const_boolean_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<23> ap_const_lv23_0;
    static const sc_lv<7> ap_const_lv7_74;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<7> ap_const_lv7_C;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_agg_result_V_assign_s_fu_143_p2();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_return();
    void thread_e1_V_fu_72_p4();
    void thread_e2_V_fu_102_p4();
    void thread_exact_s_fu_112_p2();
    void thread_lhs_V_1_fu_126_p1();
    void thread_op2_assign_cast_fu_169_p1();
    void thread_op2_assign_fu_163_p2();
    void thread_p_Result_1_fu_94_p3();
    void thread_p_Result_s_fu_64_p3();
    void thread_r_V_1_fu_134_p2();
    void thread_r_V_2_fu_210_p3();
    void thread_r_V_cast_fu_218_p1();
    void thread_r_V_fu_227_p0();
    void thread_r_V_fu_227_p00();
    void thread_r_V_fu_227_p1();
    void thread_r_V_fu_227_p10();
    void thread_result_V_2_fu_149_p3();
    void thread_result_V_fu_140_p1();
    void thread_rhs_V_1_fu_130_p1();
    void thread_shifted_V_cast_fu_160_p1();
    void thread_sign_1_fu_82_p3();
    void thread_sign_fu_52_p3();
    void thread_tmp_2_fu_90_p1();
    void thread_tmp_3_cast_fu_181_p1();
    void thread_tmp_3_fu_173_p3();
    void thread_tmp_4_fu_185_p2();
    void thread_tmp_5_cast_cast_fu_197_p1();
    void thread_tmp_5_fu_191_p2();
    void thread_tmp_7_cast_fu_206_p1();
    void thread_tmp_7_fu_201_p2();
    void thread_tmp_cast_fu_157_p1();
    void thread_tmp_fu_60_p1();
};

}

using namespace ap_rtl;

#endif
