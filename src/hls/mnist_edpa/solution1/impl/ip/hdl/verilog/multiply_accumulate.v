// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module multiply_accumulate (
        ap_clk,
        ap_rst,
        CompleteRegister_ap_uint_16_ap_uint_16_m_cr_V_read,
        in1_V,
        in2_V,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [79:0] CompleteRegister_ap_uint_16_ap_uint_16_m_cr_V_read;
input  [15:0] in1_V;
input  [15:0] in2_V;
output  [79:0] ap_return;
input   ap_ce;

reg   [79:0] CompleteRegister_m_c_1_reg_234;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [5:0] r_V_1_fu_134_p2;
reg   [5:0] r_V_1_reg_239;
wire   [22:0] result_V_2_fu_149_p3;
reg   [22:0] result_V_2_reg_244;
wire    ap_block_pp0_stage0;
wire   [9:0] tmp_fu_60_p1;
wire   [9:0] tmp_2_fu_90_p1;
wire   [0:0] sign_fu_52_p3;
wire   [0:0] sign_1_fu_82_p3;
wire   [10:0] p_Result_s_fu_64_p3;
wire   [10:0] p_Result_1_fu_94_p3;
wire   [4:0] e1_V_fu_72_p4;
wire   [4:0] e2_V_fu_102_p4;
wire   [5:0] lhs_V_1_fu_126_p1;
wire   [5:0] rhs_V_1_fu_130_p1;
wire   [21:0] r_V_fu_227_p2;
wire   [22:0] result_V_fu_140_p1;
wire   [0:0] exact_s_fu_112_p2;
wire   [22:0] agg_result_V_assign_s_fu_143_p2;
wire   [6:0] tmp_cast_fu_157_p1;
wire   [6:0] op2_assign_fu_163_p2;
wire  signed [31:0] op2_assign_cast_fu_169_p1;
wire  signed [72:0] shifted_V_cast_fu_160_p1;
wire   [72:0] tmp_3_cast_fu_181_p1;
wire   [6:0] tmp_5_fu_191_p2;
wire  signed [22:0] tmp_5_cast_cast_fu_197_p1;
wire   [22:0] tmp_7_fu_201_p2;
wire   [0:0] tmp_3_fu_173_p3;
wire  signed [72:0] tmp_7_cast_fu_206_p1;
wire   [72:0] tmp_4_fu_185_p2;
wire   [72:0] r_V_2_fu_210_p3;
wire  signed [79:0] r_V_cast_fu_218_p1;
wire   [10:0] r_V_fu_227_p0;
wire   [10:0] r_V_fu_227_p1;
wire   [21:0] r_V_fu_227_p00;
wire   [21:0] r_V_fu_227_p10;

mnist_edp_mul_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 22 ))
mnist_edp_mul_mulbkb_U9(
    .din0(r_V_fu_227_p0),
    .din1(r_V_fu_227_p1),
    .dout(r_V_fu_227_p2)
);

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce))) begin
        CompleteRegister_m_c_1_reg_234 <= CompleteRegister_ap_uint_16_ap_uint_16_m_cr_V_read;
        r_V_1_reg_239 <= r_V_1_fu_134_p2;
        result_V_2_reg_244 <= result_V_2_fu_149_p3;
    end
end

assign agg_result_V_assign_s_fu_143_p2 = (23'd0 - result_V_fu_140_p1);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_return = ($signed(CompleteRegister_m_c_1_reg_234) + $signed(r_V_cast_fu_218_p1));

assign e1_V_fu_72_p4 = {{in1_V[14:10]}};

assign e2_V_fu_102_p4 = {{in2_V[14:10]}};

assign exact_s_fu_112_p2 = (sign_fu_52_p3 ^ sign_1_fu_82_p3);

assign lhs_V_1_fu_126_p1 = e1_V_fu_72_p4;

assign op2_assign_cast_fu_169_p1 = $signed(op2_assign_fu_163_p2);

assign op2_assign_fu_163_p2 = ($signed(7'd116) + $signed(tmp_cast_fu_157_p1));

assign p_Result_1_fu_94_p3 = {{1'd1}, {tmp_2_fu_90_p1}};

assign p_Result_s_fu_64_p3 = {{1'd1}, {tmp_fu_60_p1}};

assign r_V_1_fu_134_p2 = (lhs_V_1_fu_126_p1 + rhs_V_1_fu_130_p1);

assign r_V_2_fu_210_p3 = ((tmp_3_fu_173_p3[0:0] === 1'b1) ? tmp_7_cast_fu_206_p1 : tmp_4_fu_185_p2);

assign r_V_cast_fu_218_p1 = $signed(r_V_2_fu_210_p3);

assign r_V_fu_227_p0 = r_V_fu_227_p00;

assign r_V_fu_227_p00 = p_Result_s_fu_64_p3;

assign r_V_fu_227_p1 = r_V_fu_227_p10;

assign r_V_fu_227_p10 = p_Result_1_fu_94_p3;

assign result_V_2_fu_149_p3 = ((exact_s_fu_112_p2[0:0] === 1'b1) ? agg_result_V_assign_s_fu_143_p2 : result_V_fu_140_p1);

assign result_V_fu_140_p1 = r_V_fu_227_p2;

assign rhs_V_1_fu_130_p1 = e2_V_fu_102_p4;

assign shifted_V_cast_fu_160_p1 = $signed(result_V_2_reg_244);

assign sign_1_fu_82_p3 = in2_V[32'd15];

assign sign_fu_52_p3 = in1_V[32'd15];

assign tmp_2_fu_90_p1 = in2_V[9:0];

assign tmp_3_cast_fu_181_p1 = $unsigned(op2_assign_cast_fu_169_p1);

assign tmp_3_fu_173_p3 = op2_assign_fu_163_p2[32'd6];

assign tmp_4_fu_185_p2 = shifted_V_cast_fu_160_p1 << tmp_3_cast_fu_181_p1;

assign tmp_5_cast_cast_fu_197_p1 = $signed(tmp_5_fu_191_p2);

assign tmp_5_fu_191_p2 = (7'd12 - tmp_cast_fu_157_p1);

assign tmp_7_cast_fu_206_p1 = $signed(tmp_7_fu_201_p2);

assign tmp_7_fu_201_p2 = $signed(result_V_2_reg_244) >>> tmp_5_cast_cast_fu_197_p1;

assign tmp_cast_fu_157_p1 = r_V_1_reg_239;

assign tmp_fu_60_p1 = in1_V[9:0];

endmodule //multiply_accumulate
