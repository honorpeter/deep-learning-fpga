-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity linear_activation_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    data_in_V_empty_n : IN STD_LOGIC;
    data_in_V_read : OUT STD_LOGIC;
    data_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_out_V_full_n : IN STD_LOGIC;
    data_out_V_write : OUT STD_LOGIC );
end;


architecture behav of linear_activation_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal L2_WEIGHTS_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal L2_WEIGHTS_ce0 : STD_LOGIC;
    signal L2_WEIGHTS_q0 : STD_LOGIC_VECTOR (319 downto 0);
    signal L2_BIAS_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal L2_BIAS_ce0 : STD_LOGIC;
    signal L2_BIAS_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_in_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal exitcond5_reg_532 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_out_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp1_iter7 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond_reg_747 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter6_exitcond_reg_747 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_9_reg_163 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_8_reg_175 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_7_reg_187 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_6_reg_199 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_5_reg_211 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_4_reg_223 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_3_reg_235 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_2_reg_247 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_1_reg_259 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_0_reg_271 : STD_LOGIC_VECTOR (31 downto 0);
    signal ii_reg_283 : STD_LOGIC_VECTOR (6 downto 0);
    signal ires_reg_294 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_306_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_332 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond5_reg_532 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp1_iter6 : STD_LOGIC := '0';
    signal ap_block_state18_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state19_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state21_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state22_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state23_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_state24_pp1_stage0_iter6 : BOOLEAN;
    signal ap_block_state25_pp1_stage0_iter7 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal ap_reg_pp1_iter5_exitcond_reg_747 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond5_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond5_reg_532 : STD_LOGIC_VECTOR (0 downto 0);
    signal ii_2_fu_344_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ii_2_reg_536 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_26_reg_546 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_8_fu_355_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_552 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_557 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_562 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_567 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_reg_572 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_577 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_reg_582 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_reg_587 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_reg_592 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_reg_597 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_449_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal tmp_6_fu_453_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_457_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal tmp_11_fu_461_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_465_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state16_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal tmp_15_fu_469_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_324_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_632 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal grp_fu_328_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_1_reg_637 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_473_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_477_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_2_reg_652 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_3_reg_657 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_481_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_485_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_4_reg_672 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_5_reg_677 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_6_reg_682 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_7_reg_687 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_8_reg_692 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_9_reg_697 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_311_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_1_1_reg_702 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_2_1_reg_707 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_3_1_reg_712 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_4_1_reg_717 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_5_1_reg_722 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_6_1_reg_727 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_7_1_reg_732 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_reg_pp1_iter1_exitcond_reg_747 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter2_exitcond_reg_747 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter3_exitcond_reg_747 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter4_exitcond_reg_747 : STD_LOGIC_VECTOR (0 downto 0);
    signal ires_1_fu_495_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ires_1_reg_751 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal tmp_25_fu_506_p12 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_reg_761 : STD_LOGIC_VECTOR (31 downto 0);
    signal L2_BIAS_load_reg_766 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state18 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal ap_phi_mux_acc_7_phi_fu_191_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_phi_mux_acc_6_phi_fu_203_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_acc_5_phi_fu_215_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_phi_mux_acc_4_phi_fu_227_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_acc_3_phi_fu_239_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_phi_mux_acc_2_phi_fu_251_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_acc_1_phi_fu_263_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_acc_0_phi_fu_275_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_ii_phi_fu_287_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_ires_phi_fu_298_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal grp_fu_306_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_306_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_311_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_311_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_324_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_328_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_306_ce : STD_LOGIC;
    signal grp_fu_311_ce : STD_LOGIC;
    signal grp_fu_324_ce : STD_LOGIC;
    signal grp_fu_328_ce : STD_LOGIC;
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component mnist_fp32_naive_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mnist_fp32_naive_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mnist_fp32_naive_jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component linear_activationhbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (319 downto 0) );
    end component;


    component linear_activationibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    L2_WEIGHTS_U : component linear_activationhbi
    generic map (
        DataWidth => 320,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => L2_WEIGHTS_address0,
        ce0 => L2_WEIGHTS_ce0,
        q0 => L2_WEIGHTS_q0);

    L2_BIAS_U : component linear_activationibs
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => L2_BIAS_address0,
        ce0 => L2_BIAS_ce0,
        q0 => L2_BIAS_q0);

    mnist_fp32_naive_dEe_U47 : component mnist_fp32_naive_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_306_p0,
        din1 => grp_fu_306_p1,
        ce => grp_fu_306_ce,
        dout => grp_fu_306_p2);

    mnist_fp32_naive_dEe_U48 : component mnist_fp32_naive_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_311_p0,
        din1 => grp_fu_311_p1,
        ce => grp_fu_311_ce,
        dout => grp_fu_311_p2);

    mnist_fp32_naive_eOg_U49 : component mnist_fp32_naive_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_26_reg_546,
        din1 => grp_fu_324_p1,
        ce => grp_fu_324_ce,
        dout => grp_fu_324_p2);

    mnist_fp32_naive_eOg_U50 : component mnist_fp32_naive_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_26_reg_546,
        din1 => grp_fu_328_p1,
        ce => grp_fu_328_ce,
        dout => grp_fu_328_p2);

    mnist_fp32_naive_jbC_U51 : component mnist_fp32_naive_jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => acc_0_reg_271,
        din1 => acc_1_reg_259,
        din2 => acc_2_reg_247,
        din3 => acc_3_reg_235,
        din4 => acc_4_reg_223,
        din5 => acc_5_reg_211,
        din6 => acc_6_reg_199,
        din7 => acc_7_reg_187,
        din8 => acc_8_reg_175,
        din9 => acc_9_reg_163,
        din10 => ires_reg_294,
        dout => tmp_25_fu_506_p12);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state18) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state18)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state18);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp1_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    acc_0_reg_271_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_exitcond5_reg_532 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                acc_0_reg_271 <= reg_332;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                acc_0_reg_271 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    acc_1_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_exitcond5_reg_532 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                acc_1_reg_259 <= acc_1_1_reg_702;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                acc_1_reg_259 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    acc_2_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_exitcond5_reg_532 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                acc_2_reg_247 <= acc_2_1_reg_707;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                acc_2_reg_247 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    acc_3_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_exitcond5_reg_532 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                acc_3_reg_235 <= acc_3_1_reg_712;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                acc_3_reg_235 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    acc_4_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_exitcond5_reg_532 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                acc_4_reg_223 <= acc_4_1_reg_717;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                acc_4_reg_223 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    acc_5_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_exitcond5_reg_532 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                acc_5_reg_211 <= acc_5_1_reg_722;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                acc_5_reg_211 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    acc_6_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_exitcond5_reg_532 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                acc_6_reg_199 <= acc_6_1_reg_727;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                acc_6_reg_199 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    acc_7_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_exitcond5_reg_532 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                acc_7_reg_187 <= acc_7_1_reg_732;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                acc_7_reg_187 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    acc_8_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_exitcond5_reg_532 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                acc_8_reg_175 <= grp_fu_306_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                acc_8_reg_175 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    acc_9_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_exitcond5_reg_532 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                acc_9_reg_163 <= grp_fu_311_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                acc_9_reg_163 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    ii_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_reg_532 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                ii_reg_283 <= ii_2_reg_536;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ii_reg_283 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    ires_reg_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                ires_reg_294 <= ap_const_lv4_0;
            elsif (((exitcond_reg_747 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                ires_reg_294 <= ires_1_reg_751;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_747 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                L2_BIAS_load_reg_766 <= L2_BIAS_q0;
                tmp_25_reg_761 <= tmp_25_fu_506_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter1_exitcond5_reg_532 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                acc_1_1_reg_702 <= grp_fu_311_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_exitcond5_reg_532 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                acc_2_1_reg_707 <= grp_fu_306_p2;
                acc_3_1_reg_712 <= grp_fu_311_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_exitcond5_reg_532 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                acc_4_1_reg_717 <= grp_fu_306_p2;
                acc_5_1_reg_722 <= grp_fu_311_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_exitcond5_reg_532 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                acc_6_1_reg_727 <= grp_fu_306_p2;
                acc_7_1_reg_732 <= grp_fu_311_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_reg_pp0_iter1_exitcond5_reg_532 <= exitcond5_reg_532;
                ap_reg_pp0_iter2_exitcond5_reg_532 <= ap_reg_pp0_iter1_exitcond5_reg_532;
                exitcond5_reg_532 <= exitcond5_fu_338_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_reg_pp1_iter1_exitcond_reg_747 <= exitcond_reg_747;
                exitcond_reg_747 <= exitcond_fu_489_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                ap_reg_pp1_iter2_exitcond_reg_747 <= ap_reg_pp1_iter1_exitcond_reg_747;
                ap_reg_pp1_iter3_exitcond_reg_747 <= ap_reg_pp1_iter2_exitcond_reg_747;
                ap_reg_pp1_iter4_exitcond_reg_747 <= ap_reg_pp1_iter3_exitcond_reg_747;
                ap_reg_pp1_iter5_exitcond_reg_747 <= ap_reg_pp1_iter4_exitcond_reg_747;
                ap_reg_pp1_iter6_exitcond_reg_747 <= ap_reg_pp1_iter5_exitcond_reg_747;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ii_2_reg_536 <= ii_2_fu_344_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ires_1_reg_751 <= ires_1_fu_495_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_reg_pp1_iter5_exitcond_reg_747 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_reg_pp0_iter1_exitcond5_reg_532 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then
                reg_332 <= grp_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_reg_532 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp_10_reg_567 <= L2_WEIGHTS_q0(127 downto 96);
                tmp_12_reg_572 <= L2_WEIGHTS_q0(159 downto 128);
                tmp_14_reg_577 <= L2_WEIGHTS_q0(191 downto 160);
                tmp_16_reg_582 <= L2_WEIGHTS_q0(223 downto 192);
                tmp_18_reg_587 <= L2_WEIGHTS_q0(255 downto 224);
                tmp_20_reg_592 <= L2_WEIGHTS_q0(287 downto 256);
                tmp_22_reg_597 <= L2_WEIGHTS_q0(319 downto 288);
                tmp_26_reg_546 <= data_in_V_dout;
                tmp_5_reg_557 <= L2_WEIGHTS_q0(63 downto 32);
                tmp_7_reg_562 <= L2_WEIGHTS_q0(95 downto 64);
                tmp_8_reg_552 <= tmp_8_fu_355_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_reg_532 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_13_1_reg_637 <= grp_fu_328_p2;
                tmp_4_reg_632 <= grp_fu_324_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter1_exitcond5_reg_532 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp_13_2_reg_652 <= grp_fu_324_p2;
                tmp_13_3_reg_657 <= grp_fu_328_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter1_exitcond5_reg_532 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                tmp_13_4_reg_672 <= grp_fu_324_p2;
                tmp_13_5_reg_677 <= grp_fu_328_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter1_exitcond5_reg_532 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                tmp_13_6_reg_682 <= grp_fu_324_p2;
                tmp_13_7_reg_687 <= grp_fu_328_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter1_exitcond5_reg_532 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                tmp_13_8_reg_692 <= grp_fu_324_p2;
                tmp_13_9_reg_697 <= grp_fu_328_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter7, ap_enable_reg_pp0_iter2, ap_enable_reg_pp1_iter6, exitcond5_fu_338_p2, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, exitcond_fu_489_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_block_pp0_stage4_subdone, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond5_fu_338_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond5_fu_338_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (exitcond_fu_489_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter7 = ap_const_logic_1) and (ap_enable_reg_pp1_iter6 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter7 = ap_const_logic_1) and (ap_enable_reg_pp1_iter6 = ap_const_logic_0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (exitcond_fu_489_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    L2_BIAS_address0 <= tmp_9_fu_501_p1(4 - 1 downto 0);

    L2_BIAS_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            L2_BIAS_ce0 <= ap_const_logic_1;
        else 
            L2_BIAS_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    L2_WEIGHTS_address0 <= tmp_s_fu_350_p1(6 - 1 downto 0);

    L2_WEIGHTS_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            L2_WEIGHTS_ce0 <= ap_const_logic_1;
        else 
            L2_WEIGHTS_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state17 <= ap_CS_fsm(6);
    ap_CS_fsm_state26 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(data_in_V_empty_n, ap_enable_reg_pp0_iter0, exitcond5_reg_532)
    begin
                ap_block_pp0_stage1_11001 <= ((exitcond5_reg_532 = ap_const_lv1_0) and (data_in_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(data_in_V_empty_n, ap_enable_reg_pp0_iter0, exitcond5_reg_532)
    begin
                ap_block_pp0_stage1_subdone <= ((exitcond5_reg_532 = ap_const_lv1_0) and (data_in_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_01001_assign_proc : process(data_out_V_full_n, ap_enable_reg_pp1_iter7, ap_reg_pp1_iter6_exitcond_reg_747)
    begin
                ap_block_pp1_stage0_01001 <= ((ap_reg_pp1_iter6_exitcond_reg_747 = ap_const_lv1_0) and (data_out_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter7 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_11001_assign_proc : process(data_out_V_full_n, ap_enable_reg_pp1_iter7, ap_reg_pp1_iter6_exitcond_reg_747)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_reg_pp1_iter6_exitcond_reg_747 = ap_const_lv1_0) and (data_out_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter7 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(data_out_V_full_n, ap_enable_reg_pp1_iter7, ap_reg_pp1_iter6_exitcond_reg_747)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_reg_pp1_iter6_exitcond_reg_747 = ap_const_lv1_0) and (data_out_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter7 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp1_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state25_pp1_stage0_iter7_assign_proc : process(data_out_V_full_n, ap_reg_pp1_iter6_exitcond_reg_747)
    begin
                ap_block_state25_pp1_stage0_iter7 <= ((ap_reg_pp1_iter6_exitcond_reg_747 = ap_const_lv1_0) and (data_out_V_full_n = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage1_iter0_assign_proc : process(data_in_V_empty_n, exitcond5_reg_532)
    begin
                ap_block_state3_pp0_stage1_iter0 <= ((exitcond5_reg_532 = ap_const_lv1_0) and (data_in_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond5_fu_338_p2)
    begin
        if ((exitcond5_fu_338_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state18_assign_proc : process(exitcond_fu_489_p2)
    begin
        if ((exitcond_fu_489_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state18 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter7, ap_enable_reg_pp1_iter6, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5)
    begin
        if (((ap_enable_reg_pp1_iter7 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_acc_0_phi_fu_275_p4_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, acc_0_reg_271, reg_332, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter2_exitcond5_reg_532)
    begin
        if (((ap_reg_pp0_iter2_exitcond5_reg_532 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_acc_0_phi_fu_275_p4 <= reg_332;
        else 
            ap_phi_mux_acc_0_phi_fu_275_p4 <= acc_0_reg_271;
        end if; 
    end process;


    ap_phi_mux_acc_1_phi_fu_263_p4_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, acc_1_reg_259, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter2_exitcond5_reg_532, acc_1_1_reg_702)
    begin
        if (((ap_reg_pp0_iter2_exitcond5_reg_532 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_acc_1_phi_fu_263_p4 <= acc_1_1_reg_702;
        else 
            ap_phi_mux_acc_1_phi_fu_263_p4 <= acc_1_reg_259;
        end if; 
    end process;


    ap_phi_mux_acc_2_phi_fu_251_p4_assign_proc : process(acc_2_reg_247, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter2_exitcond5_reg_532, ap_CS_fsm_pp0_stage2, acc_2_1_reg_707, ap_block_pp0_stage2)
    begin
        if (((ap_reg_pp0_iter2_exitcond5_reg_532 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_acc_2_phi_fu_251_p4 <= acc_2_1_reg_707;
        else 
            ap_phi_mux_acc_2_phi_fu_251_p4 <= acc_2_reg_247;
        end if; 
    end process;


    ap_phi_mux_acc_3_phi_fu_239_p4_assign_proc : process(acc_3_reg_235, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter2_exitcond5_reg_532, ap_CS_fsm_pp0_stage2, acc_3_1_reg_712, ap_block_pp0_stage2)
    begin
        if (((ap_reg_pp0_iter2_exitcond5_reg_532 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_acc_3_phi_fu_239_p4 <= acc_3_1_reg_712;
        else 
            ap_phi_mux_acc_3_phi_fu_239_p4 <= acc_3_reg_235;
        end if; 
    end process;


    ap_phi_mux_acc_4_phi_fu_227_p4_assign_proc : process(acc_4_reg_223, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter2_exitcond5_reg_532, ap_CS_fsm_pp0_stage3, acc_4_1_reg_717, ap_block_pp0_stage3)
    begin
        if (((ap_reg_pp0_iter2_exitcond5_reg_532 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_acc_4_phi_fu_227_p4 <= acc_4_1_reg_717;
        else 
            ap_phi_mux_acc_4_phi_fu_227_p4 <= acc_4_reg_223;
        end if; 
    end process;


    ap_phi_mux_acc_5_phi_fu_215_p4_assign_proc : process(acc_5_reg_211, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter2_exitcond5_reg_532, ap_CS_fsm_pp0_stage3, acc_5_1_reg_722, ap_block_pp0_stage3)
    begin
        if (((ap_reg_pp0_iter2_exitcond5_reg_532 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_acc_5_phi_fu_215_p4 <= acc_5_1_reg_722;
        else 
            ap_phi_mux_acc_5_phi_fu_215_p4 <= acc_5_reg_211;
        end if; 
    end process;


    ap_phi_mux_acc_6_phi_fu_203_p4_assign_proc : process(acc_6_reg_199, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter2_exitcond5_reg_532, ap_CS_fsm_pp0_stage4, acc_6_1_reg_727, ap_block_pp0_stage4)
    begin
        if (((ap_reg_pp0_iter2_exitcond5_reg_532 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_acc_6_phi_fu_203_p4 <= acc_6_1_reg_727;
        else 
            ap_phi_mux_acc_6_phi_fu_203_p4 <= acc_6_reg_199;
        end if; 
    end process;


    ap_phi_mux_acc_7_phi_fu_191_p4_assign_proc : process(acc_7_reg_187, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter2_exitcond5_reg_532, ap_CS_fsm_pp0_stage4, acc_7_1_reg_732, ap_block_pp0_stage4)
    begin
        if (((ap_reg_pp0_iter2_exitcond5_reg_532 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_acc_7_phi_fu_191_p4 <= acc_7_1_reg_732;
        else 
            ap_phi_mux_acc_7_phi_fu_191_p4 <= acc_7_reg_187;
        end if; 
    end process;


    ap_phi_mux_ii_phi_fu_287_p4_assign_proc : process(exitcond5_reg_532, ii_reg_283, ap_CS_fsm_pp0_stage0, ii_2_reg_536, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond5_reg_532 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_ii_phi_fu_287_p4 <= ii_2_reg_536;
        else 
            ap_phi_mux_ii_phi_fu_287_p4 <= ii_reg_283;
        end if; 
    end process;


    ap_phi_mux_ires_phi_fu_298_p4_assign_proc : process(ap_block_pp1_stage0, exitcond_reg_747, ires_reg_294, ap_CS_fsm_pp1_stage0, ires_1_reg_751, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (exitcond_reg_747 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_ires_phi_fu_298_p4 <= ires_1_reg_751;
        else 
            ap_phi_mux_ires_phi_fu_298_p4 <= ires_reg_294;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    data_in_V_blk_n_assign_proc : process(data_in_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, exitcond5_reg_532)
    begin
        if (((exitcond5_reg_532 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            data_in_V_blk_n <= data_in_V_empty_n;
        else 
            data_in_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_in_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond5_reg_532, ap_block_pp0_stage1_11001)
    begin
        if (((exitcond5_reg_532 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            data_in_V_read <= ap_const_logic_1;
        else 
            data_in_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_out_V_blk_n_assign_proc : process(data_out_V_full_n, ap_enable_reg_pp1_iter7, ap_block_pp1_stage0, ap_reg_pp1_iter6_exitcond_reg_747)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_reg_pp1_iter6_exitcond_reg_747 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter7 = ap_const_logic_1))) then 
            data_out_V_blk_n <= data_out_V_full_n;
        else 
            data_out_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_out_V_din <= reg_332;

    data_out_V_write_assign_proc : process(ap_enable_reg_pp1_iter7, ap_reg_pp1_iter6_exitcond_reg_747, ap_block_pp1_stage0_11001)
    begin
        if (((ap_reg_pp1_iter6_exitcond_reg_747 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            data_out_V_write <= ap_const_logic_1;
        else 
            data_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    exitcond5_fu_338_p2 <= "1" when (ap_phi_mux_ii_phi_fu_287_p4 = ap_const_lv7_40) else "0";
    exitcond_fu_489_p2 <= "1" when (ap_phi_mux_ires_phi_fu_298_p4 = ap_const_lv4_A) else "0";

    grp_fu_306_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp1_stage0)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            grp_fu_306_ce <= ap_const_logic_1;
        else 
            grp_fu_306_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_306_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp1_stage0, acc_8_reg_175, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, tmp_25_reg_761, ap_enable_reg_pp1_iter2, ap_block_pp0_stage4, ap_phi_mux_acc_6_phi_fu_203_p4, ap_block_pp0_stage3, ap_phi_mux_acc_4_phi_fu_227_p4, ap_block_pp0_stage2, ap_phi_mux_acc_2_phi_fu_251_p4, ap_phi_mux_acc_0_phi_fu_275_p4, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            grp_fu_306_p0 <= tmp_25_reg_761;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_306_p0 <= acc_8_reg_175;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_306_p0 <= ap_phi_mux_acc_6_phi_fu_203_p4;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_306_p0 <= ap_phi_mux_acc_4_phi_fu_227_p4;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_306_p0 <= ap_phi_mux_acc_2_phi_fu_251_p4;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_306_p0 <= ap_phi_mux_acc_0_phi_fu_275_p4;
        else 
            grp_fu_306_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_306_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp1_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, tmp_4_reg_632, ap_enable_reg_pp0_iter1, tmp_13_2_reg_652, tmp_13_4_reg_672, tmp_13_6_reg_682, tmp_13_8_reg_692, L2_BIAS_load_reg_766, ap_enable_reg_pp1_iter2, ap_block_pp0_stage4, ap_block_pp0_stage3, ap_block_pp0_stage2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            grp_fu_306_p1 <= L2_BIAS_load_reg_766;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_306_p1 <= tmp_13_8_reg_692;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_306_p1 <= tmp_13_6_reg_682;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_306_p1 <= tmp_13_4_reg_672;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_306_p1 <= tmp_13_2_reg_652;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_306_p1 <= tmp_4_reg_632;
        else 
            grp_fu_306_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_311_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            grp_fu_311_ce <= ap_const_logic_1;
        else 
            grp_fu_311_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_311_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, acc_9_reg_163, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_phi_mux_acc_7_phi_fu_191_p4, ap_block_pp0_stage4, ap_phi_mux_acc_5_phi_fu_215_p4, ap_block_pp0_stage3, ap_phi_mux_acc_3_phi_fu_239_p4, ap_block_pp0_stage2, ap_phi_mux_acc_1_phi_fu_263_p4, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_311_p0 <= acc_9_reg_163;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_311_p0 <= ap_phi_mux_acc_7_phi_fu_191_p4;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_311_p0 <= ap_phi_mux_acc_5_phi_fu_215_p4;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_311_p0 <= ap_phi_mux_acc_3_phi_fu_239_p4;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_311_p0 <= ap_phi_mux_acc_1_phi_fu_263_p4;
        else 
            grp_fu_311_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_311_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, tmp_13_1_reg_637, tmp_13_3_reg_657, tmp_13_5_reg_677, tmp_13_7_reg_687, tmp_13_9_reg_697, ap_block_pp0_stage4, ap_block_pp0_stage3, ap_block_pp0_stage2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_311_p1 <= tmp_13_9_reg_697;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_311_p1 <= tmp_13_7_reg_687;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_311_p1 <= tmp_13_5_reg_677;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_311_p1 <= tmp_13_3_reg_657;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_311_p1 <= tmp_13_1_reg_637;
        else 
            grp_fu_311_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_324_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            grp_fu_324_ce <= ap_const_logic_1;
        else 
            grp_fu_324_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_324_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, tmp_3_fu_449_p1, ap_CS_fsm_pp0_stage2, tmp_2_fu_457_p1, ap_CS_fsm_pp0_stage3, tmp_13_fu_465_p1, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, tmp_17_fu_473_p1, tmp_21_fu_481_p1, ap_block_pp0_stage4, ap_block_pp0_stage3, ap_block_pp0_stage2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_324_p1 <= tmp_21_fu_481_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_324_p1 <= tmp_17_fu_473_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_324_p1 <= tmp_13_fu_465_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_324_p1 <= tmp_2_fu_457_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_324_p1 <= tmp_3_fu_449_p1;
        else 
            grp_fu_324_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_328_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            grp_fu_328_ce <= ap_const_logic_1;
        else 
            grp_fu_328_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_328_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, tmp_6_fu_453_p1, ap_CS_fsm_pp0_stage3, tmp_11_fu_461_p1, ap_CS_fsm_pp0_stage4, tmp_15_fu_469_p1, ap_enable_reg_pp0_iter1, tmp_19_fu_477_p1, tmp_23_fu_485_p1, ap_block_pp0_stage4, ap_block_pp0_stage3, ap_block_pp0_stage2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_328_p1 <= tmp_23_fu_485_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_328_p1 <= tmp_19_fu_477_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_328_p1 <= tmp_15_fu_469_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_328_p1 <= tmp_11_fu_461_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_328_p1 <= tmp_6_fu_453_p1;
        else 
            grp_fu_328_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    ii_2_fu_344_p2 <= std_logic_vector(unsigned(ap_phi_mux_ii_phi_fu_287_p4) + unsigned(ap_const_lv7_1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ires_1_fu_495_p2 <= std_logic_vector(unsigned(ap_phi_mux_ires_phi_fu_298_p4) + unsigned(ap_const_lv4_1));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_11_fu_461_p1 <= tmp_10_reg_567;
    tmp_13_fu_465_p1 <= tmp_12_reg_572;
    tmp_15_fu_469_p1 <= tmp_14_reg_577;
    tmp_17_fu_473_p1 <= tmp_16_reg_582;
    tmp_19_fu_477_p1 <= tmp_18_reg_587;
    tmp_21_fu_481_p1 <= tmp_20_reg_592;
    tmp_23_fu_485_p1 <= tmp_22_reg_597;
    tmp_2_fu_457_p1 <= tmp_7_reg_562;
    tmp_3_fu_449_p1 <= tmp_8_reg_552;
    tmp_6_fu_453_p1 <= tmp_5_reg_557;
    tmp_8_fu_355_p1 <= L2_WEIGHTS_q0(32 - 1 downto 0);
    tmp_9_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_ires_phi_fu_298_p4),64));
    tmp_s_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_ii_phi_fu_287_p4),64));
end behav;
