// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _relu_HH_
#define _relu_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "mnist_fp32_naive_g8j.h"

namespace ap_rtl {

struct relu : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<32> > data_in_V_dout;
    sc_in< sc_logic > data_in_V_empty_n;
    sc_out< sc_logic > data_in_V_read;
    sc_out< sc_lv<32> > data_out_V_din;
    sc_in< sc_logic > data_out_V_full_n;
    sc_out< sc_logic > data_out_V_write;
    sc_signal< sc_lv<32> > ap_var_for_const0;
    sc_signal< sc_lv<5> > ap_var_for_const1;


    // Module declarations
    relu(sc_module_name name);
    SC_HAS_PROCESS(relu);

    ~relu();

    sc_trace_file* mVcdFile;

    mnist_fp32_naive_g8j<1,1,32,32,1>* mnist_fp32_naive_g8j_U43;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > data_in_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > exitcond_fu_94_p2;
    sc_signal< sc_logic > data_out_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > tmp_9_fu_141_p2;
    sc_signal< sc_lv<7> > ii_1_fu_100_p2;
    sc_signal< sc_lv<7> > ii_1_reg_150;
    sc_signal< bool > ap_block_state2;
    sc_signal< sc_lv<32> > tmp_1_reg_155;
    sc_signal< sc_lv<7> > ii_reg_78;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_state3;
    sc_signal< sc_lv<32> > data_to_int_fu_106_p1;
    sc_signal< sc_lv<8> > tmp_4_fu_109_p4;
    sc_signal< sc_lv<23> > tmp_fu_119_p1;
    sc_signal< sc_lv<1> > notrhs_fu_129_p2;
    sc_signal< sc_lv<1> > notlhs_fu_123_p2;
    sc_signal< sc_lv<1> > tmp_7_fu_135_p2;
    sc_signal< sc_lv<1> > tmp_8_fu_89_p2;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< bool > ap_condition_94;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<7> ap_const_lv7_40;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<23> ap_const_lv23_0;
    static const sc_lv<5> ap_const_lv5_2;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_block_state1();
    void thread_ap_block_state2();
    void thread_ap_block_state3();
    void thread_ap_condition_94();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_data_in_V_blk_n();
    void thread_data_in_V_read();
    void thread_data_out_V_blk_n();
    void thread_data_out_V_din();
    void thread_data_out_V_write();
    void thread_data_to_int_fu_106_p1();
    void thread_exitcond_fu_94_p2();
    void thread_ii_1_fu_100_p2();
    void thread_internal_ap_ready();
    void thread_notlhs_fu_123_p2();
    void thread_notrhs_fu_129_p2();
    void thread_real_start();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp_4_fu_109_p4();
    void thread_tmp_7_fu_135_p2();
    void thread_tmp_9_fu_141_p2();
    void thread_tmp_fu_119_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
