// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __linear_activationcud_H__
#define __linear_activationcud_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct linear_activationcud_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(linear_activationcud_ram) {
        ram[0] = "0b10111101101101001011100100100001";
        ram[1] = "0b10111110000011100000110011111001";
        ram[2] = "0b00111101101011011110111110101000";
        ram[3] = "0b10111101010010101110111001001101";
        ram[4] = "0b00111101100000110000011011110000";
        ram[5] = "0b00111110010010001110000111100010";
        ram[6] = "0b10111101100011011110110010000000";
        ram[7] = "0b10111100100110011111110101010111";
        ram[8] = "0b10111101010011001110111001100110";
        ram[9] = "0b10111101001011101110010110111010";
        ram[10] = "0b00111110010000000001110000000000";
        ram[11] = "0b10111101000001010100010001000011";
        ram[12] = "0b00111011010001011101000100011101";
        ram[13] = "0b00111100101110011111100110110100";
        ram[14] = "0b10111110010000101011111110011100";
        ram[15] = "0b10111110000000101011001100100100";
        ram[16] = "0b00111101101011100010100000111001";
        ram[17] = "0b00111101100110101101111000111110";
        ram[18] = "0b10111110001000100011100000000110";
        ram[19] = "0b10111101001110101010001101110010";
        ram[20] = "0b10111110000001110010001101110100";
        ram[21] = "0b10111110001001010111011111001100";
        ram[22] = "0b10111110010000100100010111000111";
        ram[23] = "0b00111110010001010100110011110110";
        ram[24] = "0b10111110000010101111101000000111";
        ram[25] = "0b00111100111001011110011101001101";
        ram[26] = "0b10111101110000001010101001111011";
        ram[27] = "0b00111101100001000000011000100010";
        ram[28] = "0b10111101111000010000100000100010";
        ram[29] = "0b00111101111100001101111000111110";
        ram[30] = "0b10111110110010100110101010111000";
        ram[31] = "0b10111100100010001111000011000010";
        ram[32] = "0b10111110000100100111100111101101";
        ram[33] = "0b10111110011111111010001010000100";
        ram[34] = "0b10111101110011101101011010011111";
        ram[35] = "0b10111101110111100000010100101110";
        ram[36] = "0b10111101111110001000100101011100";
        ram[37] = "0b00111110001011111000111101011001";
        ram[38] = "0b10111110010001011010011100101100";
        ram[39] = "0b00111101111110101000011101010101";
        ram[40] = "0b10111011101100100011000011001111";
        ram[41] = "0b10111110100101011010111011100101";
        ram[42] = "0b10111101101100111000010100011101";
        ram[43] = "0b00111101111111000000100010011011";
        ram[44] = "0b10111110101100011011011001011100";
        ram[45] = "0b00111110010001110101110100010111";
        ram[46] = "0b00111110100110110001000001101100";
        ram[47] = "0b10111110000000011011000110001001";
        ram[48] = "0b10111110000100110011111001001110";
        ram[49] = "0b10111101101001110100010100110011";
        ram[50] = "0b00111101111011100101011111001111";
        ram[51] = "0b10111101101000111101001001011100";
        ram[52] = "0b00111100110100100101110011101110";
        ram[53] = "0b10111100101011100100100101101011";
        ram[54] = "0b00111101000110100101011010010101";
        ram[55] = "0b10111010001001010101011110011010";
        ram[56] = "0b00111110000111111010101110010110";
        ram[57] = "0b10111110000111010001000000111010";
        ram[58] = "0b10111101101100111011000010001100";
        ram[59] = "0b00111100101101101010011110001010";
        ram[60] = "0b00111110001000001111010001101011";
        ram[61] = "0b00111110000001111001110100110001";
        ram[62] = "0b00111110100000100011011010000000";
        ram[63] = "0b10111101111101011101001100000101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(linear_activationcud) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


linear_activationcud_ram* meminst;


SC_CTOR(linear_activationcud) {
meminst = new linear_activationcud_ram("linear_activationcud_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~linear_activationcud() {
    delete meminst;
}


};//endmodule
#endif
