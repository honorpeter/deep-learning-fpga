// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __linear_activationibs_H__
#define __linear_activationibs_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct linear_activationibs_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 10;
  static const unsigned AddressWidth = 4;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(linear_activationibs_ram) {
        ram[0] = "0b10111110110000110011101010100100";
        ram[1] = "0b00111110000010111000010011000110";
        ram[2] = "0b10111100111011010111111010100111";
        ram[3] = "0b10111110010001110010010100011001";
        ram[4] = "0b00111101110001111101101101011011";
        ram[5] = "0b00111110001101111110110010001011";
        ram[6] = "0b00111100110111010011011111010001";
        ram[7] = "0b10111100100001111010001101000100";
        ram[8] = "0b10111011111010010001101001111001";
        ram[9] = "0b10111101011111101000011001111010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(linear_activationibs) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 10;
static const unsigned AddressWidth = 4;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


linear_activationibs_ram* meminst;


SC_CTOR(linear_activationibs) {
meminst = new linear_activationibs_ram("linear_activationibs_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~linear_activationibs() {
    delete meminst;
}


};//endmodule
#endif
