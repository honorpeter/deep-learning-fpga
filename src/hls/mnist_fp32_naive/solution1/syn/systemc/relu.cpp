// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "relu.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic relu::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic relu::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> relu::ap_ST_fsm_state1 = "1";
const sc_lv<3> relu::ap_ST_fsm_state2 = "10";
const sc_lv<3> relu::ap_ST_fsm_state3 = "100";
const sc_lv<32> relu::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> relu::ap_const_lv32_1 = "1";
const sc_lv<1> relu::ap_const_lv1_0 = "0";
const sc_lv<32> relu::ap_const_lv32_2 = "10";
const sc_lv<1> relu::ap_const_lv1_1 = "1";
const sc_lv<7> relu::ap_const_lv7_0 = "0000000";
const sc_lv<7> relu::ap_const_lv7_40 = "1000000";
const sc_lv<7> relu::ap_const_lv7_1 = "1";
const sc_lv<32> relu::ap_const_lv32_17 = "10111";
const sc_lv<32> relu::ap_const_lv32_1E = "11110";
const sc_lv<8> relu::ap_const_lv8_FF = "11111111";
const sc_lv<23> relu::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<5> relu::ap_const_lv5_2 = "10";
const bool relu::ap_const_boolean_1 = true;

relu::relu(sc_module_name name) : sc_module(name), mVcdFile(0) {
    mnist_fp32_naive_g8j_U43 = new mnist_fp32_naive_g8j<1,1,32,32,1>("mnist_fp32_naive_g8j_U43");
    mnist_fp32_naive_g8j_U43->din0(tmp_1_reg_155);
    mnist_fp32_naive_g8j_U43->din1(ap_var_for_const0);
    mnist_fp32_naive_g8j_U43->opcode(ap_var_for_const1);
    mnist_fp32_naive_g8j_U43->dout(tmp_8_fu_89_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2);
    sensitive << ( data_in_V_empty_n );
    sensitive << ( exitcond_fu_94_p2 );

    SC_METHOD(thread_ap_block_state3);
    sensitive << ( data_out_V_full_n );
    sensitive << ( tmp_9_fu_141_p2 );

    SC_METHOD(thread_ap_condition_94);
    sensitive << ( data_out_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_9_fu_141_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( data_in_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_94_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_data_in_V_blk_n);
    sensitive << ( data_in_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_94_p2 );

    SC_METHOD(thread_data_in_V_read);
    sensitive << ( data_in_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_94_p2 );

    SC_METHOD(thread_data_out_V_blk_n);
    sensitive << ( data_out_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_9_fu_141_p2 );

    SC_METHOD(thread_data_out_V_din);
    sensitive << ( tmp_9_fu_141_p2 );
    sensitive << ( tmp_1_reg_155 );
    sensitive << ( ap_condition_94 );

    SC_METHOD(thread_data_out_V_write);
    sensitive << ( data_out_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_9_fu_141_p2 );

    SC_METHOD(thread_data_to_int_fu_106_p1);
    sensitive << ( tmp_1_reg_155 );

    SC_METHOD(thread_exitcond_fu_94_p2);
    sensitive << ( data_in_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_94_p2 );
    sensitive << ( ii_reg_78 );

    SC_METHOD(thread_ii_1_fu_100_p2);
    sensitive << ( ii_reg_78 );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( data_in_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_94_p2 );

    SC_METHOD(thread_notlhs_fu_123_p2);
    sensitive << ( data_out_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_9_fu_141_p2 );
    sensitive << ( tmp_4_fu_109_p4 );

    SC_METHOD(thread_notrhs_fu_129_p2);
    sensitive << ( data_out_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_9_fu_141_p2 );
    sensitive << ( tmp_fu_119_p1 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_tmp_4_fu_109_p4);
    sensitive << ( data_to_int_fu_106_p1 );

    SC_METHOD(thread_tmp_7_fu_135_p2);
    sensitive << ( notrhs_fu_129_p2 );
    sensitive << ( notlhs_fu_123_p2 );

    SC_METHOD(thread_tmp_9_fu_141_p2);
    sensitive << ( tmp_7_fu_135_p2 );
    sensitive << ( tmp_8_fu_89_p2 );

    SC_METHOD(thread_tmp_fu_119_p1);
    sensitive << ( data_to_int_fu_106_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( data_in_V_empty_n );
    sensitive << ( data_out_V_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_94_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_9_fu_141_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "relu_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, data_in_V_dout, "(port)data_in_V_dout");
    sc_trace(mVcdFile, data_in_V_empty_n, "(port)data_in_V_empty_n");
    sc_trace(mVcdFile, data_in_V_read, "(port)data_in_V_read");
    sc_trace(mVcdFile, data_out_V_din, "(port)data_out_V_din");
    sc_trace(mVcdFile, data_out_V_full_n, "(port)data_out_V_full_n");
    sc_trace(mVcdFile, data_out_V_write, "(port)data_out_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, data_in_V_blk_n, "data_in_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, exitcond_fu_94_p2, "exitcond_fu_94_p2");
    sc_trace(mVcdFile, data_out_V_blk_n, "data_out_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_9_fu_141_p2, "tmp_9_fu_141_p2");
    sc_trace(mVcdFile, ii_1_fu_100_p2, "ii_1_fu_100_p2");
    sc_trace(mVcdFile, ii_1_reg_150, "ii_1_reg_150");
    sc_trace(mVcdFile, ap_block_state2, "ap_block_state2");
    sc_trace(mVcdFile, tmp_1_reg_155, "tmp_1_reg_155");
    sc_trace(mVcdFile, ii_reg_78, "ii_reg_78");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_block_state3, "ap_block_state3");
    sc_trace(mVcdFile, data_to_int_fu_106_p1, "data_to_int_fu_106_p1");
    sc_trace(mVcdFile, tmp_4_fu_109_p4, "tmp_4_fu_109_p4");
    sc_trace(mVcdFile, tmp_fu_119_p1, "tmp_fu_119_p1");
    sc_trace(mVcdFile, notrhs_fu_129_p2, "notrhs_fu_129_p2");
    sc_trace(mVcdFile, notlhs_fu_123_p2, "notlhs_fu_123_p2");
    sc_trace(mVcdFile, tmp_7_fu_135_p2, "tmp_7_fu_135_p2");
    sc_trace(mVcdFile, tmp_8_fu_89_p2, "tmp_8_fu_89_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_condition_94, "ap_condition_94");
#endif

    }
}

relu::~relu() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete mnist_fp32_naive_g8j_U43;
}

void relu::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv32_0;
}

void relu::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv5_2;
}

void relu::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    !(esl_seteq<1,1,1>(exitcond_fu_94_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, data_in_V_empty_n.read())) && 
                    esl_seteq<1,1,1>(exitcond_fu_94_p2.read(), ap_const_lv1_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         !((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_9_fu_141_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_full_n.read())) || (esl_seteq<1,1,1>(tmp_9_fu_141_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_full_n.read()))))) {
        ii_reg_78 = ii_1_reg_150.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        ii_reg_78 = ap_const_lv7_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(exitcond_fu_94_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, data_in_V_empty_n.read())))) {
        ii_1_reg_150 = ii_1_fu_100_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond_fu_94_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(exitcond_fu_94_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, data_in_V_empty_n.read())))) {
        tmp_1_reg_155 = data_in_V_dout.read();
    }
}

void relu::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void relu::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void relu::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void relu::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void relu::thread_ap_block_state2() {
    ap_block_state2 = (esl_seteq<1,1,1>(exitcond_fu_94_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, data_in_V_empty_n.read()));
}

void relu::thread_ap_block_state3() {
    ap_block_state3 = ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_9_fu_141_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_full_n.read())) || (esl_seteq<1,1,1>(tmp_9_fu_141_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_full_n.read())));
}

void relu::thread_ap_condition_94() {
    ap_condition_94 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_9_fu_141_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_full_n.read())) || (esl_seteq<1,1,1>(tmp_9_fu_141_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_full_n.read()))));
}

void relu::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(exitcond_fu_94_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, data_in_V_empty_n.read())) && 
         esl_seteq<1,1,1>(exitcond_fu_94_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void relu::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void relu::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void relu::thread_data_in_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_94_p2.read(), ap_const_lv1_0))) {
        data_in_V_blk_n = data_in_V_empty_n.read();
    } else {
        data_in_V_blk_n = ap_const_logic_1;
    }
}

void relu::thread_data_in_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_94_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(exitcond_fu_94_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, data_in_V_empty_n.read())))) {
        data_in_V_read = ap_const_logic_1;
    } else {
        data_in_V_read = ap_const_logic_0;
    }
}

void relu::thread_data_out_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(tmp_9_fu_141_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_9_fu_141_p2.read())))) {
        data_out_V_blk_n = data_out_V_full_n.read();
    } else {
        data_out_V_blk_n = ap_const_logic_1;
    }
}

void relu::thread_data_out_V_din() {
    if (esl_seteq<1,1,1>(ap_condition_94.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(tmp_9_fu_141_p2.read(), ap_const_lv1_1)) {
            data_out_V_din = tmp_1_reg_155.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_9_fu_141_p2.read())) {
            data_out_V_din = ap_const_lv32_0;
        } else {
            data_out_V_din = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        data_out_V_din = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void relu::thread_data_out_V_write() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_9_fu_141_p2.read()) && 
          !((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_9_fu_141_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_full_n.read())) || (esl_seteq<1,1,1>(tmp_9_fu_141_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_full_n.read())))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(tmp_9_fu_141_p2.read(), ap_const_lv1_1) && 
          !((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_9_fu_141_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_full_n.read())) || (esl_seteq<1,1,1>(tmp_9_fu_141_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_full_n.read())))))) {
        data_out_V_write = ap_const_logic_1;
    } else {
        data_out_V_write = ap_const_logic_0;
    }
}

void relu::thread_data_to_int_fu_106_p1() {
    data_to_int_fu_106_p1 = tmp_1_reg_155.read();
}

void relu::thread_exitcond_fu_94_p2() {
    exitcond_fu_94_p2 = (!ii_reg_78.read().is_01() || !ap_const_lv7_40.is_01())? sc_lv<1>(): sc_lv<1>(ii_reg_78.read() == ap_const_lv7_40);
}

void relu::thread_ii_1_fu_100_p2() {
    ii_1_fu_100_p2 = (!ii_reg_78.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(ii_reg_78.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void relu::thread_internal_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(exitcond_fu_94_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, data_in_V_empty_n.read())) && 
         esl_seteq<1,1,1>(exitcond_fu_94_p2.read(), ap_const_lv1_1))) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void relu::thread_notlhs_fu_123_p2() {
    notlhs_fu_123_p2 = (!tmp_4_fu_109_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_4_fu_109_p4.read() != ap_const_lv8_FF);
}

void relu::thread_notrhs_fu_129_p2() {
    notrhs_fu_129_p2 = (!tmp_fu_119_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_fu_119_p1.read() == ap_const_lv23_0);
}

void relu::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void relu::thread_start_out() {
    start_out = real_start.read();
}

void relu::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void relu::thread_tmp_4_fu_109_p4() {
    tmp_4_fu_109_p4 = data_to_int_fu_106_p1.read().range(30, 23);
}

void relu::thread_tmp_7_fu_135_p2() {
    tmp_7_fu_135_p2 = (notrhs_fu_129_p2.read() | notlhs_fu_123_p2.read());
}

void relu::thread_tmp_9_fu_141_p2() {
    tmp_9_fu_141_p2 = (tmp_7_fu_135_p2.read() & tmp_8_fu_89_p2.read());
}

void relu::thread_tmp_fu_119_p1() {
    tmp_fu_119_p1 = data_to_int_fu_106_p1.read().range(23-1, 0);
}

void relu::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(exitcond_fu_94_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, data_in_V_empty_n.read())) && esl_seteq<1,1,1>(exitcond_fu_94_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond_fu_94_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(exitcond_fu_94_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, data_in_V_empty_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_9_fu_141_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_full_n.read())) || (esl_seteq<1,1,1>(tmp_9_fu_141_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, data_out_V_full_n.read()))))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<3>) ("XXX");
            break;
    }
}

}

