-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity linear_activationcud_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 6; 
             mem_size    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of linear_activationcud_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101101001011100100100001", 
    1 => "10111110000011100000110011111001", 
    2 => "00111101101011011110111110101000", 
    3 => "10111101010010101110111001001101", 
    4 => "00111101100000110000011011110000", 
    5 => "00111110010010001110000111100010", 
    6 => "10111101100011011110110010000000", 
    7 => "10111100100110011111110101010111", 
    8 => "10111101010011001110111001100110", 
    9 => "10111101001011101110010110111010", 
    10 => "00111110010000000001110000000000", 
    11 => "10111101000001010100010001000011", 
    12 => "00111011010001011101000100011101", 
    13 => "00111100101110011111100110110100", 
    14 => "10111110010000101011111110011100", 
    15 => "10111110000000101011001100100100", 
    16 => "00111101101011100010100000111001", 
    17 => "00111101100110101101111000111110", 
    18 => "10111110001000100011100000000110", 
    19 => "10111101001110101010001101110010", 
    20 => "10111110000001110010001101110100", 
    21 => "10111110001001010111011111001100", 
    22 => "10111110010000100100010111000111", 
    23 => "00111110010001010100110011110110", 
    24 => "10111110000010101111101000000111", 
    25 => "00111100111001011110011101001101", 
    26 => "10111101110000001010101001111011", 
    27 => "00111101100001000000011000100010", 
    28 => "10111101111000010000100000100010", 
    29 => "00111101111100001101111000111110", 
    30 => "10111110110010100110101010111000", 
    31 => "10111100100010001111000011000010", 
    32 => "10111110000100100111100111101101", 
    33 => "10111110011111111010001010000100", 
    34 => "10111101110011101101011010011111", 
    35 => "10111101110111100000010100101110", 
    36 => "10111101111110001000100101011100", 
    37 => "00111110001011111000111101011001", 
    38 => "10111110010001011010011100101100", 
    39 => "00111101111110101000011101010101", 
    40 => "10111011101100100011000011001111", 
    41 => "10111110100101011010111011100101", 
    42 => "10111101101100111000010100011101", 
    43 => "00111101111111000000100010011011", 
    44 => "10111110101100011011011001011100", 
    45 => "00111110010001110101110100010111", 
    46 => "00111110100110110001000001101100", 
    47 => "10111110000000011011000110001001", 
    48 => "10111110000100110011111001001110", 
    49 => "10111101101001110100010100110011", 
    50 => "00111101111011100101011111001111", 
    51 => "10111101101000111101001001011100", 
    52 => "00111100110100100101110011101110", 
    53 => "10111100101011100100100101101011", 
    54 => "00111101000110100101011010010101", 
    55 => "10111010001001010101011110011010", 
    56 => "00111110000111111010101110010110", 
    57 => "10111110000111010001000000111010", 
    58 => "10111101101100111011000010001100", 
    59 => "00111100101101101010011110001010", 
    60 => "00111110001000001111010001101011", 
    61 => "00111110000001111001110100110001", 
    62 => "00111110100000100011011010000000", 
    63 => "10111101111101011101001100000101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity linear_activationcud is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of linear_activationcud is
    component linear_activationcud_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    linear_activationcud_rom_U :  component linear_activationcud_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


