-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity relu is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    data_in_V_empty_n : IN STD_LOGIC;
    data_in_V_read : OUT STD_LOGIC;
    data_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_out_V_full_n : IN STD_LOGIC;
    data_out_V_write : OUT STD_LOGIC );
end;


architecture behav of relu is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal data_in_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_fu_94_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_out_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_9_fu_141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ii_1_fu_100_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ii_1_reg_150 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal tmp_1_reg_155 : STD_LOGIC_VECTOR (31 downto 0);
    signal ii_reg_78 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state3 : BOOLEAN;
    signal data_to_int_fu_106_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_109_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_119_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_89_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_condition_94 : BOOLEAN;

    component mnist_fp32_naive_g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    mnist_fp32_naive_g8j_U43 : component mnist_fp32_naive_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_1_reg_155,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_8_fu_89_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((exitcond_fu_94_p2 = ap_const_lv1_0) and (data_in_V_empty_n = ap_const_logic_0))) and (exitcond_fu_94_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ii_reg_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((tmp_9_fu_141_p2 = ap_const_lv1_0) and (data_out_V_full_n = ap_const_logic_0)) or ((tmp_9_fu_141_p2 = ap_const_lv1_1) and (data_out_V_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                ii_reg_78 <= ii_1_reg_150;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ii_reg_78 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond_fu_94_p2 = ap_const_lv1_0) and (data_in_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                ii_1_reg_150 <= ii_1_fu_100_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond_fu_94_p2 = ap_const_lv1_0) and (data_in_V_empty_n = ap_const_logic_0))) and (exitcond_fu_94_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_1_reg_155 <= data_in_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, data_in_V_empty_n, data_out_V_full_n, ap_CS_fsm_state2, exitcond_fu_94_p2, ap_CS_fsm_state3, tmp_9_fu_141_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((exitcond_fu_94_p2 = ap_const_lv1_0) and (data_in_V_empty_n = ap_const_logic_0))) and (exitcond_fu_94_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((exitcond_fu_94_p2 = ap_const_lv1_0) and (data_in_V_empty_n = ap_const_logic_0))) and (exitcond_fu_94_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not((((tmp_9_fu_141_p2 = ap_const_lv1_0) and (data_out_V_full_n = ap_const_logic_0)) or ((tmp_9_fu_141_p2 = ap_const_lv1_1) and (data_out_V_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(data_in_V_empty_n, exitcond_fu_94_p2)
    begin
                ap_block_state2 <= ((exitcond_fu_94_p2 = ap_const_lv1_0) and (data_in_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state3_assign_proc : process(data_out_V_full_n, tmp_9_fu_141_p2)
    begin
                ap_block_state3 <= (((tmp_9_fu_141_p2 = ap_const_lv1_0) and (data_out_V_full_n = ap_const_logic_0)) or ((tmp_9_fu_141_p2 = ap_const_lv1_1) and (data_out_V_full_n = ap_const_logic_0)));
    end process;


    ap_condition_94_assign_proc : process(data_out_V_full_n, ap_CS_fsm_state3, tmp_9_fu_141_p2)
    begin
                ap_condition_94 <= (not((((tmp_9_fu_141_p2 = ap_const_lv1_0) and (data_out_V_full_n = ap_const_logic_0)) or ((tmp_9_fu_141_p2 = ap_const_lv1_1) and (data_out_V_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3));
    end process;


    ap_done_assign_proc : process(ap_done_reg, data_in_V_empty_n, ap_CS_fsm_state2, exitcond_fu_94_p2)
    begin
        if ((not(((exitcond_fu_94_p2 = ap_const_lv1_0) and (data_in_V_empty_n = ap_const_logic_0))) and (exitcond_fu_94_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    data_in_V_blk_n_assign_proc : process(data_in_V_empty_n, ap_CS_fsm_state2, exitcond_fu_94_p2)
    begin
        if (((exitcond_fu_94_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_in_V_blk_n <= data_in_V_empty_n;
        else 
            data_in_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_in_V_read_assign_proc : process(data_in_V_empty_n, ap_CS_fsm_state2, exitcond_fu_94_p2)
    begin
        if ((not(((exitcond_fu_94_p2 = ap_const_lv1_0) and (data_in_V_empty_n = ap_const_logic_0))) and (exitcond_fu_94_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_in_V_read <= ap_const_logic_1;
        else 
            data_in_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_out_V_blk_n_assign_proc : process(data_out_V_full_n, ap_CS_fsm_state3, tmp_9_fu_141_p2)
    begin
        if ((((tmp_9_fu_141_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((tmp_9_fu_141_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            data_out_V_blk_n <= data_out_V_full_n;
        else 
            data_out_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_out_V_din_assign_proc : process(tmp_9_fu_141_p2, tmp_1_reg_155, ap_condition_94)
    begin
        if ((ap_const_boolean_1 = ap_condition_94)) then
            if ((tmp_9_fu_141_p2 = ap_const_lv1_1)) then 
                data_out_V_din <= tmp_1_reg_155;
            elsif ((tmp_9_fu_141_p2 = ap_const_lv1_0)) then 
                data_out_V_din <= ap_const_lv32_0;
            else 
                data_out_V_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            data_out_V_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_out_V_write_assign_proc : process(data_out_V_full_n, ap_CS_fsm_state3, tmp_9_fu_141_p2)
    begin
        if (((not((((tmp_9_fu_141_p2 = ap_const_lv1_0) and (data_out_V_full_n = ap_const_logic_0)) or ((tmp_9_fu_141_p2 = ap_const_lv1_1) and (data_out_V_full_n = ap_const_logic_0)))) and (tmp_9_fu_141_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not((((tmp_9_fu_141_p2 = ap_const_lv1_0) and (data_out_V_full_n = ap_const_logic_0)) or ((tmp_9_fu_141_p2 = ap_const_lv1_1) and (data_out_V_full_n = ap_const_logic_0)))) and (tmp_9_fu_141_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            data_out_V_write <= ap_const_logic_1;
        else 
            data_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    data_to_int_fu_106_p1 <= tmp_1_reg_155;
    exitcond_fu_94_p2 <= "1" when (ii_reg_78 = ap_const_lv7_40) else "0";
    ii_1_fu_100_p2 <= std_logic_vector(unsigned(ii_reg_78) + unsigned(ap_const_lv7_1));

    internal_ap_ready_assign_proc : process(data_in_V_empty_n, ap_CS_fsm_state2, exitcond_fu_94_p2)
    begin
        if ((not(((exitcond_fu_94_p2 = ap_const_lv1_0) and (data_in_V_empty_n = ap_const_logic_0))) and (exitcond_fu_94_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    notlhs_fu_123_p2 <= "0" when (tmp_4_fu_109_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_129_p2 <= "1" when (tmp_fu_119_p1 = ap_const_lv23_0) else "0";

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_4_fu_109_p4 <= data_to_int_fu_106_p1(30 downto 23);
    tmp_7_fu_135_p2 <= (notrhs_fu_129_p2 or notlhs_fu_123_p2);
    tmp_9_fu_141_p2 <= (tmp_8_fu_89_p2 and tmp_7_fu_135_p2);
    tmp_fu_119_p1 <= data_to_int_fu_106_p1(23 - 1 downto 0);
end behav;
