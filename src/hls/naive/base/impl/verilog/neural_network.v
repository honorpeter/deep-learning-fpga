// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="neural_network,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=3.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.701500,HLS_SYN_LAT=839235,HLS_SYN_TPT=none,HLS_SYN_MEM=11,HLS_SYN_DSP=5,HLS_SYN_FF=2901,HLS_SYN_LUT=3501}" *)

module neural_network (
        ap_clk,
        ap_rst_n,
        m_axi_mem_V_AWVALID,
        m_axi_mem_V_AWREADY,
        m_axi_mem_V_AWADDR,
        m_axi_mem_V_AWID,
        m_axi_mem_V_AWLEN,
        m_axi_mem_V_AWSIZE,
        m_axi_mem_V_AWBURST,
        m_axi_mem_V_AWLOCK,
        m_axi_mem_V_AWCACHE,
        m_axi_mem_V_AWPROT,
        m_axi_mem_V_AWQOS,
        m_axi_mem_V_AWREGION,
        m_axi_mem_V_AWUSER,
        m_axi_mem_V_WVALID,
        m_axi_mem_V_WREADY,
        m_axi_mem_V_WDATA,
        m_axi_mem_V_WSTRB,
        m_axi_mem_V_WLAST,
        m_axi_mem_V_WID,
        m_axi_mem_V_WUSER,
        m_axi_mem_V_ARVALID,
        m_axi_mem_V_ARREADY,
        m_axi_mem_V_ARADDR,
        m_axi_mem_V_ARID,
        m_axi_mem_V_ARLEN,
        m_axi_mem_V_ARSIZE,
        m_axi_mem_V_ARBURST,
        m_axi_mem_V_ARLOCK,
        m_axi_mem_V_ARCACHE,
        m_axi_mem_V_ARPROT,
        m_axi_mem_V_ARQOS,
        m_axi_mem_V_ARREGION,
        m_axi_mem_V_ARUSER,
        m_axi_mem_V_RVALID,
        m_axi_mem_V_RREADY,
        m_axi_mem_V_RDATA,
        m_axi_mem_V_RLAST,
        m_axi_mem_V_RID,
        m_axi_mem_V_RUSER,
        m_axi_mem_V_RRESP,
        m_axi_mem_V_BVALID,
        m_axi_mem_V_BREADY,
        m_axi_mem_V_BRESP,
        m_axi_mem_V_BID,
        m_axi_mem_V_BUSER,
        m_axi_out_V_AWVALID,
        m_axi_out_V_AWREADY,
        m_axi_out_V_AWADDR,
        m_axi_out_V_AWID,
        m_axi_out_V_AWLEN,
        m_axi_out_V_AWSIZE,
        m_axi_out_V_AWBURST,
        m_axi_out_V_AWLOCK,
        m_axi_out_V_AWCACHE,
        m_axi_out_V_AWPROT,
        m_axi_out_V_AWQOS,
        m_axi_out_V_AWREGION,
        m_axi_out_V_AWUSER,
        m_axi_out_V_WVALID,
        m_axi_out_V_WREADY,
        m_axi_out_V_WDATA,
        m_axi_out_V_WSTRB,
        m_axi_out_V_WLAST,
        m_axi_out_V_WID,
        m_axi_out_V_WUSER,
        m_axi_out_V_ARVALID,
        m_axi_out_V_ARREADY,
        m_axi_out_V_ARADDR,
        m_axi_out_V_ARID,
        m_axi_out_V_ARLEN,
        m_axi_out_V_ARSIZE,
        m_axi_out_V_ARBURST,
        m_axi_out_V_ARLOCK,
        m_axi_out_V_ARCACHE,
        m_axi_out_V_ARPROT,
        m_axi_out_V_ARQOS,
        m_axi_out_V_ARREGION,
        m_axi_out_V_ARUSER,
        m_axi_out_V_RVALID,
        m_axi_out_V_RREADY,
        m_axi_out_V_RDATA,
        m_axi_out_V_RLAST,
        m_axi_out_V_RID,
        m_axi_out_V_RUSER,
        m_axi_out_V_RRESP,
        m_axi_out_V_BVALID,
        m_axi_out_V_BREADY,
        m_axi_out_V_BRESP,
        m_axi_out_V_BID,
        m_axi_out_V_BUSER,
        s_axi_ctrl_AWVALID,
        s_axi_ctrl_AWREADY,
        s_axi_ctrl_AWADDR,
        s_axi_ctrl_WVALID,
        s_axi_ctrl_WREADY,
        s_axi_ctrl_WDATA,
        s_axi_ctrl_WSTRB,
        s_axi_ctrl_ARVALID,
        s_axi_ctrl_ARREADY,
        s_axi_ctrl_ARADDR,
        s_axi_ctrl_RVALID,
        s_axi_ctrl_RREADY,
        s_axi_ctrl_RDATA,
        s_axi_ctrl_RRESP,
        s_axi_ctrl_BVALID,
        s_axi_ctrl_BREADY,
        s_axi_ctrl_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 66'd1;
parameter    ap_ST_fsm_state2 = 66'd2;
parameter    ap_ST_fsm_state3 = 66'd4;
parameter    ap_ST_fsm_state4 = 66'd8;
parameter    ap_ST_fsm_state5 = 66'd16;
parameter    ap_ST_fsm_state6 = 66'd32;
parameter    ap_ST_fsm_state7 = 66'd64;
parameter    ap_ST_fsm_state8 = 66'd128;
parameter    ap_ST_fsm_pp0_stage0 = 66'd256;
parameter    ap_ST_fsm_state12 = 66'd512;
parameter    ap_ST_fsm_state13 = 66'd1024;
parameter    ap_ST_fsm_state14 = 66'd2048;
parameter    ap_ST_fsm_state15 = 66'd4096;
parameter    ap_ST_fsm_state16 = 66'd8192;
parameter    ap_ST_fsm_state17 = 66'd16384;
parameter    ap_ST_fsm_state18 = 66'd32768;
parameter    ap_ST_fsm_pp1_stage0 = 66'd65536;
parameter    ap_ST_fsm_state22 = 66'd131072;
parameter    ap_ST_fsm_state23 = 66'd262144;
parameter    ap_ST_fsm_state24 = 66'd524288;
parameter    ap_ST_fsm_state25 = 66'd1048576;
parameter    ap_ST_fsm_state26 = 66'd2097152;
parameter    ap_ST_fsm_state27 = 66'd4194304;
parameter    ap_ST_fsm_state28 = 66'd8388608;
parameter    ap_ST_fsm_pp2_stage0 = 66'd16777216;
parameter    ap_ST_fsm_state32 = 66'd33554432;
parameter    ap_ST_fsm_pp3_stage0 = 66'd67108864;
parameter    ap_ST_fsm_state37 = 66'd134217728;
parameter    ap_ST_fsm_pp4_stage0 = 66'd268435456;
parameter    ap_ST_fsm_state41 = 66'd536870912;
parameter    ap_ST_fsm_state42 = 66'd1073741824;
parameter    ap_ST_fsm_state43 = 66'd2147483648;
parameter    ap_ST_fsm_state44 = 66'd4294967296;
parameter    ap_ST_fsm_state45 = 66'd8589934592;
parameter    ap_ST_fsm_state46 = 66'd17179869184;
parameter    ap_ST_fsm_state47 = 66'd34359738368;
parameter    ap_ST_fsm_state48 = 66'd68719476736;
parameter    ap_ST_fsm_pp5_stage0 = 66'd137438953472;
parameter    ap_ST_fsm_state52 = 66'd274877906944;
parameter    ap_ST_fsm_state53 = 66'd549755813888;
parameter    ap_ST_fsm_state54 = 66'd1099511627776;
parameter    ap_ST_fsm_pp6_stage0 = 66'd2199023255552;
parameter    ap_ST_fsm_state63 = 66'd4398046511104;
parameter    ap_ST_fsm_pp7_stage0 = 66'd8796093022208;
parameter    ap_ST_fsm_state67 = 66'd17592186044416;
parameter    ap_ST_fsm_state68 = 66'd35184372088832;
parameter    ap_ST_fsm_state69 = 66'd70368744177664;
parameter    ap_ST_fsm_state70 = 66'd140737488355328;
parameter    ap_ST_fsm_state71 = 66'd281474976710656;
parameter    ap_ST_fsm_state72 = 66'd562949953421312;
parameter    ap_ST_fsm_state73 = 66'd1125899906842624;
parameter    ap_ST_fsm_state74 = 66'd2251799813685248;
parameter    ap_ST_fsm_state75 = 66'd4503599627370496;
parameter    ap_ST_fsm_state76 = 66'd9007199254740992;
parameter    ap_ST_fsm_pp8_stage0 = 66'd18014398509481984;
parameter    ap_ST_fsm_state80 = 66'd36028797018963968;
parameter    ap_ST_fsm_state81 = 66'd72057594037927936;
parameter    ap_ST_fsm_state82 = 66'd144115188075855872;
parameter    ap_ST_fsm_pp9_stage0 = 66'd288230376151711744;
parameter    ap_ST_fsm_state94 = 66'd576460752303423488;
parameter    ap_ST_fsm_pp10_stage0 = 66'd1152921504606846976;
parameter    ap_ST_fsm_state98 = 66'd2305843009213693952;
parameter    ap_ST_fsm_state99 = 66'd4611686018427387904;
parameter    ap_ST_fsm_state100 = 66'd9223372036854775808;
parameter    ap_ST_fsm_state101 = 66'd18446744073709551616;
parameter    ap_ST_fsm_state102 = 66'd36893488147419103232;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_MEM_V_ID_WIDTH = 1;
parameter    C_M_AXI_MEM_V_ADDR_WIDTH = 32;
parameter    C_M_AXI_MEM_V_DATA_WIDTH = 32;
parameter    C_M_AXI_MEM_V_AWUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_V_ARUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_V_WUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_V_RUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_V_BUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_V_TARGET_ADDR = 0;
parameter    C_M_AXI_MEM_V_USER_VALUE = 0;
parameter    C_M_AXI_MEM_V_PROT_VALUE = 0;
parameter    C_M_AXI_MEM_V_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_OUT_V_ID_WIDTH = 1;
parameter    C_M_AXI_OUT_V_ADDR_WIDTH = 32;
parameter    C_M_AXI_OUT_V_DATA_WIDTH = 32;
parameter    C_M_AXI_OUT_V_AWUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_V_ARUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_V_WUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_V_RUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_V_BUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_V_TARGET_ADDR = 0;
parameter    C_M_AXI_OUT_V_USER_VALUE = 0;
parameter    C_M_AXI_OUT_V_PROT_VALUE = 0;
parameter    C_M_AXI_OUT_V_CACHE_VALUE = 3;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_MEM_V_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_OUT_V_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_mem_V_AWVALID;
input   m_axi_mem_V_AWREADY;
output  [C_M_AXI_MEM_V_ADDR_WIDTH - 1:0] m_axi_mem_V_AWADDR;
output  [C_M_AXI_MEM_V_ID_WIDTH - 1:0] m_axi_mem_V_AWID;
output  [7:0] m_axi_mem_V_AWLEN;
output  [2:0] m_axi_mem_V_AWSIZE;
output  [1:0] m_axi_mem_V_AWBURST;
output  [1:0] m_axi_mem_V_AWLOCK;
output  [3:0] m_axi_mem_V_AWCACHE;
output  [2:0] m_axi_mem_V_AWPROT;
output  [3:0] m_axi_mem_V_AWQOS;
output  [3:0] m_axi_mem_V_AWREGION;
output  [C_M_AXI_MEM_V_AWUSER_WIDTH - 1:0] m_axi_mem_V_AWUSER;
output   m_axi_mem_V_WVALID;
input   m_axi_mem_V_WREADY;
output  [C_M_AXI_MEM_V_DATA_WIDTH - 1:0] m_axi_mem_V_WDATA;
output  [C_M_AXI_MEM_V_WSTRB_WIDTH - 1:0] m_axi_mem_V_WSTRB;
output   m_axi_mem_V_WLAST;
output  [C_M_AXI_MEM_V_ID_WIDTH - 1:0] m_axi_mem_V_WID;
output  [C_M_AXI_MEM_V_WUSER_WIDTH - 1:0] m_axi_mem_V_WUSER;
output   m_axi_mem_V_ARVALID;
input   m_axi_mem_V_ARREADY;
output  [C_M_AXI_MEM_V_ADDR_WIDTH - 1:0] m_axi_mem_V_ARADDR;
output  [C_M_AXI_MEM_V_ID_WIDTH - 1:0] m_axi_mem_V_ARID;
output  [7:0] m_axi_mem_V_ARLEN;
output  [2:0] m_axi_mem_V_ARSIZE;
output  [1:0] m_axi_mem_V_ARBURST;
output  [1:0] m_axi_mem_V_ARLOCK;
output  [3:0] m_axi_mem_V_ARCACHE;
output  [2:0] m_axi_mem_V_ARPROT;
output  [3:0] m_axi_mem_V_ARQOS;
output  [3:0] m_axi_mem_V_ARREGION;
output  [C_M_AXI_MEM_V_ARUSER_WIDTH - 1:0] m_axi_mem_V_ARUSER;
input   m_axi_mem_V_RVALID;
output   m_axi_mem_V_RREADY;
input  [C_M_AXI_MEM_V_DATA_WIDTH - 1:0] m_axi_mem_V_RDATA;
input   m_axi_mem_V_RLAST;
input  [C_M_AXI_MEM_V_ID_WIDTH - 1:0] m_axi_mem_V_RID;
input  [C_M_AXI_MEM_V_RUSER_WIDTH - 1:0] m_axi_mem_V_RUSER;
input  [1:0] m_axi_mem_V_RRESP;
input   m_axi_mem_V_BVALID;
output   m_axi_mem_V_BREADY;
input  [1:0] m_axi_mem_V_BRESP;
input  [C_M_AXI_MEM_V_ID_WIDTH - 1:0] m_axi_mem_V_BID;
input  [C_M_AXI_MEM_V_BUSER_WIDTH - 1:0] m_axi_mem_V_BUSER;
output   m_axi_out_V_AWVALID;
input   m_axi_out_V_AWREADY;
output  [C_M_AXI_OUT_V_ADDR_WIDTH - 1:0] m_axi_out_V_AWADDR;
output  [C_M_AXI_OUT_V_ID_WIDTH - 1:0] m_axi_out_V_AWID;
output  [7:0] m_axi_out_V_AWLEN;
output  [2:0] m_axi_out_V_AWSIZE;
output  [1:0] m_axi_out_V_AWBURST;
output  [1:0] m_axi_out_V_AWLOCK;
output  [3:0] m_axi_out_V_AWCACHE;
output  [2:0] m_axi_out_V_AWPROT;
output  [3:0] m_axi_out_V_AWQOS;
output  [3:0] m_axi_out_V_AWREGION;
output  [C_M_AXI_OUT_V_AWUSER_WIDTH - 1:0] m_axi_out_V_AWUSER;
output   m_axi_out_V_WVALID;
input   m_axi_out_V_WREADY;
output  [C_M_AXI_OUT_V_DATA_WIDTH - 1:0] m_axi_out_V_WDATA;
output  [C_M_AXI_OUT_V_WSTRB_WIDTH - 1:0] m_axi_out_V_WSTRB;
output   m_axi_out_V_WLAST;
output  [C_M_AXI_OUT_V_ID_WIDTH - 1:0] m_axi_out_V_WID;
output  [C_M_AXI_OUT_V_WUSER_WIDTH - 1:0] m_axi_out_V_WUSER;
output   m_axi_out_V_ARVALID;
input   m_axi_out_V_ARREADY;
output  [C_M_AXI_OUT_V_ADDR_WIDTH - 1:0] m_axi_out_V_ARADDR;
output  [C_M_AXI_OUT_V_ID_WIDTH - 1:0] m_axi_out_V_ARID;
output  [7:0] m_axi_out_V_ARLEN;
output  [2:0] m_axi_out_V_ARSIZE;
output  [1:0] m_axi_out_V_ARBURST;
output  [1:0] m_axi_out_V_ARLOCK;
output  [3:0] m_axi_out_V_ARCACHE;
output  [2:0] m_axi_out_V_ARPROT;
output  [3:0] m_axi_out_V_ARQOS;
output  [3:0] m_axi_out_V_ARREGION;
output  [C_M_AXI_OUT_V_ARUSER_WIDTH - 1:0] m_axi_out_V_ARUSER;
input   m_axi_out_V_RVALID;
output   m_axi_out_V_RREADY;
input  [C_M_AXI_OUT_V_DATA_WIDTH - 1:0] m_axi_out_V_RDATA;
input   m_axi_out_V_RLAST;
input  [C_M_AXI_OUT_V_ID_WIDTH - 1:0] m_axi_out_V_RID;
input  [C_M_AXI_OUT_V_RUSER_WIDTH - 1:0] m_axi_out_V_RUSER;
input  [1:0] m_axi_out_V_RRESP;
input   m_axi_out_V_BVALID;
output   m_axi_out_V_BREADY;
input  [1:0] m_axi_out_V_BRESP;
input  [C_M_AXI_OUT_V_ID_WIDTH - 1:0] m_axi_out_V_BID;
input  [C_M_AXI_OUT_V_BUSER_WIDTH - 1:0] m_axi_out_V_BUSER;
input   s_axi_ctrl_AWVALID;
output   s_axi_ctrl_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_ctrl_AWADDR;
input   s_axi_ctrl_WVALID;
output   s_axi_ctrl_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_ctrl_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_ctrl_WSTRB;
input   s_axi_ctrl_ARVALID;
output   s_axi_ctrl_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_ctrl_ARADDR;
output   s_axi_ctrl_RVALID;
input   s_axi_ctrl_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_ctrl_RDATA;
output  [1:0] s_axi_ctrl_RRESP;
output   s_axi_ctrl_BVALID;
input   s_axi_ctrl_BREADY;
output  [1:0] s_axi_ctrl_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [65:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] w1_offset;
wire   [31:0] w2_offset;
wire   [31:0] input_offset;
wire   [31:0] b1_offset;
wire   [31:0] b2_offset;
wire   [31:0] result_offset;
reg    mem_V_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    mem_V_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond9_reg_1002;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond7_reg_1022;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] exitcond8_reg_1042;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_pp5_stage0;
reg    ap_enable_reg_pp5_iter1;
wire    ap_block_pp5_stage0;
reg   [0:0] exitcond10_reg_1119;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_pp8_stage0;
reg    ap_enable_reg_pp8_iter1;
wire    ap_block_pp8_stage0;
reg   [0:0] exitcond12_reg_1227;
reg    out_V_blk_n_AW;
wire    ap_CS_fsm_state68;
wire   [0:0] exitcond6_fu_821_p2;
reg    out_V_blk_n_W;
reg    ap_enable_reg_pp10_iter2;
wire    ap_block_pp10_stage0;
reg   [0:0] exitcond11_reg_1286;
reg   [0:0] ap_reg_pp10_iter1_exitcond11_reg_1286;
reg    out_V_blk_n_B;
wire    ap_CS_fsm_state102;
wire    mem_V_AWREADY;
wire    mem_V_WREADY;
reg    mem_V_ARVALID;
wire    mem_V_ARREADY;
reg   [31:0] mem_V_ARADDR;
reg   [31:0] mem_V_ARLEN;
wire    mem_V_RVALID;
reg    mem_V_RREADY;
wire   [7:0] mem_V_RDATA;
wire    mem_V_RLAST;
wire   [0:0] mem_V_RID;
wire   [0:0] mem_V_RUSER;
wire   [1:0] mem_V_RRESP;
wire    mem_V_BVALID;
wire   [1:0] mem_V_BRESP;
wire   [0:0] mem_V_BID;
wire   [0:0] mem_V_BUSER;
reg    out_V_AWVALID;
wire    out_V_AWREADY;
wire   [31:0] out_V_AWADDR;
reg    out_V_WVALID;
wire    out_V_WREADY;
wire    out_V_ARREADY;
wire    out_V_RVALID;
wire   [31:0] out_V_RDATA;
wire    out_V_RLAST;
wire   [0:0] out_V_RID;
wire   [0:0] out_V_RUSER;
wire   [1:0] out_V_RRESP;
wire    out_V_BVALID;
reg    out_V_BREADY;
wire   [1:0] out_V_BRESP;
wire   [0:0] out_V_BID;
wire   [0:0] out_V_BUSER;
reg   [9:0] indvar_reg_440;
reg   [9:0] ap_reg_pp0_iter1_indvar_reg_440;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [9:0] indvar1_reg_452;
reg   [9:0] ap_reg_pp1_iter1_indvar1_reg_452;
wire    ap_block_state19_pp1_stage0_iter0;
reg    ap_block_state20_pp1_stage0_iter1;
wire    ap_block_state21_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
reg   [3:0] indvar2_reg_464;
reg   [3:0] ap_reg_pp2_iter1_indvar2_reg_464;
wire    ap_block_state29_pp2_stage0_iter0;
reg    ap_block_state30_pp2_stage0_iter1;
wire    ap_block_state31_pp2_stage0_iter2;
reg    ap_block_pp2_stage0_11001;
reg   [9:0] i_reg_476;
reg   [3:0] i7_reg_487;
reg   [9:0] indvar3_reg_510;
reg   [9:0] ap_reg_pp5_iter1_indvar3_reg_510;
wire    ap_block_state49_pp5_stage0_iter0;
reg    ap_block_state50_pp5_stage0_iter1;
wire    ap_block_state51_pp5_stage0_iter2;
reg    ap_block_pp5_stage0_11001;
reg   [9:0] j_reg_522;
reg   [9:0] i9_reg_533;
reg   [3:0] indvar5_reg_556;
reg   [3:0] ap_reg_pp8_iter1_indvar5_reg_556;
wire    ap_block_state77_pp8_stage0_iter0;
reg    ap_block_state78_pp8_stage0_iter1;
wire    ap_block_state79_pp8_stage0_iter2;
reg    ap_block_pp8_stage0_11001;
reg   [3:0] j2_reg_568;
reg   [3:0] indvar4_reg_579;
wire   [31:0] l1_result_V_q0;
reg   [31:0] reg_590;
reg    ap_enable_reg_pp6_iter4;
wire    ap_block_state55_pp6_stage0_iter0;
wire    ap_block_state56_pp6_stage0_iter1;
wire    ap_block_state57_pp6_stage0_iter2;
wire    ap_block_state58_pp6_stage0_iter3;
wire    ap_block_state59_pp6_stage0_iter4;
wire    ap_block_state60_pp6_stage0_iter5;
wire    ap_block_state61_pp6_stage0_iter6;
wire    ap_block_state62_pp6_stage0_iter7;
wire    ap_block_pp6_stage0_11001;
reg   [0:0] exitcond5_reg_1143;
reg   [0:0] ap_reg_pp6_iter3_exitcond5_reg_1143;
wire   [31:0] l1_result_V_q1;
wire    ap_CS_fsm_state82;
wire   [31:0] l2_result_V_q0;
reg   [31:0] reg_595;
reg    ap_enable_reg_pp9_iter8;
wire    ap_block_state83_pp9_stage0_iter0;
wire    ap_block_state84_pp9_stage0_iter1;
wire    ap_block_state85_pp9_stage0_iter2;
wire    ap_block_state86_pp9_stage0_iter3;
wire    ap_block_state87_pp9_stage0_iter4;
wire    ap_block_state88_pp9_stage0_iter5;
wire    ap_block_state89_pp9_stage0_iter6;
wire    ap_block_state90_pp9_stage0_iter7;
wire    ap_block_state91_pp9_stage0_iter8;
wire    ap_block_state92_pp9_stage0_iter9;
wire    ap_block_state93_pp9_stage0_iter10;
wire    ap_block_pp9_stage0_11001;
reg   [0:0] exitcond_reg_1246;
reg   [0:0] ap_reg_pp9_iter7_exitcond_reg_1246;
wire   [31:0] l2_result_V_q1;
wire    ap_CS_fsm_pp10_stage0;
reg    ap_enable_reg_pp10_iter1;
wire    ap_block_state95_pp10_stage0_iter0;
wire    ap_block_state96_pp10_stage0_iter1;
wire    ap_block_state97_pp10_stage0_iter2;
reg    ap_sig_ioackin_out_V_WREADY;
reg    ap_block_state97_io;
reg    ap_block_pp10_stage0_11001;
reg   [31:0] result_offset_read_reg_971;
reg   [31:0] b2_offset_read_reg_976;
reg   [31:0] b1_offset_read_reg_981;
reg   [31:0] w2_offset_read_reg_986;
reg   [31:0] w1_offset_read_reg_991;
reg   [31:0] mem_V_addr_reg_996;
wire   [0:0] exitcond9_fu_611_p2;
reg   [0:0] ap_reg_pp0_iter1_exitcond9_reg_1002;
wire   [9:0] indvar_next_fu_617_p2;
reg   [9:0] indvar_next_reg_1006;
reg    ap_enable_reg_pp0_iter0;
reg   [7:0] mem_V_addr_read_reg_1011;
reg    ap_sig_ioackin_mem_V_ARREADY;
wire   [0:0] exitcond7_fu_638_p2;
reg   [0:0] ap_reg_pp1_iter1_exitcond7_reg_1022;
wire   [9:0] indvar_next1_fu_644_p2;
reg   [9:0] indvar_next1_reg_1026;
reg    ap_enable_reg_pp1_iter0;
reg   [7:0] mem_V_addr_1_read_reg_1031;
wire   [0:0] exitcond8_fu_665_p2;
reg   [0:0] ap_reg_pp2_iter1_exitcond8_reg_1042;
wire   [3:0] indvar_next2_fu_671_p2;
reg   [3:0] indvar_next2_reg_1046;
reg    ap_enable_reg_pp2_iter0;
reg   [7:0] mem_V_addr_2_read_reg_1051;
wire   [0:0] exitcond1_fu_682_p2;
reg   [0:0] exitcond1_reg_1056;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state33_pp3_stage0_iter0;
wire    ap_block_state34_pp3_stage0_iter1;
wire    ap_block_state35_pp3_stage0_iter2;
wire    ap_block_state36_pp3_stage0_iter3;
wire    ap_block_pp3_stage0_11001;
reg   [0:0] ap_reg_pp3_iter1_exitcond1_reg_1056;
reg   [0:0] ap_reg_pp3_iter2_exitcond1_reg_1056;
wire   [9:0] i_1_fu_688_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [63:0] tmp_3_fu_694_p1;
reg   [63:0] tmp_3_reg_1065;
reg   [63:0] ap_reg_pp3_iter1_tmp_3_reg_1065;
reg   [63:0] ap_reg_pp3_iter2_tmp_3_reg_1065;
wire   [7:0] bias_1_q0;
reg   [7:0] bias_1_load_reg_1075;
reg    ap_enable_reg_pp3_iter2;
wire   [0:0] exitcond2_fu_703_p2;
reg   [0:0] exitcond2_reg_1080;
wire    ap_CS_fsm_pp4_stage0;
wire    ap_block_state38_pp4_stage0_iter0;
wire    ap_block_state39_pp4_stage0_iter1;
wire    ap_block_state40_pp4_stage0_iter2;
wire    ap_block_pp4_stage0_11001;
reg   [0:0] ap_reg_pp4_iter1_exitcond2_reg_1080;
wire   [3:0] i_2_fu_709_p2;
reg    ap_enable_reg_pp4_iter0;
wire   [63:0] tmp_6_fu_715_p1;
reg   [63:0] tmp_6_reg_1089;
reg   [63:0] ap_reg_pp4_iter1_tmp_6_reg_1089;
wire   [7:0] bias_2_q0;
reg   [7:0] bias_2_load_reg_1099;
reg    ap_enable_reg_pp4_iter1;
wire   [0:0] exitcond3_fu_734_p2;
wire    ap_CS_fsm_state48;
wire   [9:0] i_3_fu_740_p2;
reg   [9:0] i_3_reg_1114;
wire   [0:0] exitcond10_fu_746_p2;
reg   [0:0] ap_reg_pp5_iter1_exitcond10_reg_1119;
wire   [9:0] indvar_next3_fu_752_p2;
reg   [9:0] indvar_next3_reg_1123;
reg    ap_enable_reg_pp5_iter0;
reg   [7:0] mem_V_addr_3_read_reg_1128;
wire    ap_CS_fsm_state52;
wire  signed [15:0] rhs_V_fu_768_p1;
reg  signed [15:0] rhs_V_reg_1138;
wire    ap_CS_fsm_state54;
wire   [0:0] exitcond5_fu_772_p2;
wire    ap_CS_fsm_pp6_stage0;
reg   [0:0] ap_reg_pp6_iter1_exitcond5_reg_1143;
reg   [0:0] ap_reg_pp6_iter2_exitcond5_reg_1143;
reg   [0:0] ap_reg_pp6_iter4_exitcond5_reg_1143;
reg   [0:0] ap_reg_pp6_iter5_exitcond5_reg_1143;
reg   [0:0] ap_reg_pp6_iter6_exitcond5_reg_1143;
wire   [9:0] j_1_fu_778_p2;
reg    ap_enable_reg_pp6_iter0;
reg   [8:0] l1_result_V_addr_2_reg_1157;
reg   [8:0] ap_reg_pp6_iter1_l1_result_V_addr_2_reg_1157;
reg   [8:0] ap_reg_pp6_iter2_l1_result_V_addr_2_reg_1157;
reg   [8:0] ap_reg_pp6_iter3_l1_result_V_addr_2_reg_1157;
reg   [8:0] ap_reg_pp6_iter4_l1_result_V_addr_2_reg_1157;
reg   [8:0] ap_reg_pp6_iter5_l1_result_V_addr_2_reg_1157;
reg   [8:0] ap_reg_pp6_iter6_l1_result_V_addr_2_reg_1157;
wire   [7:0] weights_1_q0;
reg  signed [7:0] weights_1_load_reg_1163;
reg    ap_enable_reg_pp6_iter2;
wire  signed [31:0] grp_fu_964_p3;
reg   [31:0] tmp_13_reg_1173;
reg    ap_enable_reg_pp6_iter6;
wire   [0:0] exitcond4_fu_793_p2;
wire    ap_CS_fsm_pp7_stage0;
wire    ap_block_state64_pp7_stage0_iter0;
wire    ap_block_state65_pp7_stage0_iter1;
wire    ap_block_state66_pp7_stage0_iter2;
wire    ap_block_pp7_stage0_11001;
wire   [9:0] i_4_fu_799_p2;
reg    ap_enable_reg_pp7_iter0;
reg   [8:0] l1_result_V_addr_1_reg_1187;
reg   [8:0] ap_reg_pp7_iter1_l1_result_V_addr_1_reg_1187;
wire   [32:0] tmp_4_cast_fu_818_p1;
reg   [32:0] tmp_4_cast_reg_1196;
wire    ap_CS_fsm_state67;
reg    ap_sig_ioackin_out_V_AWREADY;
reg    ap_block_state68_io;
wire   [9:0] i_5_fu_827_p2;
reg   [9:0] i_5_reg_1205;
wire   [12:0] tmp_15_fu_859_p2;
reg   [12:0] tmp_15_reg_1210;
reg   [31:0] mem_V_addr_4_reg_1221;
wire    ap_CS_fsm_state69;
wire   [0:0] exitcond12_fu_893_p2;
reg   [0:0] ap_reg_pp8_iter1_exitcond12_reg_1227;
wire   [3:0] indvar_next5_fu_899_p2;
reg   [3:0] indvar_next5_reg_1231;
reg    ap_enable_reg_pp8_iter0;
reg   [7:0] mem_V_addr_4_read_reg_1236;
wire    ap_CS_fsm_state80;
wire   [0:0] exitcond_fu_915_p2;
wire    ap_CS_fsm_pp9_stage0;
reg   [0:0] ap_reg_pp9_iter1_exitcond_reg_1246;
reg   [0:0] ap_reg_pp9_iter2_exitcond_reg_1246;
reg   [0:0] ap_reg_pp9_iter3_exitcond_reg_1246;
reg   [0:0] ap_reg_pp9_iter4_exitcond_reg_1246;
reg   [0:0] ap_reg_pp9_iter5_exitcond_reg_1246;
reg   [0:0] ap_reg_pp9_iter6_exitcond_reg_1246;
reg   [0:0] ap_reg_pp9_iter8_exitcond_reg_1246;
reg   [0:0] ap_reg_pp9_iter9_exitcond_reg_1246;
wire   [3:0] j_2_fu_921_p2;
reg    ap_enable_reg_pp9_iter0;
reg   [3:0] l2_result_V_addr_2_reg_1260;
reg   [3:0] ap_reg_pp9_iter1_l2_result_V_addr_2_reg_1260;
reg   [3:0] ap_reg_pp9_iter2_l2_result_V_addr_2_reg_1260;
reg   [3:0] ap_reg_pp9_iter3_l2_result_V_addr_2_reg_1260;
reg   [3:0] ap_reg_pp9_iter4_l2_result_V_addr_2_reg_1260;
reg   [3:0] ap_reg_pp9_iter5_l2_result_V_addr_2_reg_1260;
reg   [3:0] ap_reg_pp9_iter6_l2_result_V_addr_2_reg_1260;
reg   [3:0] ap_reg_pp9_iter7_l2_result_V_addr_2_reg_1260;
reg   [3:0] ap_reg_pp9_iter8_l2_result_V_addr_2_reg_1260;
reg   [3:0] ap_reg_pp9_iter9_l2_result_V_addr_2_reg_1260;
wire   [7:0] weights_2_q0;
reg  signed [7:0] weights_2_load_reg_1266;
reg    ap_enable_reg_pp9_iter1;
wire   [31:0] grp_fu_936_p2;
reg   [31:0] tmp_20_reg_1276;
wire   [31:0] tmp_21_fu_942_p2;
reg   [31:0] tmp_21_reg_1281;
wire   [0:0] exitcond11_fu_947_p2;
wire   [3:0] indvar_next4_fu_953_p2;
reg    ap_enable_reg_pp10_iter0;
wire    ap_CS_fsm_state8;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state18;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state19;
reg    ap_enable_reg_pp1_iter2;
wire    ap_CS_fsm_state28;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state29;
reg    ap_enable_reg_pp2_iter2;
wire    ap_CS_fsm_state32;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state33;
reg    ap_enable_reg_pp3_iter1;
reg    ap_enable_reg_pp3_iter3;
wire    ap_CS_fsm_state37;
wire    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state38;
reg    ap_enable_reg_pp4_iter2;
reg    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state49;
reg    ap_enable_reg_pp5_iter2;
wire    ap_block_pp6_stage0_subdone;
reg    ap_condition_pp6_exit_iter0_state55;
reg    ap_enable_reg_pp6_iter1;
reg    ap_enable_reg_pp6_iter3;
reg    ap_enable_reg_pp6_iter5;
reg    ap_enable_reg_pp6_iter7;
wire    ap_block_pp7_stage0_subdone;
reg    ap_condition_pp7_exit_iter0_state64;
reg    ap_enable_reg_pp7_iter1;
reg    ap_enable_reg_pp7_iter2;
wire    ap_CS_fsm_state76;
reg    ap_block_pp8_stage0_subdone;
reg    ap_condition_pp8_exit_iter0_state77;
reg    ap_enable_reg_pp8_iter2;
wire    ap_block_pp9_stage0_subdone;
reg    ap_condition_pp9_exit_iter0_state83;
reg    ap_enable_reg_pp9_iter2;
reg    ap_enable_reg_pp9_iter3;
reg    ap_enable_reg_pp9_iter4;
reg    ap_enable_reg_pp9_iter5;
reg    ap_enable_reg_pp9_iter6;
reg    ap_enable_reg_pp9_iter7;
reg    ap_enable_reg_pp9_iter9;
reg    ap_enable_reg_pp9_iter10;
reg    ap_block_pp10_stage0_subdone;
reg    ap_condition_pp10_exit_iter0_state95;
reg   [8:0] weights_1_address0;
reg    weights_1_ce0;
reg    weights_1_we0;
reg   [3:0] weights_2_address0;
reg    weights_2_ce0;
reg    weights_2_we0;
reg   [8:0] bias_1_address0;
reg    bias_1_ce0;
reg    bias_1_we0;
reg   [3:0] bias_2_address0;
reg    bias_2_ce0;
reg    bias_2_we0;
reg   [9:0] inputs_address0;
reg    inputs_ce0;
reg    inputs_we0;
wire   [7:0] inputs_q0;
reg   [8:0] l1_result_V_address0;
reg    l1_result_V_ce0;
reg    l1_result_V_we0;
reg   [31:0] l1_result_V_d0;
reg   [8:0] l1_result_V_address1;
reg    l1_result_V_ce1;
reg    l1_result_V_we1;
reg   [3:0] l2_result_V_address0;
reg    l2_result_V_ce0;
reg    l2_result_V_we0;
wire   [31:0] l2_result_V_d0;
reg   [3:0] l2_result_V_address1;
reg    l2_result_V_ce1;
reg    l2_result_V_we1;
reg   [9:0] ap_phi_mux_indvar_phi_fu_444_p4;
reg   [9:0] ap_phi_mux_indvar1_phi_fu_456_p4;
reg   [3:0] ap_phi_mux_indvar2_phi_fu_468_p4;
reg   [9:0] i8_reg_498;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state47;
reg   [9:0] ap_phi_mux_indvar3_phi_fu_514_p4;
reg   [9:0] i4_reg_544;
wire    ap_CS_fsm_state94;
reg   [3:0] ap_phi_mux_indvar5_phi_fu_560_p4;
wire   [63:0] tmp_5_fu_623_p1;
wire   [63:0] tmp_4_fu_650_p1;
wire   [63:0] tmp_8_fu_677_p1;
wire    ap_block_pp3_stage0;
wire    ap_block_pp4_stage0;
wire   [63:0] tmp_25_fu_758_p1;
wire   [63:0] tmp_s_fu_763_p1;
wire   [63:0] tmp_11_fu_784_p1;
wire    ap_block_pp6_stage0;
wire   [63:0] tmp_7_fu_805_p1;
wire    ap_block_pp7_stage0;
wire   [63:0] tmp_31_fu_905_p1;
wire   [63:0] tmp_17_fu_910_p1;
wire   [63:0] tmp_18_fu_927_p1;
wire    ap_block_pp9_stage0;
wire   [63:0] tmp_30_fu_959_p1;
wire   [63:0] tmp_fu_601_p1;
wire   [63:0] tmp_1_fu_628_p1;
wire   [63:0] tmp_2_fu_655_p1;
wire   [63:0] tmp_10_fu_724_p1;
wire   [63:0] tmp_14_fu_865_p1;
wire   [63:0] p_sum_cast_fu_883_p1;
reg    ap_reg_ioackin_mem_V_ARREADY;
reg    ap_reg_ioackin_out_V_AWREADY;
reg    ap_reg_ioackin_out_V_WREADY;
wire    ap_block_pp10_stage0_01001;
wire    ap_CS_fsm_state53;
wire  signed [31:0] p_s_fu_699_p1;
wire   [0:0] tmp_24_fu_810_p3;
wire    ap_CS_fsm_state81;
wire   [8:0] tmp_27_fu_833_p1;
wire   [11:0] p_shl_fu_837_p3;
wire   [9:0] tmp_28_fu_849_p2;
wire   [12:0] p_shl1_cast_fu_855_p1;
wire   [12:0] p_shl_cast_fu_845_p1;
wire   [32:0] tmp_16_cast_fu_875_p1;
wire   [32:0] p_sum_fu_878_p2;
wire  signed [7:0] grp_fu_964_p1;
reg   [65:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;
reg    ap_idle_pp6;
wire    ap_enable_pp6;
reg    ap_idle_pp7;
wire    ap_enable_pp7;
reg    ap_idle_pp8;
wire    ap_enable_pp8;
reg    ap_idle_pp9;
wire    ap_enable_pp9;
reg    ap_idle_pp10;
wire    ap_enable_pp10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 66'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 ap_enable_reg_pp8_iter1 = 1'b0;
#0 ap_enable_reg_pp10_iter2 = 1'b0;
#0 ap_enable_reg_pp6_iter4 = 1'b0;
#0 ap_enable_reg_pp9_iter8 = 1'b0;
#0 ap_enable_reg_pp10_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp6_iter0 = 1'b0;
#0 ap_enable_reg_pp6_iter2 = 1'b0;
#0 ap_enable_reg_pp6_iter6 = 1'b0;
#0 ap_enable_reg_pp7_iter0 = 1'b0;
#0 ap_enable_reg_pp8_iter0 = 1'b0;
#0 ap_enable_reg_pp9_iter0 = 1'b0;
#0 ap_enable_reg_pp9_iter1 = 1'b0;
#0 ap_enable_reg_pp10_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter3 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp5_iter2 = 1'b0;
#0 ap_enable_reg_pp6_iter1 = 1'b0;
#0 ap_enable_reg_pp6_iter3 = 1'b0;
#0 ap_enable_reg_pp6_iter5 = 1'b0;
#0 ap_enable_reg_pp6_iter7 = 1'b0;
#0 ap_enable_reg_pp7_iter1 = 1'b0;
#0 ap_enable_reg_pp7_iter2 = 1'b0;
#0 ap_enable_reg_pp8_iter2 = 1'b0;
#0 ap_enable_reg_pp9_iter2 = 1'b0;
#0 ap_enable_reg_pp9_iter3 = 1'b0;
#0 ap_enable_reg_pp9_iter4 = 1'b0;
#0 ap_enable_reg_pp9_iter5 = 1'b0;
#0 ap_enable_reg_pp9_iter6 = 1'b0;
#0 ap_enable_reg_pp9_iter7 = 1'b0;
#0 ap_enable_reg_pp9_iter9 = 1'b0;
#0 ap_enable_reg_pp9_iter10 = 1'b0;
#0 ap_reg_ioackin_mem_V_ARREADY = 1'b0;
#0 ap_reg_ioackin_out_V_AWREADY = 1'b0;
#0 ap_reg_ioackin_out_V_WREADY = 1'b0;
end

neural_network_ctrl_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
neural_network_ctrl_s_axi_U(
    .AWVALID(s_axi_ctrl_AWVALID),
    .AWREADY(s_axi_ctrl_AWREADY),
    .AWADDR(s_axi_ctrl_AWADDR),
    .WVALID(s_axi_ctrl_WVALID),
    .WREADY(s_axi_ctrl_WREADY),
    .WDATA(s_axi_ctrl_WDATA),
    .WSTRB(s_axi_ctrl_WSTRB),
    .ARVALID(s_axi_ctrl_ARVALID),
    .ARREADY(s_axi_ctrl_ARREADY),
    .ARADDR(s_axi_ctrl_ARADDR),
    .RVALID(s_axi_ctrl_RVALID),
    .RREADY(s_axi_ctrl_RREADY),
    .RDATA(s_axi_ctrl_RDATA),
    .RRESP(s_axi_ctrl_RRESP),
    .BVALID(s_axi_ctrl_BVALID),
    .BREADY(s_axi_ctrl_BREADY),
    .BRESP(s_axi_ctrl_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .w1_offset(w1_offset),
    .w2_offset(w2_offset),
    .input_offset(input_offset),
    .b1_offset(b1_offset),
    .b2_offset(b2_offset),
    .result_offset(result_offset)
);

neural_network_mem_V_m_axi #(
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_MEM_V_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_MEM_V_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_MEM_V_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_MEM_V_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_MEM_V_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_MEM_V_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_MEM_V_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_MEM_V_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_MEM_V_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_MEM_V_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_MEM_V_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_MEM_V_CACHE_VALUE ))
neural_network_mem_V_m_axi_U(
    .AWVALID(m_axi_mem_V_AWVALID),
    .AWREADY(m_axi_mem_V_AWREADY),
    .AWADDR(m_axi_mem_V_AWADDR),
    .AWID(m_axi_mem_V_AWID),
    .AWLEN(m_axi_mem_V_AWLEN),
    .AWSIZE(m_axi_mem_V_AWSIZE),
    .AWBURST(m_axi_mem_V_AWBURST),
    .AWLOCK(m_axi_mem_V_AWLOCK),
    .AWCACHE(m_axi_mem_V_AWCACHE),
    .AWPROT(m_axi_mem_V_AWPROT),
    .AWQOS(m_axi_mem_V_AWQOS),
    .AWREGION(m_axi_mem_V_AWREGION),
    .AWUSER(m_axi_mem_V_AWUSER),
    .WVALID(m_axi_mem_V_WVALID),
    .WREADY(m_axi_mem_V_WREADY),
    .WDATA(m_axi_mem_V_WDATA),
    .WSTRB(m_axi_mem_V_WSTRB),
    .WLAST(m_axi_mem_V_WLAST),
    .WID(m_axi_mem_V_WID),
    .WUSER(m_axi_mem_V_WUSER),
    .ARVALID(m_axi_mem_V_ARVALID),
    .ARREADY(m_axi_mem_V_ARREADY),
    .ARADDR(m_axi_mem_V_ARADDR),
    .ARID(m_axi_mem_V_ARID),
    .ARLEN(m_axi_mem_V_ARLEN),
    .ARSIZE(m_axi_mem_V_ARSIZE),
    .ARBURST(m_axi_mem_V_ARBURST),
    .ARLOCK(m_axi_mem_V_ARLOCK),
    .ARCACHE(m_axi_mem_V_ARCACHE),
    .ARPROT(m_axi_mem_V_ARPROT),
    .ARQOS(m_axi_mem_V_ARQOS),
    .ARREGION(m_axi_mem_V_ARREGION),
    .ARUSER(m_axi_mem_V_ARUSER),
    .RVALID(m_axi_mem_V_RVALID),
    .RREADY(m_axi_mem_V_RREADY),
    .RDATA(m_axi_mem_V_RDATA),
    .RLAST(m_axi_mem_V_RLAST),
    .RID(m_axi_mem_V_RID),
    .RUSER(m_axi_mem_V_RUSER),
    .RRESP(m_axi_mem_V_RRESP),
    .BVALID(m_axi_mem_V_BVALID),
    .BREADY(m_axi_mem_V_BREADY),
    .BRESP(m_axi_mem_V_BRESP),
    .BID(m_axi_mem_V_BID),
    .BUSER(m_axi_mem_V_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(mem_V_ARVALID),
    .I_ARREADY(mem_V_ARREADY),
    .I_ARADDR(mem_V_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(mem_V_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(mem_V_RVALID),
    .I_RREADY(mem_V_RREADY),
    .I_RDATA(mem_V_RDATA),
    .I_RID(mem_V_RID),
    .I_RUSER(mem_V_RUSER),
    .I_RRESP(mem_V_RRESP),
    .I_RLAST(mem_V_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(mem_V_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(mem_V_WREADY),
    .I_WDATA(8'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd0),
    .I_BVALID(mem_V_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(mem_V_BRESP),
    .I_BID(mem_V_BID),
    .I_BUSER(mem_V_BUSER)
);

neural_network_out_V_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_OUT_V_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_OUT_V_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_OUT_V_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_OUT_V_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_OUT_V_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_OUT_V_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_OUT_V_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_OUT_V_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_OUT_V_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_OUT_V_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_OUT_V_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_OUT_V_CACHE_VALUE ))
neural_network_out_V_m_axi_U(
    .AWVALID(m_axi_out_V_AWVALID),
    .AWREADY(m_axi_out_V_AWREADY),
    .AWADDR(m_axi_out_V_AWADDR),
    .AWID(m_axi_out_V_AWID),
    .AWLEN(m_axi_out_V_AWLEN),
    .AWSIZE(m_axi_out_V_AWSIZE),
    .AWBURST(m_axi_out_V_AWBURST),
    .AWLOCK(m_axi_out_V_AWLOCK),
    .AWCACHE(m_axi_out_V_AWCACHE),
    .AWPROT(m_axi_out_V_AWPROT),
    .AWQOS(m_axi_out_V_AWQOS),
    .AWREGION(m_axi_out_V_AWREGION),
    .AWUSER(m_axi_out_V_AWUSER),
    .WVALID(m_axi_out_V_WVALID),
    .WREADY(m_axi_out_V_WREADY),
    .WDATA(m_axi_out_V_WDATA),
    .WSTRB(m_axi_out_V_WSTRB),
    .WLAST(m_axi_out_V_WLAST),
    .WID(m_axi_out_V_WID),
    .WUSER(m_axi_out_V_WUSER),
    .ARVALID(m_axi_out_V_ARVALID),
    .ARREADY(m_axi_out_V_ARREADY),
    .ARADDR(m_axi_out_V_ARADDR),
    .ARID(m_axi_out_V_ARID),
    .ARLEN(m_axi_out_V_ARLEN),
    .ARSIZE(m_axi_out_V_ARSIZE),
    .ARBURST(m_axi_out_V_ARBURST),
    .ARLOCK(m_axi_out_V_ARLOCK),
    .ARCACHE(m_axi_out_V_ARCACHE),
    .ARPROT(m_axi_out_V_ARPROT),
    .ARQOS(m_axi_out_V_ARQOS),
    .ARREGION(m_axi_out_V_ARREGION),
    .ARUSER(m_axi_out_V_ARUSER),
    .RVALID(m_axi_out_V_RVALID),
    .RREADY(m_axi_out_V_RREADY),
    .RDATA(m_axi_out_V_RDATA),
    .RLAST(m_axi_out_V_RLAST),
    .RID(m_axi_out_V_RID),
    .RUSER(m_axi_out_V_RUSER),
    .RRESP(m_axi_out_V_RRESP),
    .BVALID(m_axi_out_V_BVALID),
    .BREADY(m_axi_out_V_BREADY),
    .BRESP(m_axi_out_V_BRESP),
    .BID(m_axi_out_V_BID),
    .BUSER(m_axi_out_V_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(out_V_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(out_V_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(out_V_RDATA),
    .I_RID(out_V_RID),
    .I_RUSER(out_V_RUSER),
    .I_RRESP(out_V_RRESP),
    .I_RLAST(out_V_RLAST),
    .I_AWVALID(out_V_AWVALID),
    .I_AWREADY(out_V_AWREADY),
    .I_AWADDR(out_V_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd10),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(out_V_WVALID),
    .I_WREADY(out_V_WREADY),
    .I_WDATA(reg_595),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(out_V_BVALID),
    .I_BREADY(out_V_BREADY),
    .I_BRESP(out_V_BRESP),
    .I_BID(out_V_BID),
    .I_BUSER(out_V_BUSER)
);

neural_network_webkb #(
    .DataWidth( 8 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
weights_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(weights_1_address0),
    .ce0(weights_1_ce0),
    .we0(weights_1_we0),
    .d0(mem_V_addr_3_read_reg_1128),
    .q0(weights_1_q0)
);

neural_network_wecud #(
    .DataWidth( 8 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
weights_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(weights_2_address0),
    .ce0(weights_2_ce0),
    .we0(weights_2_we0),
    .d0(mem_V_addr_4_read_reg_1236),
    .q0(weights_2_q0)
);

neural_network_webkb #(
    .DataWidth( 8 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
bias_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bias_1_address0),
    .ce0(bias_1_ce0),
    .we0(bias_1_we0),
    .d0(mem_V_addr_1_read_reg_1031),
    .q0(bias_1_q0)
);

neural_network_wecud #(
    .DataWidth( 8 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
bias_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bias_2_address0),
    .ce0(bias_2_ce0),
    .we0(bias_2_we0),
    .d0(mem_V_addr_2_read_reg_1051),
    .q0(bias_2_q0)
);

neural_network_infYi #(
    .DataWidth( 8 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
inputs_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(inputs_address0),
    .ce0(inputs_ce0),
    .we0(inputs_we0),
    .d0(mem_V_addr_read_reg_1011),
    .q0(inputs_q0)
);

neural_network_l1g8j #(
    .DataWidth( 32 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
l1_result_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(l1_result_V_address0),
    .ce0(l1_result_V_ce0),
    .we0(l1_result_V_we0),
    .d0(l1_result_V_d0),
    .q0(l1_result_V_q0),
    .address1(l1_result_V_address1),
    .ce1(l1_result_V_ce1),
    .we1(l1_result_V_we1),
    .d1(tmp_13_reg_1173),
    .q1(l1_result_V_q1)
);

neural_network_l2hbi #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
l2_result_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(l2_result_V_address0),
    .ce0(l2_result_V_ce0),
    .we0(l2_result_V_we0),
    .d0(l2_result_V_d0),
    .q0(l2_result_V_q0),
    .address1(l2_result_V_address1),
    .ce1(l2_result_V_ce1),
    .we1(l2_result_V_we1),
    .d1(tmp_21_reg_1281),
    .q1(l2_result_V_q1)
);

neural_network_muibs #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 32 ))
neural_network_muibs_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_590),
    .din1(weights_2_load_reg_1266),
    .ce(1'b1),
    .dout(grp_fu_936_p2)
);

neural_network_majbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
neural_network_majbC_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(weights_1_load_reg_1163),
    .din1(grp_fu_964_p1),
    .din2(reg_590),
    .ce(1'b1),
    .dout(grp_fu_964_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp10_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp10_stage0) & (1'b1 == ap_condition_pp10_exit_iter0_state95) & (1'b0 == ap_block_pp10_stage0_subdone))) begin
            ap_enable_reg_pp10_iter0 <= 1'b0;
        end else if (((1'b0 == ap_block_state68_io) & (exitcond6_fu_821_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state68))) begin
            ap_enable_reg_pp10_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp10_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp10_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp10_exit_iter0_state95)) begin
                ap_enable_reg_pp10_iter1 <= (1'b1 ^ ap_condition_pp10_exit_iter0_state95);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp10_iter1 <= ap_enable_reg_pp10_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp10_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp10_stage0_subdone)) begin
            ap_enable_reg_pp10_iter2 <= ap_enable_reg_pp10_iter1;
        end else if (((1'b0 == ap_block_state68_io) & (exitcond6_fu_821_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state68))) begin
            ap_enable_reg_pp10_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state19) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state19)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state19);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state29) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state28)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state29)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state29);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state28)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_condition_pp3_exit_iter0_state33) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state32)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state33)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state33);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
        end else if ((1'b1 == ap_CS_fsm_state32)) begin
            ap_enable_reg_pp3_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_condition_pp4_exit_iter0_state38) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state37)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state38)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state38);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end else if ((1'b1 == ap_CS_fsm_state37)) begin
            ap_enable_reg_pp4_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp5_stage0) & (1'b1 == ap_condition_pp5_exit_iter0_state49) & (1'b0 == ap_block_pp5_stage0_subdone))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if (((exitcond3_fu_734_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state48))) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp5_exit_iter0_state49)) begin
                ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state49);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
        end else if (((exitcond3_fu_734_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state48))) begin
            ap_enable_reg_pp5_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp6_stage0) & (1'b1 == ap_condition_pp6_exit_iter0_state55) & (1'b0 == ap_block_pp6_stage0_subdone))) begin
            ap_enable_reg_pp6_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state54)) begin
            ap_enable_reg_pp6_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp6_exit_iter0_state55)) begin
                ap_enable_reg_pp6_iter1 <= (1'b1 ^ ap_condition_pp6_exit_iter0_state55);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter3 <= ap_enable_reg_pp6_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter4 <= ap_enable_reg_pp6_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter5 <= ap_enable_reg_pp6_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter6 <= ap_enable_reg_pp6_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter7 <= ap_enable_reg_pp6_iter6;
        end else if ((1'b1 == ap_CS_fsm_state54)) begin
            ap_enable_reg_pp6_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp7_stage0) & (1'b1 == ap_condition_pp7_exit_iter0_state64) & (1'b0 == ap_block_pp7_stage0_subdone))) begin
            ap_enable_reg_pp7_iter0 <= 1'b0;
        end else if (((exitcond3_fu_734_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
            ap_enable_reg_pp7_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp7_exit_iter0_state64)) begin
                ap_enable_reg_pp7_iter1 <= (1'b1 ^ ap_condition_pp7_exit_iter0_state64);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            ap_enable_reg_pp7_iter2 <= ap_enable_reg_pp7_iter1;
        end else if (((exitcond3_fu_734_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
            ap_enable_reg_pp7_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp8_stage0) & (1'b1 == ap_condition_pp8_exit_iter0_state77) & (1'b0 == ap_block_pp8_stage0_subdone))) begin
            ap_enable_reg_pp8_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state76)) begin
            ap_enable_reg_pp8_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp8_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp8_exit_iter0_state77)) begin
                ap_enable_reg_pp8_iter1 <= (1'b1 ^ ap_condition_pp8_exit_iter0_state77);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp8_iter1 <= ap_enable_reg_pp8_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp8_stage0_subdone)) begin
            ap_enable_reg_pp8_iter2 <= ap_enable_reg_pp8_iter1;
        end else if ((1'b1 == ap_CS_fsm_state76)) begin
            ap_enable_reg_pp8_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp9_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp9_stage0) & (1'b1 == ap_condition_pp9_exit_iter0_state83) & (1'b0 == ap_block_pp9_stage0_subdone))) begin
            ap_enable_reg_pp9_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state82)) begin
            ap_enable_reg_pp9_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp9_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp9_exit_iter0_state83)) begin
                ap_enable_reg_pp9_iter1 <= (1'b1 ^ ap_condition_pp9_exit_iter0_state83);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp9_iter1 <= ap_enable_reg_pp9_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp9_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter10 <= ap_enable_reg_pp9_iter9;
        end else if ((1'b1 == ap_CS_fsm_state82)) begin
            ap_enable_reg_pp9_iter10 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp9_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter2 <= ap_enable_reg_pp9_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp9_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter3 <= ap_enable_reg_pp9_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp9_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter4 <= ap_enable_reg_pp9_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp9_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter5 <= ap_enable_reg_pp9_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp9_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter6 <= ap_enable_reg_pp9_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp9_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter7 <= ap_enable_reg_pp9_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp9_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter8 <= ap_enable_reg_pp9_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp9_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter9 <= ap_enable_reg_pp9_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mem_V_ARREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_mem_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state70)) | ((ap_sig_ioackin_mem_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state41)) | ((ap_sig_ioackin_mem_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((ap_sig_ioackin_mem_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((ap_sig_ioackin_mem_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
            ap_reg_ioackin_mem_V_ARREADY <= 1'b0;
        end else if ((((mem_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state70)) | ((mem_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state41)) | ((mem_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((mem_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((mem_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
            ap_reg_ioackin_mem_V_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_out_V_AWREADY <= 1'b0;
    end else begin
        if (((exitcond6_fu_821_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state68))) begin
            if ((1'b0 == ap_block_state68_io)) begin
                ap_reg_ioackin_out_V_AWREADY <= 1'b0;
            end else if ((out_V_AWREADY == 1'b1)) begin
                ap_reg_ioackin_out_V_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_out_V_WREADY <= 1'b0;
    end else begin
        if (((ap_reg_pp10_iter1_exitcond11_reg_1286 == 1'd0) & (ap_enable_reg_pp10_iter2 == 1'b1))) begin
            if ((1'b0 == ap_block_pp10_stage0_11001)) begin
                ap_reg_ioackin_out_V_WREADY <= 1'b0;
            end else if (((out_V_WREADY == 1'b1) & (1'b0 == ap_block_pp10_stage0_01001))) begin
                ap_reg_ioackin_out_V_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        i4_reg_544 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        i4_reg_544 <= i_5_reg_1205;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        i7_reg_487 <= 4'd0;
    end else if (((1'b0 == ap_block_pp4_stage0_11001) & (exitcond2_fu_703_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        i7_reg_487 <= i_2_fu_709_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        i8_reg_498 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        i8_reg_498 <= i_3_reg_1114;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_734_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
        i9_reg_533 <= 10'd0;
    end else if (((1'b0 == ap_block_pp7_stage0_11001) & (exitcond4_fu_793_p2 == 1'd0) & (ap_enable_reg_pp7_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0))) begin
        i9_reg_533 <= i_4_fu_799_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        i_reg_476 <= 10'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (exitcond1_fu_682_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        i_reg_476 <= i_1_fu_688_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond7_reg_1022 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar1_reg_452 <= indvar_next1_reg_1026;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        indvar1_reg_452 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond8_reg_1042 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        indvar2_reg_464 <= indvar_next2_reg_1046;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        indvar2_reg_464 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (exitcond10_reg_1119 == 1'd0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        indvar3_reg_510 <= indvar_next3_reg_1123;
    end else if (((exitcond3_fu_734_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state48))) begin
        indvar3_reg_510 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp10_stage0_11001) & (exitcond11_fu_947_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp10_stage0) & (ap_enable_reg_pp10_iter0 == 1'b1))) begin
        indvar4_reg_579 <= indvar_next4_fu_953_p2;
    end else if (((1'b0 == ap_block_state68_io) & (exitcond6_fu_821_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state68))) begin
        indvar4_reg_579 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp8_stage0_11001) & (exitcond12_reg_1227 == 1'd0) & (ap_enable_reg_pp8_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp8_stage0))) begin
        indvar5_reg_556 <= indvar_next5_reg_1231;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        indvar5_reg_556 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond9_reg_1002 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_reg_440 <= indvar_next_reg_1006;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        indvar_reg_440 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp9_stage0_11001) & (exitcond_fu_915_p2 == 1'd0) & (ap_enable_reg_pp9_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp9_stage0))) begin
        j2_reg_568 <= j_2_fu_921_p2;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        j2_reg_568 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (exitcond5_fu_772_p2 == 1'd0) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        j_reg_522 <= j_1_fu_778_p2;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        j_reg_522 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        reg_590 <= l1_result_V_q1;
    end else if (((1'b0 == ap_block_pp6_stage0_11001) & (ap_reg_pp6_iter3_exitcond5_reg_1143 == 1'd0) & (ap_enable_reg_pp6_iter4 == 1'b1))) begin
        reg_590 <= l1_result_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp10_stage0_11001) & (exitcond11_reg_1286 == 1'd0) & (ap_enable_reg_pp10_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp10_stage0))) begin
        reg_595 <= l2_result_V_q1;
    end else if (((1'b0 == ap_block_pp9_stage0_11001) & (ap_reg_pp9_iter7_exitcond_reg_1246 == 1'd0) & (ap_enable_reg_pp9_iter8 == 1'b1))) begin
        reg_595 <= l2_result_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_exitcond9_reg_1002 <= exitcond9_reg_1002;
        ap_reg_pp0_iter1_indvar_reg_440 <= indvar_reg_440;
        exitcond9_reg_1002 <= exitcond9_fu_611_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp10_stage0_11001) & (1'b1 == ap_CS_fsm_pp10_stage0))) begin
        ap_reg_pp10_iter1_exitcond11_reg_1286 <= exitcond11_reg_1286;
        exitcond11_reg_1286 <= exitcond11_fu_947_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_reg_pp1_iter1_exitcond7_reg_1022 <= exitcond7_reg_1022;
        ap_reg_pp1_iter1_indvar1_reg_452 <= indvar1_reg_452;
        exitcond7_reg_1022 <= exitcond7_fu_638_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_reg_pp2_iter1_exitcond8_reg_1042 <= exitcond8_reg_1042;
        ap_reg_pp2_iter1_indvar2_reg_464 <= indvar2_reg_464;
        exitcond8_reg_1042 <= exitcond8_fu_665_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        ap_reg_pp3_iter1_exitcond1_reg_1056 <= exitcond1_reg_1056;
        ap_reg_pp3_iter1_tmp_3_reg_1065[9 : 0] <= tmp_3_reg_1065[9 : 0];
        exitcond1_reg_1056 <= exitcond1_fu_682_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp3_stage0_11001)) begin
        ap_reg_pp3_iter2_exitcond1_reg_1056 <= ap_reg_pp3_iter1_exitcond1_reg_1056;
        ap_reg_pp3_iter2_tmp_3_reg_1065[9 : 0] <= ap_reg_pp3_iter1_tmp_3_reg_1065[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        ap_reg_pp4_iter1_exitcond2_reg_1080 <= exitcond2_reg_1080;
        ap_reg_pp4_iter1_tmp_6_reg_1089[3 : 0] <= tmp_6_reg_1089[3 : 0];
        exitcond2_reg_1080 <= exitcond2_fu_703_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        ap_reg_pp5_iter1_exitcond10_reg_1119 <= exitcond10_reg_1119;
        ap_reg_pp5_iter1_indvar3_reg_510 <= indvar3_reg_510;
        exitcond10_reg_1119 <= exitcond10_fu_746_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        ap_reg_pp6_iter1_exitcond5_reg_1143 <= exitcond5_reg_1143;
        ap_reg_pp6_iter1_l1_result_V_addr_2_reg_1157 <= l1_result_V_addr_2_reg_1157;
        exitcond5_reg_1143 <= exitcond5_fu_772_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp6_stage0_11001)) begin
        ap_reg_pp6_iter2_exitcond5_reg_1143 <= ap_reg_pp6_iter1_exitcond5_reg_1143;
        ap_reg_pp6_iter2_l1_result_V_addr_2_reg_1157 <= ap_reg_pp6_iter1_l1_result_V_addr_2_reg_1157;
        ap_reg_pp6_iter3_exitcond5_reg_1143 <= ap_reg_pp6_iter2_exitcond5_reg_1143;
        ap_reg_pp6_iter3_l1_result_V_addr_2_reg_1157 <= ap_reg_pp6_iter2_l1_result_V_addr_2_reg_1157;
        ap_reg_pp6_iter4_exitcond5_reg_1143 <= ap_reg_pp6_iter3_exitcond5_reg_1143;
        ap_reg_pp6_iter4_l1_result_V_addr_2_reg_1157 <= ap_reg_pp6_iter3_l1_result_V_addr_2_reg_1157;
        ap_reg_pp6_iter5_exitcond5_reg_1143 <= ap_reg_pp6_iter4_exitcond5_reg_1143;
        ap_reg_pp6_iter5_l1_result_V_addr_2_reg_1157 <= ap_reg_pp6_iter4_l1_result_V_addr_2_reg_1157;
        ap_reg_pp6_iter6_exitcond5_reg_1143 <= ap_reg_pp6_iter5_exitcond5_reg_1143;
        ap_reg_pp6_iter6_l1_result_V_addr_2_reg_1157 <= ap_reg_pp6_iter5_l1_result_V_addr_2_reg_1157;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0))) begin
        ap_reg_pp7_iter1_l1_result_V_addr_1_reg_1187 <= l1_result_V_addr_1_reg_1187;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp8_stage0_11001) & (1'b1 == ap_CS_fsm_pp8_stage0))) begin
        ap_reg_pp8_iter1_exitcond12_reg_1227 <= exitcond12_reg_1227;
        ap_reg_pp8_iter1_indvar5_reg_556 <= indvar5_reg_556;
        exitcond12_reg_1227 <= exitcond12_fu_893_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp9_stage0_11001) & (1'b1 == ap_CS_fsm_pp9_stage0))) begin
        ap_reg_pp9_iter1_exitcond_reg_1246 <= exitcond_reg_1246;
        ap_reg_pp9_iter1_l2_result_V_addr_2_reg_1260 <= l2_result_V_addr_2_reg_1260;
        exitcond_reg_1246 <= exitcond_fu_915_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp9_stage0_11001)) begin
        ap_reg_pp9_iter2_exitcond_reg_1246 <= ap_reg_pp9_iter1_exitcond_reg_1246;
        ap_reg_pp9_iter2_l2_result_V_addr_2_reg_1260 <= ap_reg_pp9_iter1_l2_result_V_addr_2_reg_1260;
        ap_reg_pp9_iter3_exitcond_reg_1246 <= ap_reg_pp9_iter2_exitcond_reg_1246;
        ap_reg_pp9_iter3_l2_result_V_addr_2_reg_1260 <= ap_reg_pp9_iter2_l2_result_V_addr_2_reg_1260;
        ap_reg_pp9_iter4_exitcond_reg_1246 <= ap_reg_pp9_iter3_exitcond_reg_1246;
        ap_reg_pp9_iter4_l2_result_V_addr_2_reg_1260 <= ap_reg_pp9_iter3_l2_result_V_addr_2_reg_1260;
        ap_reg_pp9_iter5_exitcond_reg_1246 <= ap_reg_pp9_iter4_exitcond_reg_1246;
        ap_reg_pp9_iter5_l2_result_V_addr_2_reg_1260 <= ap_reg_pp9_iter4_l2_result_V_addr_2_reg_1260;
        ap_reg_pp9_iter6_exitcond_reg_1246 <= ap_reg_pp9_iter5_exitcond_reg_1246;
        ap_reg_pp9_iter6_l2_result_V_addr_2_reg_1260 <= ap_reg_pp9_iter5_l2_result_V_addr_2_reg_1260;
        ap_reg_pp9_iter7_exitcond_reg_1246 <= ap_reg_pp9_iter6_exitcond_reg_1246;
        ap_reg_pp9_iter7_l2_result_V_addr_2_reg_1260 <= ap_reg_pp9_iter6_l2_result_V_addr_2_reg_1260;
        ap_reg_pp9_iter8_exitcond_reg_1246 <= ap_reg_pp9_iter7_exitcond_reg_1246;
        ap_reg_pp9_iter8_l2_result_V_addr_2_reg_1260 <= ap_reg_pp9_iter7_l2_result_V_addr_2_reg_1260;
        ap_reg_pp9_iter9_exitcond_reg_1246 <= ap_reg_pp9_iter8_exitcond_reg_1246;
        ap_reg_pp9_iter9_l2_result_V_addr_2_reg_1260 <= ap_reg_pp9_iter8_l2_result_V_addr_2_reg_1260;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        b1_offset_read_reg_981 <= b1_offset;
        b2_offset_read_reg_976 <= b2_offset;
        mem_V_addr_reg_996 <= tmp_fu_601_p1;
        result_offset_read_reg_971 <= result_offset;
        w1_offset_read_reg_991 <= w1_offset;
        w2_offset_read_reg_986 <= w2_offset;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_reg_pp3_iter1_exitcond1_reg_1056 == 1'd0) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        bias_1_load_reg_1075 <= bias_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (exitcond2_reg_1080 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        bias_2_load_reg_1099 <= bias_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        i_3_reg_1114 <= i_3_fu_740_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state68_io) & (1'b1 == ap_CS_fsm_state68))) begin
        i_5_reg_1205 <= i_5_fu_827_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_next1_reg_1026 <= indvar_next1_fu_644_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        indvar_next2_reg_1046 <= indvar_next2_fu_671_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        indvar_next3_reg_1123 <= indvar_next3_fu_752_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp8_stage0_11001) & (ap_enable_reg_pp8_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp8_stage0))) begin
        indvar_next5_reg_1231 <= indvar_next5_fu_899_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_next_reg_1006 <= indvar_next_fu_617_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp7_stage0_11001) & (exitcond4_fu_793_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp7_stage0))) begin
        l1_result_V_addr_1_reg_1187 <= tmp_7_fu_805_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (exitcond5_fu_772_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        l1_result_V_addr_2_reg_1157 <= tmp_11_fu_784_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp9_stage0_11001) & (exitcond_fu_915_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp9_stage0))) begin
        l2_result_V_addr_2_reg_1260 <= tmp_18_fu_927_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond7_reg_1022 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        mem_V_addr_1_read_reg_1031 <= mem_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond8_reg_1042 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        mem_V_addr_2_read_reg_1051 <= mem_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (exitcond10_reg_1119 == 1'd0) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        mem_V_addr_3_read_reg_1128 <= mem_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp8_stage0_11001) & (exitcond12_reg_1227 == 1'd0) & (1'b1 == ap_CS_fsm_pp8_stage0))) begin
        mem_V_addr_4_read_reg_1236 <= mem_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        mem_V_addr_4_reg_1221 <= p_sum_cast_fu_883_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond9_reg_1002 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mem_V_addr_read_reg_1011 <= mem_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        rhs_V_reg_1138 <= rhs_V_fu_768_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (ap_reg_pp6_iter5_exitcond5_reg_1143 == 1'd0) & (ap_enable_reg_pp6_iter6 == 1'b1))) begin
        tmp_13_reg_1173 <= grp_fu_964_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state68_io) & (exitcond6_fu_821_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state68))) begin
        tmp_15_reg_1210[12 : 1] <= tmp_15_fu_859_p2[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp9_stage0_11001) & (ap_reg_pp9_iter7_exitcond_reg_1246 == 1'd0))) begin
        tmp_20_reg_1276 <= grp_fu_936_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp9_stage0_11001) & (ap_reg_pp9_iter8_exitcond_reg_1246 == 1'd0))) begin
        tmp_21_reg_1281 <= tmp_21_fu_942_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (exitcond1_fu_682_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        tmp_3_reg_1065[9 : 0] <= tmp_3_fu_694_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        tmp_4_cast_reg_1196[31 : 0] <= tmp_4_cast_fu_818_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (exitcond2_fu_703_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        tmp_6_reg_1089[3 : 0] <= tmp_6_fu_715_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (ap_reg_pp6_iter1_exitcond5_reg_1143 == 1'd0) & (ap_enable_reg_pp6_iter2 == 1'b1))) begin
        weights_1_load_reg_1163 <= weights_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp9_stage0_11001) & (exitcond_reg_1246 == 1'd0) & (1'b1 == ap_CS_fsm_pp9_stage0) & (ap_enable_reg_pp9_iter1 == 1'b1))) begin
        weights_2_load_reg_1266 <= weights_2_q0;
    end
end

always @ (*) begin
    if ((exitcond9_fu_611_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond11_fu_947_p2 == 1'd1)) begin
        ap_condition_pp10_exit_iter0_state95 = 1'b1;
    end else begin
        ap_condition_pp10_exit_iter0_state95 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond7_fu_638_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state19 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state19 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond8_fu_665_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state29 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state29 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond1_fu_682_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state33 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state33 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond2_fu_703_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state38 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state38 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond10_fu_746_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state49 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state49 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond5_fu_772_p2 == 1'd1)) begin
        ap_condition_pp6_exit_iter0_state55 = 1'b1;
    end else begin
        ap_condition_pp6_exit_iter0_state55 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond4_fu_793_p2 == 1'd1)) begin
        ap_condition_pp7_exit_iter0_state64 = 1'b1;
    end else begin
        ap_condition_pp7_exit_iter0_state64 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond12_fu_893_p2 == 1'd1)) begin
        ap_condition_pp8_exit_iter0_state77 = 1'b1;
    end else begin
        ap_condition_pp8_exit_iter0_state77 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_fu_915_p2 == 1'd1)) begin
        ap_condition_pp9_exit_iter0_state83 = 1'b1;
    end else begin
        ap_condition_pp9_exit_iter0_state83 = 1'b0;
    end
end

always @ (*) begin
    if (((out_V_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state102))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp10_iter1 == 1'b0) & (ap_enable_reg_pp10_iter2 == 1'b0) & (ap_enable_reg_pp10_iter0 == 1'b0))) begin
        ap_idle_pp10 = 1'b1;
    end else begin
        ap_idle_pp10 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter3 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter0 == 1'b0) & (ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp6_iter6 == 1'b0) & (ap_enable_reg_pp6_iter2 == 1'b0) & (ap_enable_reg_pp6_iter0 == 1'b0) & (ap_enable_reg_pp6_iter4 == 1'b0) & (ap_enable_reg_pp6_iter7 == 1'b0) & (ap_enable_reg_pp6_iter5 == 1'b0) & (ap_enable_reg_pp6_iter3 == 1'b0) & (ap_enable_reg_pp6_iter1 == 1'b0))) begin
        ap_idle_pp6 = 1'b1;
    end else begin
        ap_idle_pp6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp7_iter0 == 1'b0) & (ap_enable_reg_pp7_iter2 == 1'b0) & (ap_enable_reg_pp7_iter1 == 1'b0))) begin
        ap_idle_pp7 = 1'b1;
    end else begin
        ap_idle_pp7 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp8_iter0 == 1'b0) & (ap_enable_reg_pp8_iter1 == 1'b0) & (ap_enable_reg_pp8_iter2 == 1'b0))) begin
        ap_idle_pp8 = 1'b1;
    end else begin
        ap_idle_pp8 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp9_iter0 == 1'b0) & (ap_enable_reg_pp9_iter8 == 1'b0) & (ap_enable_reg_pp9_iter10 == 1'b0) & (ap_enable_reg_pp9_iter9 == 1'b0) & (ap_enable_reg_pp9_iter7 == 1'b0) & (ap_enable_reg_pp9_iter6 == 1'b0) & (ap_enable_reg_pp9_iter5 == 1'b0) & (ap_enable_reg_pp9_iter4 == 1'b0) & (ap_enable_reg_pp9_iter3 == 1'b0) & (ap_enable_reg_pp9_iter2 == 1'b0) & (ap_enable_reg_pp9_iter1 == 1'b0))) begin
        ap_idle_pp9 = 1'b1;
    end else begin
        ap_idle_pp9 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (exitcond7_reg_1022 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_indvar1_phi_fu_456_p4 = indvar_next1_reg_1026;
    end else begin
        ap_phi_mux_indvar1_phi_fu_456_p4 = indvar1_reg_452;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (exitcond8_reg_1042 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_indvar2_phi_fu_468_p4 = indvar_next2_reg_1046;
    end else begin
        ap_phi_mux_indvar2_phi_fu_468_p4 = indvar2_reg_464;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0) & (exitcond10_reg_1119 == 1'd0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        ap_phi_mux_indvar3_phi_fu_514_p4 = indvar_next3_reg_1123;
    end else begin
        ap_phi_mux_indvar3_phi_fu_514_p4 = indvar3_reg_510;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp8_stage0) & (exitcond12_reg_1227 == 1'd0) & (ap_enable_reg_pp8_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp8_stage0))) begin
        ap_phi_mux_indvar5_phi_fu_560_p4 = indvar_next5_reg_1231;
    end else begin
        ap_phi_mux_indvar5_phi_fu_560_p4 = indvar5_reg_556;
    end
end

always @ (*) begin
    if (((exitcond9_reg_1002 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_phi_fu_444_p4 = indvar_next_reg_1006;
    end else begin
        ap_phi_mux_indvar_phi_fu_444_p4 = indvar_reg_440;
    end
end

always @ (*) begin
    if (((out_V_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state102))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_mem_V_ARREADY == 1'b0)) begin
        ap_sig_ioackin_mem_V_ARREADY = mem_V_ARREADY;
    end else begin
        ap_sig_ioackin_mem_V_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_out_V_AWREADY == 1'b0)) begin
        ap_sig_ioackin_out_V_AWREADY = out_V_AWREADY;
    end else begin
        ap_sig_ioackin_out_V_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_out_V_WREADY == 1'b0)) begin
        ap_sig_ioackin_out_V_WREADY = out_V_WREADY;
    end else begin
        ap_sig_ioackin_out_V_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        bias_1_address0 = tmp_3_fu_694_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        bias_1_address0 = tmp_4_fu_650_p1;
    end else begin
        bias_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        bias_1_ce0 = 1'b1;
    end else begin
        bias_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_reg_pp1_iter1_exitcond7_reg_1022 == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        bias_1_we0 = 1'b1;
    end else begin
        bias_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        bias_2_address0 = tmp_6_fu_715_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        bias_2_address0 = tmp_8_fu_677_p1;
    end else begin
        bias_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
        bias_2_ce0 = 1'b1;
    end else begin
        bias_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_reg_pp2_iter1_exitcond8_reg_1042 == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        bias_2_we0 = 1'b1;
    end else begin
        bias_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        inputs_address0 = tmp_s_fu_763_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        inputs_address0 = tmp_5_fu_623_p1;
    end else begin
        inputs_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state53) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        inputs_ce0 = 1'b1;
    end else begin
        inputs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter1_exitcond9_reg_1002 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        inputs_we0 = 1'b1;
    end else begin
        inputs_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp7_iter2 == 1'b1) & (1'b0 == ap_block_pp7_stage0))) begin
        l1_result_V_address0 = ap_reg_pp7_iter1_l1_result_V_addr_1_reg_1187;
    end else if (((ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0))) begin
        l1_result_V_address0 = ap_reg_pp6_iter1_l1_result_V_addr_2_reg_1157;
    end else if (((ap_enable_reg_pp3_iter3 == 1'b1) & (1'b0 == ap_block_pp3_stage0))) begin
        l1_result_V_address0 = ap_reg_pp3_iter2_tmp_3_reg_1065;
    end else begin
        l1_result_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        l1_result_V_address1 = tmp_17_fu_910_p1;
    end else if (((ap_enable_reg_pp7_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0))) begin
        l1_result_V_address1 = tmp_7_fu_805_p1;
    end else if (((ap_enable_reg_pp6_iter7 == 1'b1) & (1'b0 == ap_block_pp6_stage0))) begin
        l1_result_V_address1 = ap_reg_pp6_iter6_l1_result_V_addr_2_reg_1157;
    end else begin
        l1_result_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp7_stage0_11001) & (ap_enable_reg_pp7_iter2 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter3 == 1'b1)) | ((1'b0 == ap_block_pp6_stage0_11001) & (ap_enable_reg_pp6_iter2 == 1'b1)) | ((1'b0 == ap_block_pp6_stage0_11001) & (ap_enable_reg_pp6_iter3 == 1'b1)) | ((1'b0 == ap_block_pp6_stage0_11001) & (ap_enable_reg_pp6_iter4 == 1'b1)))) begin
        l1_result_V_ce0 = 1'b1;
    end else begin
        l1_result_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state81) | ((1'b0 == ap_block_pp7_stage0_11001) & (ap_enable_reg_pp7_iter2 == 1'b1)) | ((1'b0 == ap_block_pp7_stage0_11001) & (ap_enable_reg_pp7_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0)) | ((1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0) & (ap_enable_reg_pp7_iter1 == 1'b1)) | ((1'b0 == ap_block_pp6_stage0_11001) & (ap_enable_reg_pp6_iter7 == 1'b1)))) begin
        l1_result_V_ce1 = 1'b1;
    end else begin
        l1_result_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp7_iter2 == 1'b1) & (1'b0 == ap_block_pp7_stage0))) begin
        l1_result_V_d0 = 32'd0;
    end else if (((ap_enable_reg_pp3_iter3 == 1'b1) & (1'b0 == ap_block_pp3_stage0))) begin
        l1_result_V_d0 = p_s_fu_699_p1;
    end else begin
        l1_result_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp7_stage0_11001) & (tmp_24_fu_810_p3 == 1'd1) & (ap_enable_reg_pp7_iter2 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_reg_pp3_iter2_exitcond1_reg_1056 == 1'd0) & (ap_enable_reg_pp3_iter3 == 1'b1)))) begin
        l1_result_V_we0 = 1'b1;
    end else begin
        l1_result_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (ap_reg_pp6_iter6_exitcond5_reg_1143 == 1'd0) & (ap_enable_reg_pp6_iter7 == 1'b1))) begin
        l1_result_V_we1 = 1'b1;
    end else begin
        l1_result_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp9_iter7 == 1'b1) & (1'b0 == ap_block_pp9_stage0))) begin
        l2_result_V_address0 = ap_reg_pp9_iter6_l2_result_V_addr_2_reg_1260;
    end else if (((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0))) begin
        l2_result_V_address0 = ap_reg_pp4_iter1_tmp_6_reg_1089;
    end else begin
        l2_result_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp10_stage0) & (1'b1 == ap_CS_fsm_pp10_stage0) & (ap_enable_reg_pp10_iter0 == 1'b1))) begin
        l2_result_V_address1 = tmp_30_fu_959_p1;
    end else if (((ap_enable_reg_pp9_iter10 == 1'b1) & (1'b0 == ap_block_pp9_stage0))) begin
        l2_result_V_address1 = ap_reg_pp9_iter9_l2_result_V_addr_2_reg_1260;
    end else begin
        l2_result_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter2 == 1'b1)) | ((1'b0 == ap_block_pp9_stage0_11001) & (ap_enable_reg_pp9_iter7 == 1'b1)))) begin
        l2_result_V_ce0 = 1'b1;
    end else begin
        l2_result_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp10_stage0_11001) & (1'b1 == ap_CS_fsm_pp10_stage0) & (ap_enable_reg_pp10_iter0 == 1'b1)) | ((1'b0 == ap_block_pp9_stage0_11001) & (ap_enable_reg_pp9_iter10 == 1'b1)))) begin
        l2_result_V_ce1 = 1'b1;
    end else begin
        l2_result_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (ap_reg_pp4_iter1_exitcond2_reg_1080 == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1))) begin
        l2_result_V_we0 = 1'b1;
    end else begin
        l2_result_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp9_stage0_11001) & (ap_reg_pp9_iter9_exitcond_reg_1246 == 1'd0) & (ap_enable_reg_pp9_iter10 == 1'b1))) begin
        l2_result_V_we1 = 1'b1;
    end else begin
        l2_result_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_mem_V_ARREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state70)) begin
            mem_V_ARADDR = mem_V_addr_4_reg_1221;
        end else if ((1'b1 == ap_CS_fsm_state41)) begin
            mem_V_ARADDR = tmp_10_fu_724_p1;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            mem_V_ARADDR = tmp_2_fu_655_p1;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            mem_V_ARADDR = tmp_1_fu_628_p1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            mem_V_ARADDR = mem_V_addr_reg_996;
        end else begin
            mem_V_ARADDR = 'bx;
        end
    end else begin
        mem_V_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_mem_V_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state41))) begin
        mem_V_ARLEN = 32'd401408;
    end else if ((((ap_reg_ioackin_mem_V_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state70)) | ((ap_reg_ioackin_mem_V_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state22)))) begin
        mem_V_ARLEN = 32'd10;
    end else if (((ap_reg_ioackin_mem_V_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state12))) begin
        mem_V_ARLEN = 32'd512;
    end else if (((ap_reg_ioackin_mem_V_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        mem_V_ARLEN = 32'd784;
    end else begin
        mem_V_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_mem_V_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state70)) | ((ap_reg_ioackin_mem_V_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state41)) | ((ap_reg_ioackin_mem_V_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state22)) | ((ap_reg_ioackin_mem_V_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state12)) | ((ap_reg_ioackin_mem_V_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2)))) begin
        mem_V_ARVALID = 1'b1;
    end else begin
        mem_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp8_stage0_11001) & (exitcond12_reg_1227 == 1'd0) & (ap_enable_reg_pp8_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp8_stage0)) | ((1'b0 == ap_block_pp5_stage0_11001) & (exitcond10_reg_1119 == 1'd0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (exitcond8_reg_1042 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (exitcond7_reg_1022 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (exitcond9_reg_1002 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        mem_V_RREADY = 1'b1;
    end else begin
        mem_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state2))) begin
        mem_V_blk_n_AR = m_axi_mem_V_ARREADY;
    end else begin
        mem_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp8_stage0) & (exitcond12_reg_1227 == 1'd0) & (ap_enable_reg_pp8_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp8_stage0)) | ((1'b0 == ap_block_pp5_stage0) & (exitcond10_reg_1119 == 1'd0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0)) | ((1'b0 == ap_block_pp2_stage0) & (exitcond8_reg_1042 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0) & (exitcond7_reg_1022 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((exitcond9_reg_1002 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        mem_V_blk_n_R = m_axi_mem_V_RVALID;
    end else begin
        mem_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond6_fu_821_p2 == 1'd1) & (ap_reg_ioackin_out_V_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state68))) begin
        out_V_AWVALID = 1'b1;
    end else begin
        out_V_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((out_V_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state102))) begin
        out_V_BREADY = 1'b1;
    end else begin
        out_V_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_out_V_WREADY == 1'b0) & (ap_reg_pp10_iter1_exitcond11_reg_1286 == 1'd0) & (ap_enable_reg_pp10_iter2 == 1'b1) & (1'b0 == ap_block_pp10_stage0_01001))) begin
        out_V_WVALID = 1'b1;
    end else begin
        out_V_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond6_fu_821_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state68))) begin
        out_V_blk_n_AW = m_axi_out_V_AWREADY;
    end else begin
        out_V_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        out_V_blk_n_B = m_axi_out_V_BVALID;
    end else begin
        out_V_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp10_stage0) & (ap_reg_pp10_iter1_exitcond11_reg_1286 == 1'd0) & (ap_enable_reg_pp10_iter2 == 1'b1))) begin
        out_V_blk_n_W = m_axi_out_V_WREADY;
    end else begin
        out_V_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp6_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0))) begin
        weights_1_address0 = tmp_11_fu_784_p1;
    end else if (((1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter2 == 1'b1))) begin
        weights_1_address0 = tmp_25_fu_758_p1;
    end else begin
        weights_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp6_stage0_11001) & (ap_enable_reg_pp6_iter2 == 1'b1)) | ((1'b0 == ap_block_pp6_stage0_11001) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0)) | ((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter1 == 1'b1)) | ((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter2 == 1'b1)))) begin
        weights_1_ce0 = 1'b1;
    end else begin
        weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_reg_pp5_iter1_exitcond10_reg_1119 == 1'd0) & (ap_enable_reg_pp5_iter2 == 1'b1))) begin
        weights_1_we0 = 1'b1;
    end else begin
        weights_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp9_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp9_stage0) & (1'b0 == ap_block_pp9_stage0))) begin
        weights_2_address0 = tmp_18_fu_927_p1;
    end else if (((1'b0 == ap_block_pp8_stage0) & (ap_enable_reg_pp8_iter2 == 1'b1))) begin
        weights_2_address0 = tmp_31_fu_905_p1;
    end else begin
        weights_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp9_stage0_11001) & (ap_enable_reg_pp9_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp9_stage0)) | ((1'b0 == ap_block_pp8_stage0_11001) & (ap_enable_reg_pp8_iter2 == 1'b1)))) begin
        weights_2_ce0 = 1'b1;
    end else begin
        weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp8_stage0_11001) & (ap_reg_pp8_iter1_exitcond12_reg_1227 == 1'd0) & (ap_enable_reg_pp8_iter2 == 1'b1))) begin
        weights_2_we0 = 1'b1;
    end else begin
        weights_2_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((ap_sig_ioackin_mem_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond9_fu_611_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((exitcond9_fu_611_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((ap_sig_ioackin_mem_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((exitcond7_fu_638_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((exitcond7_fu_638_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((ap_sig_ioackin_mem_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((exitcond8_fu_665_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((exitcond8_fu_665_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((exitcond1_fu_682_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone)) & ~((ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter3 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((exitcond1_fu_682_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone)) | ((ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter3 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((ap_enable_reg_pp4_iter1 == 1'b0) & (exitcond2_fu_703_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)) & ~((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((ap_enable_reg_pp4_iter1 == 1'b0) & (exitcond2_fu_703_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)) | ((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state41 : begin
            if (((ap_sig_ioackin_mem_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            if (((exitcond3_fu_734_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_pp5_stage0 : begin
            if ((~((exitcond10_fu_746_p2 == 1'd1) & (ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)) & ~((ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if ((((exitcond10_fu_746_p2 == 1'd1) & (ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)) | ((ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_pp6_stage0;
        end
        ap_ST_fsm_pp6_stage0 : begin
            if ((~((exitcond5_fu_772_p2 == 1'd1) & (ap_enable_reg_pp6_iter0 == 1'b1) & (ap_enable_reg_pp6_iter1 == 1'b0) & (1'b0 == ap_block_pp6_stage0_subdone)) & ~((ap_enable_reg_pp6_iter6 == 1'b0) & (ap_enable_reg_pp6_iter7 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end else if ((((exitcond5_fu_772_p2 == 1'd1) & (ap_enable_reg_pp6_iter0 == 1'b1) & (ap_enable_reg_pp6_iter1 == 1'b0) & (1'b0 == ap_block_pp6_stage0_subdone)) | ((ap_enable_reg_pp6_iter6 == 1'b0) & (ap_enable_reg_pp6_iter7 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_pp7_stage0 : begin
            if ((~((exitcond4_fu_793_p2 == 1'd1) & (ap_enable_reg_pp7_iter0 == 1'b1) & (ap_enable_reg_pp7_iter1 == 1'b0) & (1'b0 == ap_block_pp7_stage0_subdone)) & ~((ap_enable_reg_pp7_iter2 == 1'b1) & (ap_enable_reg_pp7_iter1 == 1'b0) & (1'b0 == ap_block_pp7_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage0;
            end else if ((((exitcond4_fu_793_p2 == 1'd1) & (ap_enable_reg_pp7_iter0 == 1'b1) & (ap_enable_reg_pp7_iter1 == 1'b0) & (1'b0 == ap_block_pp7_stage0_subdone)) | ((ap_enable_reg_pp7_iter2 == 1'b1) & (ap_enable_reg_pp7_iter1 == 1'b0) & (1'b0 == ap_block_pp7_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage0;
            end
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            if (((1'b0 == ap_block_state68_io) & (exitcond6_fu_821_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state68))) begin
                ap_NS_fsm = ap_ST_fsm_pp10_stage0;
            end else if (((1'b0 == ap_block_state68_io) & (exitcond6_fu_821_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state68))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            if (((ap_sig_ioackin_mem_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state70))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_pp8_stage0;
        end
        ap_ST_fsm_pp8_stage0 : begin
            if ((~((exitcond12_fu_893_p2 == 1'd1) & (ap_enable_reg_pp8_iter1 == 1'b0) & (ap_enable_reg_pp8_iter0 == 1'b1) & (1'b0 == ap_block_pp8_stage0_subdone)) & ~((ap_enable_reg_pp8_iter1 == 1'b0) & (ap_enable_reg_pp8_iter2 == 1'b1) & (1'b0 == ap_block_pp8_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp8_stage0;
            end else if ((((exitcond12_fu_893_p2 == 1'd1) & (ap_enable_reg_pp8_iter1 == 1'b0) & (ap_enable_reg_pp8_iter0 == 1'b1) & (1'b0 == ap_block_pp8_stage0_subdone)) | ((ap_enable_reg_pp8_iter1 == 1'b0) & (ap_enable_reg_pp8_iter2 == 1'b1) & (1'b0 == ap_block_pp8_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp8_stage0;
            end
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_pp9_stage0;
        end
        ap_ST_fsm_pp9_stage0 : begin
            if ((~((exitcond_fu_915_p2 == 1'd1) & (ap_enable_reg_pp9_iter0 == 1'b1) & (1'b0 == ap_block_pp9_stage0_subdone) & (ap_enable_reg_pp9_iter1 == 1'b0)) & ~((ap_enable_reg_pp9_iter10 == 1'b1) & (ap_enable_reg_pp9_iter9 == 1'b0) & (1'b0 == ap_block_pp9_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp9_stage0;
            end else if ((((exitcond_fu_915_p2 == 1'd1) & (ap_enable_reg_pp9_iter0 == 1'b1) & (1'b0 == ap_block_pp9_stage0_subdone) & (ap_enable_reg_pp9_iter1 == 1'b0)) | ((ap_enable_reg_pp9_iter10 == 1'b1) & (ap_enable_reg_pp9_iter9 == 1'b0) & (1'b0 == ap_block_pp9_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state94;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp9_stage0;
            end
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_pp10_stage0 : begin
            if ((~((ap_enable_reg_pp10_iter1 == 1'b0) & (exitcond11_fu_947_p2 == 1'd1) & (ap_enable_reg_pp10_iter0 == 1'b1) & (1'b0 == ap_block_pp10_stage0_subdone)) & ~((ap_enable_reg_pp10_iter1 == 1'b0) & (ap_enable_reg_pp10_iter2 == 1'b1) & (1'b0 == ap_block_pp10_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp10_stage0;
            end else if ((((ap_enable_reg_pp10_iter1 == 1'b0) & (ap_enable_reg_pp10_iter2 == 1'b1) & (1'b0 == ap_block_pp10_stage0_subdone)) | ((ap_enable_reg_pp10_iter1 == 1'b0) & (exitcond11_fu_947_p2 == 1'd1) & (ap_enable_reg_pp10_iter0 == 1'b1) & (1'b0 == ap_block_pp10_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state98;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp10_stage0;
            end
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            if (((out_V_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state102))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state102;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp10_stage0 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_pp6_stage0 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_pp7_stage0 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_pp8_stage0 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_pp9_stage0 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd59];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((mem_V_RVALID == 1'b0) & (exitcond9_reg_1002 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((mem_V_RVALID == 1'b0) & (exitcond9_reg_1002 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp10_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp10_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp10_stage0_11001 = ((1'b1 == ap_block_state97_io) & (ap_enable_reg_pp10_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp10_stage0_subdone = ((1'b1 == ap_block_state97_io) & (ap_enable_reg_pp10_iter2 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((mem_V_RVALID == 1'b0) & (exitcond7_reg_1022 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((mem_V_RVALID == 1'b0) & (exitcond7_reg_1022 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((mem_V_RVALID == 1'b0) & (exitcond8_reg_1042 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((mem_V_RVALID == 1'b0) & (exitcond8_reg_1042 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp5_stage0_11001 = ((mem_V_RVALID == 1'b0) & (exitcond10_reg_1119 == 1'd0) & (ap_enable_reg_pp5_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp5_stage0_subdone = ((mem_V_RVALID == 1'b0) & (exitcond10_reg_1119 == 1'd0) & (ap_enable_reg_pp5_iter1 == 1'b1));
end

assign ap_block_pp6_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp6_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp6_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp7_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp7_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp7_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp8_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp8_stage0_11001 = ((mem_V_RVALID == 1'b0) & (exitcond12_reg_1227 == 1'd0) & (ap_enable_reg_pp8_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp8_stage0_subdone = ((mem_V_RVALID == 1'b0) & (exitcond12_reg_1227 == 1'd0) & (ap_enable_reg_pp8_iter1 == 1'b1));
end

assign ap_block_pp9_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp9_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp9_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((mem_V_RVALID == 1'b0) & (exitcond9_reg_1002 == 1'd0));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_pp1_stage0_iter1 = ((mem_V_RVALID == 1'b0) & (exitcond7_reg_1022 == 1'd0));
end

assign ap_block_state21_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state30_pp2_stage0_iter1 = ((mem_V_RVALID == 1'b0) & (exitcond8_reg_1042 == 1'd0));
end

assign ap_block_state31_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp3_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state50_pp5_stage0_iter1 = ((mem_V_RVALID == 1'b0) & (exitcond10_reg_1119 == 1'd0));
end

assign ap_block_state51_pp5_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp6_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp6_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp6_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp6_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp6_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp6_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp6_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp6_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp7_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp7_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp7_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state68_io = ((exitcond6_fu_821_p2 == 1'd1) & (ap_sig_ioackin_out_V_AWREADY == 1'b0));
end

assign ap_block_state77_pp8_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state78_pp8_stage0_iter1 = ((mem_V_RVALID == 1'b0) & (exitcond12_reg_1227 == 1'd0));
end

assign ap_block_state79_pp8_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state83_pp9_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state84_pp9_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state85_pp9_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state86_pp9_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state87_pp9_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state88_pp9_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state89_pp9_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state90_pp9_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state91_pp9_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state92_pp9_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state93_pp9_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state95_pp10_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state96_pp10_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state97_io = ((ap_sig_ioackin_out_V_WREADY == 1'b0) & (ap_reg_pp10_iter1_exitcond11_reg_1286 == 1'd0));
end

assign ap_block_state97_pp10_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp10 = (ap_idle_pp10 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

assign ap_enable_pp6 = (ap_idle_pp6 ^ 1'b1);

assign ap_enable_pp7 = (ap_idle_pp7 ^ 1'b1);

assign ap_enable_pp8 = (ap_idle_pp8 ^ 1'b1);

assign ap_enable_pp9 = (ap_idle_pp9 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond10_fu_746_p2 = ((ap_phi_mux_indvar3_phi_fu_514_p4 == 10'd512) ? 1'b1 : 1'b0);

assign exitcond11_fu_947_p2 = ((indvar4_reg_579 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond12_fu_893_p2 = ((ap_phi_mux_indvar5_phi_fu_560_p4 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond1_fu_682_p2 = ((i_reg_476 == 10'd512) ? 1'b1 : 1'b0);

assign exitcond2_fu_703_p2 = ((i7_reg_487 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond3_fu_734_p2 = ((i8_reg_498 == 10'd784) ? 1'b1 : 1'b0);

assign exitcond4_fu_793_p2 = ((i9_reg_533 == 10'd512) ? 1'b1 : 1'b0);

assign exitcond5_fu_772_p2 = ((j_reg_522 == 10'd512) ? 1'b1 : 1'b0);

assign exitcond6_fu_821_p2 = ((i4_reg_544 == 10'd512) ? 1'b1 : 1'b0);

assign exitcond7_fu_638_p2 = ((ap_phi_mux_indvar1_phi_fu_456_p4 == 10'd512) ? 1'b1 : 1'b0);

assign exitcond8_fu_665_p2 = ((ap_phi_mux_indvar2_phi_fu_468_p4 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond9_fu_611_p2 = ((ap_phi_mux_indvar_phi_fu_444_p4 == 10'd784) ? 1'b1 : 1'b0);

assign exitcond_fu_915_p2 = ((j2_reg_568 == 4'd10) ? 1'b1 : 1'b0);

assign grp_fu_964_p1 = rhs_V_reg_1138;

assign i_1_fu_688_p2 = (i_reg_476 + 10'd1);

assign i_2_fu_709_p2 = (i7_reg_487 + 4'd1);

assign i_3_fu_740_p2 = (i8_reg_498 + 10'd1);

assign i_4_fu_799_p2 = (i9_reg_533 + 10'd1);

assign i_5_fu_827_p2 = (i4_reg_544 + 10'd1);

assign indvar_next1_fu_644_p2 = (ap_phi_mux_indvar1_phi_fu_456_p4 + 10'd1);

assign indvar_next2_fu_671_p2 = (ap_phi_mux_indvar2_phi_fu_468_p4 + 4'd1);

assign indvar_next3_fu_752_p2 = (ap_phi_mux_indvar3_phi_fu_514_p4 + 10'd1);

assign indvar_next4_fu_953_p2 = (indvar4_reg_579 + 4'd1);

assign indvar_next5_fu_899_p2 = (ap_phi_mux_indvar5_phi_fu_560_p4 + 4'd1);

assign indvar_next_fu_617_p2 = (ap_phi_mux_indvar_phi_fu_444_p4 + 10'd1);

assign j_1_fu_778_p2 = (j_reg_522 + 10'd1);

assign j_2_fu_921_p2 = (j2_reg_568 + 4'd1);

assign l2_result_V_d0 = $signed(bias_2_load_reg_1099);

assign out_V_AWADDR = tmp_14_fu_865_p1;

assign p_s_fu_699_p1 = $signed(bias_1_load_reg_1075);

assign p_shl1_cast_fu_855_p1 = tmp_28_fu_849_p2;

assign p_shl_cast_fu_845_p1 = p_shl_fu_837_p3;

assign p_shl_fu_837_p3 = {{tmp_27_fu_833_p1}, {3'd0}};

assign p_sum_cast_fu_883_p1 = p_sum_fu_878_p2;

assign p_sum_fu_878_p2 = (tmp_16_cast_fu_875_p1 + tmp_4_cast_reg_1196);

assign rhs_V_fu_768_p1 = $signed(inputs_q0);

assign tmp_10_fu_724_p1 = w1_offset_read_reg_991;

assign tmp_11_fu_784_p1 = j_reg_522;

assign tmp_14_fu_865_p1 = result_offset_read_reg_971;

assign tmp_15_fu_859_p2 = (p_shl1_cast_fu_855_p1 + p_shl_cast_fu_845_p1);

assign tmp_16_cast_fu_875_p1 = tmp_15_reg_1210;

assign tmp_17_fu_910_p1 = i4_reg_544;

assign tmp_18_fu_927_p1 = j2_reg_568;

assign tmp_1_fu_628_p1 = b1_offset_read_reg_981;

assign tmp_21_fu_942_p2 = (reg_595 + tmp_20_reg_1276);

assign tmp_24_fu_810_p3 = l1_result_V_q1[32'd31];

assign tmp_25_fu_758_p1 = ap_reg_pp5_iter1_indvar3_reg_510;

assign tmp_27_fu_833_p1 = i4_reg_544[8:0];

assign tmp_28_fu_849_p2 = i4_reg_544 << 10'd1;

assign tmp_2_fu_655_p1 = b2_offset_read_reg_976;

assign tmp_30_fu_959_p1 = indvar4_reg_579;

assign tmp_31_fu_905_p1 = ap_reg_pp8_iter1_indvar5_reg_556;

assign tmp_3_fu_694_p1 = i_reg_476;

assign tmp_4_cast_fu_818_p1 = w2_offset_read_reg_986;

assign tmp_4_fu_650_p1 = ap_reg_pp1_iter1_indvar1_reg_452;

assign tmp_5_fu_623_p1 = ap_reg_pp0_iter1_indvar_reg_440;

assign tmp_6_fu_715_p1 = i7_reg_487;

assign tmp_7_fu_805_p1 = i9_reg_533;

assign tmp_8_fu_677_p1 = ap_reg_pp2_iter1_indvar2_reg_464;

assign tmp_fu_601_p1 = input_offset;

assign tmp_s_fu_763_p1 = i8_reg_498;

always @ (posedge ap_clk) begin
    tmp_3_reg_1065[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    ap_reg_pp3_iter1_tmp_3_reg_1065[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    ap_reg_pp3_iter2_tmp_3_reg_1065[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    tmp_6_reg_1089[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    ap_reg_pp4_iter1_tmp_6_reg_1089[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    tmp_4_cast_reg_1196[32] <= 1'b0;
    tmp_15_reg_1210[0] <= 1'b0;
end

endmodule //neural_network
